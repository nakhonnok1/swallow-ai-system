"""
üß† Smart Statistics & AI Assistant System
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡πÅ‡∏•‡∏∞ AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô
"""

import sqlite3
import json
import datetime
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from pathlib import Path
import numpy as np
import statistics

@dataclass
class BirdStatistics:
    """‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å"""
    period: str  # "3days", "7days", "1month"
    total_birds: int
    birds_in: int
    birds_out: int
    net_change: int
    growth_rate: float
    timestamp: datetime.datetime

@dataclass
class AIInsight:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡∏≠‡∏á AI"""
    message: str
    insight_type: str  # "growth", "warning", "celebration", "analysis"
    confidence: float
    timestamp: datetime.datetime

class SmartStatistics:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
    
    def __init__(self, db_path: str = "swallow_smart_stats.db"):
        self.db_path = db_path
        self.init_database()
        
    def init_database(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS daily_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                date TEXT UNIQUE NOT NULL,
                birds_entering INTEGER DEFAULT 0,
                birds_exiting INTEGER DEFAULT 0,
                net_change INTEGER DEFAULT 0,
                anomalies_detected INTEGER DEFAULT 0,
                video_count INTEGER DEFAULT 0,
                processing_time REAL DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏á‡∏ß‡∏î (3‡∏ß‡∏±‡∏ô, 7‡∏ß‡∏±‡∏ô, 1‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS period_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                period_type TEXT NOT NULL,  -- '3days', '7days', '1month'
                start_date TEXT NOT NULL,
                end_date TEXT NOT NULL,
                total_birds_estimated INTEGER,
                birds_in INTEGER,
                birds_out INTEGER,
                net_change INTEGER,
                growth_rate REAL,
                avg_daily_activity REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° AI
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS ai_insights (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message TEXT NOT NULL,
                insight_type TEXT NOT NULL,
                confidence REAL DEFAULT 0.8,
                data_source TEXT,  -- JSON ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        conn.commit()
        conn.close()
    
    def add_daily_record(self, birds_in: int, birds_out: int, anomalies: int = 0, 
                        video_count: int = 1, processing_time: float = 0):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
        today = datetime.date.today().isoformat()
        net_change = birds_in - birds_out
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT OR REPLACE INTO daily_stats 
            (date, birds_entering, birds_exiting, net_change, anomalies_detected, video_count, processing_time)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (today, birds_in, birds_out, net_change, anomalies, video_count, processing_time))
        
        conn.commit()
        conn.close()
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á AI insight
        self.calculate_period_statistics()
        self.generate_ai_insights()
    
    def calculate_period_statistics(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 3‡∏ß‡∏±‡∏ô 7‡∏ß‡∏±‡∏ô 1‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"""
        periods = [
            ('3days', 3),
            ('7days', 7),
            ('1month', 30)
        ]
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for period_name, days in periods:
            start_date = (datetime.date.today() - datetime.timedelta(days=days)).isoformat()
            end_date = datetime.date.today().isoformat()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            cursor.execute("""
                SELECT SUM(birds_entering), SUM(birds_exiting), SUM(net_change), 
                       AVG(birds_entering + birds_exiting), COUNT(*)
                FROM daily_stats 
                WHERE date >= ? AND date <= ?
            """, (start_date, end_date))
            
            result = cursor.fetchone()
            if result and result[0] is not None:
                birds_in, birds_out, net_change, avg_activity, record_count = result
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
                growth_rate = self._calculate_growth_rate(period_name, net_change, days)
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
                total_estimated = self._estimate_total_birds(birds_in, birds_out, days)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                cursor.execute("""
                    INSERT OR REPLACE INTO period_stats 
                    (period_type, start_date, end_date, total_birds_estimated, 
                     birds_in, birds_out, net_change, growth_rate, avg_daily_activity)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (period_name, start_date, end_date, total_estimated, 
                      int(birds_in), int(birds_out), int(net_change), 
                      growth_rate, avg_activity))
        
        conn.commit()
        conn.close()
        
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà 45 ‡∏ß‡∏±‡∏ô)
        self._cleanup_old_data()
    
    def _calculate_growth_rate(self, period_name: str, current_net: int, days: int) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # ‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        prev_start = (datetime.date.today() - datetime.timedelta(days=days*2)).isoformat()
        prev_end = (datetime.date.today() - datetime.timedelta(days=days)).isoformat()
        
        cursor.execute("""
            SELECT SUM(net_change) FROM daily_stats 
            WHERE date >= ? AND date < ?
        """, (prev_start, prev_end))
        
        prev_result = cursor.fetchone()
        prev_net = prev_result[0] if prev_result and prev_result[0] else 0
        
        conn.close()
        
        if prev_net == 0:
            return 100.0 if current_net > 0 else 0.0
        
        return ((current_net - prev_net) / abs(prev_net)) * 100
    
    def _estimate_total_birds(self, birds_in: int, birds_out: int, days: int) -> int:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô"""
        # ‡∏™‡∏π‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
        # ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å = ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 20-30% ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏£‡∏ß‡∏°
        activity_ratio = 0.25  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 25% ‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        
        daily_activity = (birds_in + birds_out) / days
        estimated_total = int(daily_activity / activity_ratio)
        
        # ‡πÉ‡∏™‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÅ‡∏•‡∏∞‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
        return max(min(estimated_total, 1000), birds_in)  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    
    def _cleanup_old_data(self):
        """‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏Ñ‡πà 45 ‡∏ß‡∏±‡∏ô"""
        cutoff_date = (datetime.date.today() - datetime.timedelta(days=45)).isoformat()
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("DELETE FROM daily_stats WHERE date < ?", (cutoff_date,))
        cursor.execute("DELETE FROM ai_insights WHERE created_at < datetime('now', '-45 days')")
        
        conn.commit()
        conn.close()
    
    def get_period_statistics(self) -> Dict[str, Dict]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT period_type, total_birds_estimated, birds_in, birds_out, 
                   net_change, growth_rate, avg_daily_activity
            FROM period_stats 
            ORDER BY created_at DESC
        """)
        
        results = {}
        for row in cursor.fetchall():
            period_type, total_est, birds_in, birds_out, net_change, growth_rate, avg_activity = row
            results[period_type] = {
                'total_birds_estimated': total_est,
                'birds_in': birds_in,
                'birds_out': birds_out,
                'net_change': net_change,
                'growth_rate': round(growth_rate, 1),
                'avg_daily_activity': round(avg_activity, 1)
            }
        
        conn.close()
        return results
    
    def generate_ai_insights(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° AI insights"""
        stats = self.get_period_statistics()
        insights = []
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
        if '3days' in stats:
            growth_3d = stats['3days']['growth_rate']
            total_birds = stats['3days']['total_birds_estimated']
            net_change = stats['3days']['net_change']
            
            if growth_3d > 20:
                insights.append({
                    'message': f'üéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏ô‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô {growth_3d:.1f}% ‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ô‡∏Å‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {total_birds} ‡∏ï‡∏±‡∏ß ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏î‡∏µ‡∏°‡∏≤‡∏Å üåü',
                    'type': 'celebration',
                    'confidence': 0.9
                })
            elif growth_3d > 0:
                insights.append({
                    'message': f'üìà ‡∏ô‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ {growth_3d:.1f}% ‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_birds} ‡∏ï‡∏±‡∏ß ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ üè†',
                    'type': 'growth',
                    'confidence': 0.8
                })
            elif growth_3d < -10:
                insights.append({
                    'message': f'‚ö†Ô∏è ‡∏ô‡∏Å‡∏•‡∏î‡∏•‡∏á {abs(growth_3d):.1f}% ‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏û‡∏¢‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏£‡∏ö‡∏Å‡∏ß‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏£‡∏≠‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏Å üîç',
                    'type': 'warning',
                    'confidence': 0.7
                })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        if '7days' in stats and '3days' in stats:
            weekly_growth = stats['7days']['growth_rate']
            three_day_growth = stats['3days']['growth_rate']
            
            if weekly_growth > three_day_growth:
                insights.append({
                    'message': f'üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô! ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï 7 ‡∏ß‡∏±‡∏ô ({weekly_growth:.1f}%) ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ß‡∏±‡∏ô ({three_day_growth:.1f}%) ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á üí™',
                    'type': 'analysis',
                    'confidence': 0.8
                })
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        if '1month' in stats:
            monthly_data = stats['1month']
            if monthly_data['avg_daily_activity'] > 10:
                insights.append({
                    'message': f'üåü ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ä‡∏µ‡∏ß‡∏≤! ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {monthly_data["avg_daily_activity"]:.1f} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏ô‡∏Å‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏°‡∏≤‡∏Å! üê¶',
                    'type': 'celebration',
                    'confidence': 0.9
                })
        
        # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å insight ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if insights:
            best_insight = max(insights, key=lambda x: x['confidence'])
            self._save_ai_insight(best_insight)
    
    def _save_ai_insight(self, insight: Dict):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AI insight ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO ai_insights (message, insight_type, confidence, data_source)
            VALUES (?, ?, ?, ?)
        """, (insight['message'], insight['type'], insight['confidence'], 
              json.dumps(self.get_period_statistics())))
        
        conn.commit()
        conn.close()
    
    def get_latest_ai_insights(self, limit: int = 3) -> List[Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° AI ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT message, insight_type, confidence, created_at
            FROM ai_insights 
            ORDER BY created_at DESC 
            LIMIT ?
        """, (limit,))
        
        insights = []
        for row in cursor.fetchall():
            message, insight_type, confidence, created_at = row
            insights.append({
                'message': message,
                'type': insight_type,
                'confidence': confidence,
                'timestamp': created_at
            })
        
        conn.close()
        return insights
    
    def get_dashboard_data(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dashboard"""
        return {
            'statistics': self.get_period_statistics(),
            'ai_insights': self.get_latest_ai_insights(5),
            'last_updated': datetime.datetime.now().isoformat()
        }

class SmartAIAssistant:
    """AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)"""
    
    def __init__(self):
        self.responses = {
            'morning': [
                'üåÖ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤! ‡∏ô‡∏Å‡πÜ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏´‡∏°?',
                '‚òÄÔ∏è ‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡∏ô‡∏Å‡∏Ñ‡∏á‡∏ä‡∏≠‡∏ö‡∏ö‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô',
                'üê¶ ‡πÄ‡∏ä‡πâ‡∏≤‡∏î‡∏µ! ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å‡πÅ‡∏•‡πâ‡∏ß'
            ],
            'growth_good': [
                'üéâ ‡∏ß‡πâ‡∏≤‡∏ß! ‡∏ô‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°!',
                'üìà ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°',
                'üåü ‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏ô‡∏Å‡πÜ ‡∏ä‡∏≠‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÜ'
            ],
            'growth_concern': [
                'ü§î ‡∏≠‡∏∑‡∏°‡∏°... ‡∏ô‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏£‡∏ö‡∏Å‡∏ß‡∏ô',
                'üëÄ ‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡πÄ‡∏´‡πá‡∏ô‡∏ô‡∏Å‡∏•‡∏î‡∏•‡∏á ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏´‡∏°',
                'üîç ‡∏ô‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏Å‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô'
            ],
            'anomaly_detected': [
                'üö® ‡πÄ‡∏≠‡πä‡∏∞! ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏õ‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞',
                '‚ö†Ô∏è ‡∏£‡∏∞‡∏ß‡∏±‡∏á! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ô‡∏Å‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà',
                'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥'
            ],
            'celebration': [
                'üéä ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ! ‡∏ô‡∏Å‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡πâ‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏°‡∏ä‡∏ô‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!',
                'üèÜ ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏ô‡∏Å‡πÜ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏°‡∏≤‡∏Å',
                'üíù ‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡πÅ‡∏•‡∏ô‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å ‡∏ô‡∏Å‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà'
            ]
        }
    
    def get_smart_message(self, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå"""
        current_hour = datetime.datetime.now().hour
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤
        if 5 <= current_hour <= 9:
            return np.random.choice(self.responses['morning'])
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        if 'statistics' in context:
            stats = context['statistics']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
            if '3days' in stats:
                growth = stats['3days'].get('growth_rate', 0)
                total_birds = stats['3days'].get('total_birds_estimated', 0)
                
                if growth > 15 or total_birds > 50:
                    return np.random.choice(self.responses['celebration'])
                elif growth > 5:
                    return np.random.choice(self.responses['growth_good'])
                elif growth < -5:
                    return np.random.choice(self.responses['growth_concern'])
        
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        general_messages = [
            'üí≠ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡∏ô‡∏Å‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î',
            'üß† AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì',
            'üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥',
            'üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á',
            'üëÅÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á'
        ]
        
        return np.random.choice(general_messages)

if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    stats = SmartStatistics()
    ai = SmartAIAssistant()
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    stats.add_daily_record(birds_in=5, birds_out=2, anomalies=1)
    
    # ‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    dashboard_data = stats.get_dashboard_data()
    
    print("üìä Smart Statistics Dashboard")
    print("=" * 50)
    print(json.dumps(dashboard_data, indent=2, ensure_ascii=False))
    
    print("\nüß† AI Assistant Message:")
    print(ai.get_smart_message(dashboard_data))
