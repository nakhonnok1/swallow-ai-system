#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Ultimate Integrated Swallow AI V5
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
"""

import sys
import time
import cv2
from ultimate_integrated_system import UltimateIntegratedSystem

def test_system():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Ultimate Integrated V5")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    system = UltimateIntegratedSystem()
    
    print("\nüìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("=" * 50)
    
    # 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î AI
    print(f"ü§ñ AI System: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°' if system.ai_system else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
    print(f"üîç Detector: {'‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°' if system.detector else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
    
    # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
    camera_test = system.connect_camera(0)  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö webcam
    print(f"üé• Camera (Webcam): {'‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ' if camera_test else '‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ'}")
    
    if camera_test:
        system.camera.release()
    
    # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        system.db_manager.init_database()
        print("üíæ Database: ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°")
    except Exception as e:
        print(f"üíæ Database: ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - {e}")
    
    # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Web Server (‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô ‡πÅ‡∏Ñ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
    print(f"üåê Web Server: ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ô (Port {system.config['web']['port']})")
    
    # 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå)
    import os
    test_video = "../test_video.mp4"
    if os.path.exists(test_video) and system.ai_system:
        print(f"üé¨ Video Processing: ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏° (‡πÑ‡∏ü‡∏•‡πå: {test_video})")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÅ‡∏Ñ‡πà 10 ‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å)
        try:
            cap = cv2.VideoCapture(test_video)
            if cap.isOpened():
                ret, frame = cap.read()
                if ret and system.detector:
                    detections = system.detector.detect_smart(frame, 'enter')
                    print(f"   üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: ‡∏û‡∏ö {len(detections)} ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
                cap.release()
        except Exception as e:
            print(f"   ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
    else:
        print(f"üé¨ Video Processing: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°")
    
    print("=" * 50)
    print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    
    return system

def demo_live_detection():
    """‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö Live"""
    print("üé• ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö Live (‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)")
    
    system = UltimateIntegratedSystem()
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if not system.connect_camera(0):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        return
    
    print("üìπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö...")
    frame_count = 0
    
    try:
        while True:
            ret, frame = system.camera.read()
            if not ret:
                break
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡πÄ‡∏ü‡∏£‡∏°
            if frame_count % 5 == 0 and system.detector:
                detections = system.detector.detect_smart(frame, 'mixed')
                
                # ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                for detection in detections:
                    center = detection.get('center', (0, 0))
                    bbox = detection.get('bbox', (0, 0, 0, 0))
                    confidence = detection.get('confidence', 0)
                    
                    x, y, w, h = bbox
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                    cv2.circle(frame, center, 3, (0, 255, 0), -1)
                    cv2.putText(frame, f"{confidence:.2f}", 
                               (center[0] - 20, center[1] - 10), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                cv2.putText(frame, f"Detections: {len(detections)}", 
                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏£‡∏°
            cv2.imshow('Ultimate AI Live Detection', frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            
            frame_count += 1
    
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï")
    
    finally:
        system.camera.release()
        cv2.destroyAllWindows()

def demo_web_interface():
    """‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Web Interface"""
    print("üåê ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Interface Demo")
    print("üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:5000")
    print("üõë ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
    
    system = UltimateIntegratedSystem()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
    system.start_camera_stream()
    
    try:
        # ‡∏£‡∏±‡∏ô Web Server
        system.run_web_server()
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î Web Interface")
    finally:
        system.stop_camera_stream()

if __name__ == "__main__":
    print("üöÄ Ultimate Integrated Swallow AI V5 - Test Suite")
    print("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("2. ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö Live")
    print("3. ‡∏™‡∏≤‡∏ò‡∏¥‡∏ï Web Interface")
    print("4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    
    while True:
        try:
            choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): ").strip()
            
            if choice == '1':
                test_system()
                break
            elif choice == '2':
                demo_live_detection()
                break
            elif choice == '3':
                demo_web_interface()
                break
            elif choice == '4':
                print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break
            else:
                print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-4")
        
        except KeyboardInterrupt:
            print("\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            break
