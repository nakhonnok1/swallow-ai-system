#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ULTIMATE LIVE STREAM AI SYSTEM V5 - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á + AI + Web App ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
‡∏£‡∏ß‡∏° IP Camera + AI Detection + Live Stream + Web Dashboard

‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞:
   üé• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á ainok IP Camera (192.168.1.100)
   ü§ñ ‡πÉ‡∏ä‡πâ AI ‡∏´‡∏•‡∏±‡∏Å V5 Ultra Precision ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å
   üåê Web Dashboard ‡πÅ‡∏ö‡∏ö Real-time 
   üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏î
   üîÑ Auto-reconnect ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠

üéâ Ready for Production!
"""

import cv2
import os
import time
import json
import threading
import numpy as np
from flask import Flask, Response, render_template_string, jsonify
from collections import deque
import logging

# Import ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å
try:
    from ultimate_perfect_ai_MASTER import V5_UltimatePrecisionSwallowAI, EnhancedMasterBirdDetector
    AI_AVAILABLE = True
    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î AI ‡∏´‡∏•‡∏±‡∏Å V5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    AI_AVAILABLE = False
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î AI ‡∏´‡∏•‡∏±‡∏Å: {e}")

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UltimateLiveStreamAI:
    """üöÄ ‡∏£‡∏∞‡∏ö‡∏ö Live Stream AI ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
    
    def __init__(self):
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Ultimate Live Stream AI V5")
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á ainok
        self.camera_config = {
            'username': 'ainok1',
            'password': 'ainok123', 
            'ip': '192.168.1.100',
            'port': 554,
            'stream_path': '/stream1'
        }
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.cap = None
        self.is_connected = False
        self.current_frame = None
        self.frame_lock = threading.Lock()
        self.capture_thread = None
        self.running = False
        
        # ‡∏£‡∏∞‡∏ö‡∏ö AI
        self.ai_system = None
        self.detector = None
        self._initialize_ai()
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        self.detection_stats = {
            'total_detections': 0,
            'entering_birds': 0,
            'exiting_birds': 0,
            'session_start': time.time(),
            'last_detection': None,
            'fps': 0,
            'frame_count': 0
        }
        
        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        self.recent_results = deque(maxlen=100)
        
        print("‚úÖ Ultimate Live Stream AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    
    def _initialize_ai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI"""
        try:
            if AI_AVAILABLE:
                self.ai_system = V5_UltimatePrecisionSwallowAI('mixed')
                self.detector = EnhancedMasterBirdDetector('mixed')
                print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å V5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                print("‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
                self.detector = None
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI: {e}")
            self.detector = None
    
    def build_rtsp_url(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á RTSP URL"""
        config = self.camera_config
        return f"rtsp://{config['username']}:{config['password']}@{config['ip']}:{config['port']}{config['stream_path']}"
    
    def setup_opencv_rtsp(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenCV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTSP"""
        os.environ['OPENCV_FFMPEG_CAPTURE_OPTIONS'] = (
            'rtsp_transport;tcp;'
            'timeout;10000000;'
            'reconnect;1;'
            'reconnect_at_eof;1;'
            'reconnect_streamed;1;'
            'reconnect_delay_max;2;'
            'fflags;nobuffer;'
            'flags;low_delay;'
            'strict;experimental'
        )
    
    def connect_camera(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        try:
            print("üé• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á ainok...")
            
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
            if self.cap:
                self.cap.release()
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenCV
            self.setup_opencv_rtsp()
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            rtsp_url = self.build_rtsp_url()
            logger.info(f"üîó RTSP URL: {rtsp_url.replace(self.camera_config['password'], '***')}")
            
            self.cap = cv2.VideoCapture(rtsp_url, cv2.CAP_FFMPEG)
            self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            
            if self.cap.isOpened():
                ret, frame = self.cap.read()
                if ret and frame is not None:
                    print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°: {frame.shape}")
                    
                    with self.frame_lock:
                        self.current_frame = frame
                    
                    self.is_connected = True
                    return True
            
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
            return False
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
            return False
    
    def start_live_stream(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream"""
        if not self.connect_camera():
            return False
        
        self.running = True
        self.capture_thread = threading.Thread(target=self._stream_loop, daemon=True)
        self.capture_thread.start()
        print("üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    def _stream_loop(self):
        """‡∏ß‡∏ô‡∏£‡∏≠‡∏ö Live Stream"""
        consecutive_failures = 0
        max_failures = 30
        frame_start_time = time.time()
        
        while self.running:
            try:
                if self.cap and self.cap.isOpened():
                    ret, frame = self.cap.read()
                    
                    if ret and frame is not None:
                        # ‡∏ô‡∏±‡∏ö FPS
                        self.detection_stats['frame_count'] += 1
                        current_time = time.time()
                        elapsed = current_time - frame_start_time
                        if elapsed >= 1.0:
                            self.detection_stats['fps'] = self.detection_stats['frame_count'] / elapsed
                            self.detection_stats['frame_count'] = 0
                            frame_start_time = current_time
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI
                        processed_frame = self._process_frame_with_ai(frame)
                        
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        with self.frame_lock:
                            self.current_frame = processed_frame
                        
                        consecutive_failures = 0
                        time.sleep(0.033)  # ~30 FPS
                        
                    else:
                        consecutive_failures += 1
                        logger.warning(f"‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ({consecutive_failures}/{max_failures})")
                        
                        if consecutive_failures >= max_failures:
                            logger.error("‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
                            self._reconnect()
                            consecutive_failures = 0
                        
                        time.sleep(0.1)
                else:
                    logger.error("‚ùå ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
                    self._reconnect()
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {e}")
                time.sleep(1)
    
    def _process_frame_with_ai(self, frame):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI"""
        try:
            if self.detector:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏´‡∏•‡∏±‡∏Å V5
                detections = self.detector.detect_smart(frame)
                
                # ‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                for detection in detections:
                    bbox = detection.get('bbox', (0, 0, 0, 0))
                    confidence = detection.get('confidence', 0)
                    center = detection.get('center', (0, 0))
                    
                    # ‡∏ß‡∏≤‡∏î bounding box
                    x, y, w, h = bbox
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                    
                    # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
                    cv2.circle(frame, center, 5, (0, 255, 0), -1)
                    
                    # ‡πÅ‡∏™‡∏î‡∏á confidence
                    cv2.putText(frame, f"{confidence:.2f}", 
                               (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                self.detection_stats['total_detections'] += len(detections)
                if len(detections) > 0:
                    self.detection_stats['last_detection'] = time.time()
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                result = {
                    'timestamp': time.time(),
                    'detections': len(detections),
                    'frame_shape': frame.shape
                }
                self.recent_results.append(result)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            self._add_status_overlay(frame)
            
            return frame
            
        except Exception as e:
            logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• AI: {e}")
            return frame
    
    def _add_status_overlay(self, frame):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status_lines = [
            f"üé• ainok Camera: {'Connected' if self.is_connected else 'Disconnected'}",
            f"ü§ñ AI: {'V5 Ultra' if self.detector else 'Basic'}",
            f"üìä Detections: {self.detection_stats['total_detections']}",
            f"‚ö° FPS: {self.detection_stats['fps']:.1f}",
            f"‚è∞ {time.strftime('%H:%M:%S')}"
        ]
        
        # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        overlay = frame.copy()
        cv2.rectangle(overlay, (10, 10), (400, 150), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        for i, line in enumerate(status_lines):
            cv2.putText(frame, line, (20, 35 + i * 25), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
    
    def _reconnect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà"""
        logger.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...")
        self.is_connected = False
        
        if self.cap:
            self.cap.release()
            self.cap = None
        
        time.sleep(2)
        
        if self.connect_camera():
            logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            logger.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    def get_current_frame(self):
        """‡∏£‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        with self.frame_lock:
            if self.current_frame is not None:
                return self.current_frame.copy()
        return None
    
    def get_stats(self):
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        return self.detection_stats.copy()
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        self.running = False
        
        if self.capture_thread and self.capture_thread.is_alive():
            self.capture_thread.join(timeout=5)
        
        if self.cap:
            self.cap.release()
            self.cap = None
        
        self.is_connected = False

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
live_ai = UltimateLiveStreamAI()

# Flask App
app = Flask(__name__)

def generate_frames():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö streaming"""
    while True:
        frame = live_ai.get_current_frame()
        
        if frame is not None:
            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô JPEG
            ret, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
            if ret:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            error_frame = np.zeros((480, 640, 3), dtype=np.uint8)
            status = "Connecting to ainok camera..." if not live_ai.is_connected else "No Frame"
            cv2.putText(error_frame, status, (120, 240), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 255), 2)
            
            ret, buffer = cv2.imencode('.jpg', error_frame)
            if ret:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
        
        time.sleep(0.033)  # ~30 FPS

@app.route('/')
def dashboard():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î"""
    return render_template_string('''
    <!DOCTYPE html>
    <html>
    <head>
        <title>üöÄ Ultimate Live Stream AI - ainok Camera</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white; 
                min-height: 100vh;
            }
            .container { 
                max-width: 1400px; 
                margin: 0 auto; 
                padding: 20px; 
            }
            .header {
                text-align: center;
                margin-bottom: 30px;
                background: rgba(255,255,255,0.1);
                padding: 20px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
            }
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }
            .stat-card {
                background: rgba(255,255,255,0.15);
                padding: 20px;
                border-radius: 15px;
                text-align: center;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255,255,255,0.2);
            }
            .stat-number {
                font-size: 2em;
                font-weight: bold;
                color: #00ff88;
                display: block;
            }
            .video-section {
                display: grid;
                grid-template-columns: 1fr auto;
                gap: 30px;
                align-items: start;
            }
            .video-container {
                background: rgba(0,0,0,0.3);
                padding: 20px;
                border-radius: 15px;
                text-align: center;
            }
            .video-stream {
                max-width: 100%;
                height: auto;
                border-radius: 10px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            }
            .controls {
                min-width: 250px;
                background: rgba(255,255,255,0.1);
                padding: 20px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
            }
            .btn {
                width: 100%;
                padding: 12px;
                margin: 8px 0;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 14px;
                font-weight: bold;
                transition: all 0.3s ease;
            }
            .btn-primary { 
                background: linear-gradient(45deg, #00b4db, #0083b0);
                color: white;
            }
            .btn-success { 
                background: linear-gradient(45deg, #56ab2f, #a8e6cf);
                color: white;
            }
            .btn-danger { 
                background: linear-gradient(45deg, #ff416c, #ff4b2b);
                color: white;
            }
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            }
            .status-indicator {
                display: inline-block;
                width: 12px;
                height: 12px;
                border-radius: 50%;
                margin-right: 8px;
            }
            .connected { background: #00ff88; }
            .disconnected { background: #ff4444; }
            
            @media (max-width: 768px) {
                .video-section {
                    grid-template-columns: 1fr;
                }
                .controls {
                    min-width: auto;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üöÄ Ultimate Live Stream AI V5</h1>
                <h3>üé• ainok IP Camera + AI Detection System</h3>
                <p>Real-time Bird Detection with V5 Ultra Precision AI</p>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <span class="stat-number" id="totalDetections">{{ stats.total_detections }}</span>
                    <div>Total Detections</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number" id="enteringBirds">{{ stats.entering_birds }}</span>
                    <div>Entering Birds</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number" id="exitingBirds">{{ stats.exiting_birds }}</span>
                    <div>Exiting Birds</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number" id="currentFps">{{ "%.1f"|format(stats.fps) }}</span>
                    <div>FPS</div>
                </div>
            </div>
            
            <div class="video-section">
                <div class="video-container">
                    <h3>üìπ Live Stream</h3>
                    <img src="{{ url_for('video_feed') }}" class="video-stream" alt="Live Stream">
                </div>
                
                <div class="controls">
                    <h3>üéõÔ∏è System Control</h3>
                    
                    <div style="margin: 15px 0;">
                        <div id="cameraStatus">
                            <span class="status-indicator {{ 'connected' if connected else 'disconnected' }}"></span>
                            Camera: {{ 'Connected' if connected else 'Disconnected' }}
                        </div>
                        <div style="margin-top: 8px;">
                            <span class="status-indicator connected"></span>
                            AI: V5 Ultra Ready
                        </div>
                    </div>
                    
                    <button class="btn btn-success" onclick="refreshPage()">üîÑ Refresh</button>
                    <button class="btn btn-primary" onclick="testConnection()">üîó Test Camera</button>
                    <button class="btn btn-primary" onclick="viewStats()">üìä View Stats</button>
                    <button class="btn btn-danger" onclick="stopSystem()">‚èπÔ∏è Stop System</button>
                    
                    <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid rgba(255,255,255,0.3);">
                        <h4>üìã Camera Info</h4>
                        <small>
                            IP: 192.168.1.100<br>
                            Stream: /stream1<br>
                            Resolution: Full HD<br>
                            Protocol: RTSP
                        </small>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
            function refreshPage() {
                location.reload();
            }
            
            function testConnection() {
                fetch('/api/test_connection')
                    .then(r => r.json())
                    .then(data => {
                        alert('Connection Test: ' + (data.success ? '‚úÖ Success' : '‚ùå Failed'));
                        if (data.success) location.reload();
                    })
                    .catch(e => alert('Error: ' + e));
            }
            
            function viewStats() {
                fetch('/api/stats')
                    .then(r => r.json())
                    .then(data => {
                        const statsText = Object.entries(data)
                            .map(([key, value]) => `${key}: ${value}`)
                            .join('\\n');
                        alert('üìä System Stats:\\n\\n' + statsText);
                    });
            }
            
            function stopSystem() {
                if(confirm('Stop the system?')) {
                    fetch('/api/stop').then(() => {
                        alert('üõë System stopped');
                        location.reload();
                    });
                }
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setInterval(() => {
                fetch('/api/stats')
                    .then(r => r.json())
                    .then(data => {
                        document.getElementById('totalDetections').textContent = data.total_detections;
                        document.getElementById('enteringBirds').textContent = data.entering_birds;
                        document.getElementById('exitingBirds').textContent = data.exiting_birds;
                        document.getElementById('currentFps').textContent = data.fps.toFixed(1);
                        
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á
                        const indicator = document.querySelector('#cameraStatus .status-indicator');
                        const text = document.querySelector('#cameraStatus');
                        if (data.connected) {
                            indicator.className = 'status-indicator connected';
                            text.innerHTML = '<span class="status-indicator connected"></span>Camera: Connected';
                        } else {
                            indicator.className = 'status-indicator disconnected';
                            text.innerHTML = '<span class="status-indicator disconnected"></span>Camera: Disconnected';
                        }
                    })
                    .catch(e => console.log('Stats update failed:', e));
            }, 3000);
        </script>
    </body>
    </html>
    ''', stats=live_ai.get_stats(), connected=live_ai.is_connected)

@app.route('/video_feed')
def video_feed():
    """‡∏™‡πà‡∏á‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏ï‡∏£‡∏µ‡∏°"""
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/api/stats')
def api_stats():
    """API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
    stats = live_ai.get_stats()
    stats['connected'] = live_ai.is_connected
    return jsonify(stats)

@app.route('/api/test_connection')
def api_test_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
    success = live_ai.connect_camera()
    if success and not live_ai.running:
        live_ai.start_live_stream()
    
    return jsonify({
        'success': success,
        'connected': live_ai.is_connected,
        'message': '‚úÖ Connected' if success else '‚ùå Failed'
    })

@app.route('/api/stop')
def api_stop():
    """‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö"""
    live_ai.stop()
    return jsonify({'message': 'üõë System stopped'})

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Ultimate Live Stream AI V5")
    print("üé• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á ainok...")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream
    if live_ai.start_live_stream():
        print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream (‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô web interface)")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° web server
    print("üåê ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Dashboard ‡∏ó‡∏µ‡πà http://localhost:5000")
    print("üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:5000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Live Stream + AI Detection")
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=False, threaded=True)
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        live_ai.stop()

if __name__ == '__main__':
    main()
