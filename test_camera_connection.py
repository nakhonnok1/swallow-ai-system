#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß IP Camera Connection Tester
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ainok
"""

import cv2
import time
import os

def test_ip_camera():
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á IP Camera...")
    
    # URL ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_urls = [
        "rtsp://ainok1:ainok123@192.168.1.100:554/stream1",
        "rtsp://ainok1:ainok123@192.168.1.100:554/stream",
        "rtsp://ainok1:ainok123@192.168.1.100:554/",
        "rtsp://192.168.1.100:554/stream1",
        "http://192.168.1.100:8080/video",
        0,  # USB Camera fallback
        1   # USB Camera fallback 2
    ]
    
    for i, url in enumerate(test_urls):
        print(f"\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö #{i+1}: {url}")
        
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RTSP options
            if isinstance(url, str) and url.startswith('rtsp://'):
                os.environ['OPENCV_FFMPEG_CAPTURE_OPTIONS'] = (
                    'rtsp_transport;tcp;timeout;5000000;reconnect;1;'
                    'reconnect_at_eof;1;reconnect_streamed;1;'
                    'fflags;nobuffer;flags;low_delay'
                )
            
            cap = cv2.VideoCapture(url)
            
            if cap is not None and cap.isOpened():
                print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°
                ret, frame = cap.read()
                if ret and frame is not None:
                    height, width = frame.shape[:2]
                    print(f"üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°: {width}x{height}")
                    print(f"üé® ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ: {frame.shape[2] if len(frame.shape) == 3 else 1}")
                    
                    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ü‡∏£‡∏°
                    success_count = 0
                    for test_frame in range(5):
                        ret, _ = cap.read()
                        if ret:
                            success_count += 1
                        time.sleep(0.1)
                    
                    print(f"üìä ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/5")
                    
                    if success_count >= 3:
                        print(f"üéâ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥! URL: {url}")
                        cap.release()
                        return url
                else:
                    print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
            else:
                print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        finally:
            try:
                if 'cap' in locals():
                    cap.release()
            except:
                pass
    
    print(f"\nüíî ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    return None

def test_network_connectivity():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"""
    import subprocess
    
    print("\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ping ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP
        result = subprocess.run(['ping', '-n', '3', '192.168.1.100'], 
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ Ping ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
        else:
            print("‚ùå Ping ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
            print(f"Output: {result.stdout}")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ping: {e}")

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
    test_network_connectivity()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
    working_url = test_ip_camera()
    
    if working_url:
        print(f"\nüéä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ {working_url}")
        print("‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ URL ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏û‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ")
    else:
        print(f"\nüò¢ ‡∏™‡∏£‡∏∏‡∏õ: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        print("   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IP Address ‡πÅ‡∏•‡∏∞ Port ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        print("   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Username/Password")
        print("   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î RTSP service ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        print("   4. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ USB Camera ‡πÅ‡∏ó‡∏ô (0 ‡∏´‡∏£‡∏∑‡∏≠ 1)")
