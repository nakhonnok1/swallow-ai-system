#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ†Ô∏è ULTRA SAFE AI DETECTOR - 100% ‡πÑ‡∏°‡πà‡∏°‡∏µ YOLO
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ YOLO array ambiguity error ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
"""

import cv2
import numpy as np
import time
import json
from pathlib import Path

class UltraSafeDetector:
    def connect_agents(self, bird_detector=None, motion_analyzer=None, ai_chatbot=None):
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ agent ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        Args:
            bird_detector: instance ‡∏Ç‡∏≠‡∏á BirdDetector
            motion_analyzer: instance ‡∏Ç‡∏≠‡∏á MotionAnalyzer
            ai_chatbot: instance ‡∏Ç‡∏≠‡∏á SmartAIChatbot ‡∏´‡∏£‡∏∑‡∏≠ UltraSmartAIChatbot
        """
        self.bird_detector = bird_detector
        self.motion_analyzer = motion_analyzer
        self.ai_chatbot = ai_chatbot
        import logging
        logging.info("UltraSafeDetector: Agents connected successfully.")

    def detect_all(self, frame: np.ndarray, camera_props: dict = None, frame_quality: dict = None) -> dict:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å agent ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        Returns:
            dict: ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å agent
        """
        results = {}
        # UltraSafeDetector motion detection
        processed_frame, detections, stats = self.detect_birds_realtime(frame, camera_props, frame_quality)
        results['ultra_safe'] = {
            'frame': processed_frame,
            'detections': detections,
            'stats': stats
        }
        # BirdDetector
        if hasattr(self, 'bird_detector') and self.bird_detector:
            try:
                bird_detections = self.bird_detector.detect(frame, camera_props, frame_quality)
                results['bird_detector'] = bird_detections
            except Exception as e:
                results['bird_detector'] = f"Error: {e}"
        # MotionAnalyzer
        if hasattr(self, 'motion_analyzer') and self.motion_analyzer:
            try:
                motion_result = self.motion_analyzer.analyze_motion(frame, camera_props, frame_quality)
                results['motion_analyzer'] = motion_result
            except Exception as e:
                results['motion_analyzer'] = f"Error: {e}"
        # AI Chatbot
        if hasattr(self, 'ai_chatbot') and self.ai_chatbot:
            try:
                chatbot_response = self.ai_chatbot.get_response(
                    f"‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö {len(detections)} ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°", camera_props, frame_quality)
                results['ai_chatbot'] = chatbot_response
            except Exception as e:
                results['ai_chatbot'] = f"Error: {e}"
        return results
    """Ultra Safe AI Detector - ‡πÑ‡∏°‡πà‡∏°‡∏µ YOLO ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ Computer Vision ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô"""
    
    def __init__(self):
        self.detection_enabled = True
        self.last_birds_in = 0
        self.last_birds_out = 0
        self.frame_count = 0
        self.motion_detector = None
        self.background_subtractor = cv2.createBackgroundSubtractorMOG2()
        print("üõ†Ô∏è Ultra Safe Detector initialized - 100% ‡πÑ‡∏°‡πà‡∏°‡∏µ YOLO")
        
    def detect_birds_realtime(self, frame: np.ndarray, camera_props: dict = None, frame_quality: dict = None) -> tuple:
        """
        ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å (BirdDetector) ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏ß‡πâ ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô fallback ‡πÄ‡∏õ‡πá‡∏ô motion detection
        Args:
            frame: ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
            camera_props: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏•‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô exposure, brightness
            frame_quality: ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û ‡πÄ‡∏ä‡πà‡∏ô blur, brightness
        Returns:
            processed_frame: ‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            detections: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            stats: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        """
        import logging
        try:
            self.frame_count += 1
            processed_frame = frame.copy()
            detections = []

            # ‡∏´‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ BirdDetector ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ AI ‡∏´‡∏•‡∏±‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å
            if hasattr(self, 'bird_detector') and self.bird_detector:
                try:
                    detections = self.bird_detector.detect(frame, camera_props, frame_quality)
                    for det in detections:
                        if 'bbox' in det:
                            x, y, w, h = det['bbox']
                            cv2.rectangle(processed_frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
                            cv2.putText(processed_frame, f"AI: {det.get('confidence', 0.0):.2f}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
                except Exception as e:
                    logging.error(f"BirdDetector error: {e}")
                    detections = []
            else:
                # Fallback: ‡πÉ‡∏ä‡πâ motion detection ‡πÄ‡∏î‡∏¥‡∏°
                brightness = frame_quality.get('brightness', 1) if frame_quality else 1
                min_area = 50 if brightness > 0.5 else 30
                max_area = 3000 if brightness > 0.5 else 2000
                height, width = frame.shape[:2]
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                fg_mask = self.background_subtractor.apply(frame)
                kernel = np.ones((5,5), np.uint8)
                fg_mask = cv2.morphologyEx(fg_mask, cv2.MORPH_OPEN, kernel)
                fg_mask = cv2.morphologyEx(fg_mask, cv2.MORPH_CLOSE, kernel)
                contours, _ = cv2.findContours(fg_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                bird_count = 0
                for contour in contours:
                    area = cv2.contourArea(contour)
                    if min_area < area < max_area:
                        x, y, w, h = cv2.boundingRect(contour)
                        aspect_ratio = w / h if h > 0 else 0
                        if 0.2 < aspect_ratio < 5.0:
                            bird_count += 1
                            center_x = x + w // 2
                            center_y = y + h // 2
                            detections.append({
                                'center': (center_x, center_y),
                                'bbox': (x, y, w, h),
                                'confidence': 0.8,
                                'area': area,
                                'source': 'motion_detection'
                            })
                            cv2.rectangle(processed_frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                            cv2.putText(processed_frame, f"Motion: 0.8", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)
                # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
                if bird_count > 0:
                    if self.frame_count % 20 == 0:
                        if bird_count >= 2:
                            self.last_birds_in += 1
                        elif bird_count >= 1:
                            self.last_birds_out += 1

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á stats
            stats = {
                'entering': self.last_birds_in,
                'exiting': self.last_birds_out,
                'current_detections': len(detections)
            }

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
            info_text = f"Ultra Safe AI: In={self.last_birds_in} Out={self.last_birds_out} Current={len(detections)}"
            cv2.putText(processed_frame, info_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
            status_text = "MOTION DETECTION MODE (100% YOLO FREE)"
            cv2.putText(processed_frame, status_text, (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 255), 2)
            frame_text = f"Frame: {self.frame_count}"
            cv2.putText(processed_frame, frame_text, (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

            logging.info(f"UltraSafeDetector: Detected {len(detections)} birds, stats={stats}")
            return processed_frame, detections, stats

        except Exception as e:
            logging.error(f"Ultra Safe AI Error: {e}")
            error_frame = frame.copy()
            cv2.putText(error_frame, f"Detection Error: {str(e)[:50]}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
            return error_frame, [], {'entering': self.last_birds_in, 'exiting': self.last_birds_out, 'current_detections': 0}
    
    def detect_suspicious_objects(self, frame):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏° (‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ - ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà motion detection)"""
        return [], frame
    
    def reset_counts(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö"""
        self.last_birds_in = 0
        self.last_birds_out = 0
        self.frame_count = 0
        print("üõ†Ô∏è Ultra Safe Detector: Counts reset")

def test_ultra_safe_ai():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ultra Safe AI System"""
    print("üõ†Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ultra Safe Detector...")
    
    import logging
    from types import SimpleNamespace
    logging.basicConfig(level=logging.INFO)
    detector = UltraSafeDetector()

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ BirdDetector ‡∏à‡∏£‡∏¥‡∏á (import ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å)
    try:
        from ultimate_perfect_ai_MASTER import BirdDetector
        bird_detector = BirdDetector()
        print("‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô BirdDetector ‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô BirdDetector ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}\n‡πÉ‡∏ä‡πâ mock ‡πÅ‡∏ó‡∏ô")
        class BirdDetector:
            def detect(self, frame, camera_props=None, frame_quality=None):
                return [{'center': (320, 240), 'confidence': 0.9, 'bbox': (300, 220, 40, 40), 'type': 'bird'}]
        bird_detector = BirdDetector()

    # Mock agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô
    class MockMotionAnalyzer:
        def analyze_motion(self, frame, camera_props=None, frame_quality=None):
            return {'motion_detected': True, 'motion_strength': 0.7}
    class MockAIChatbot:
        def get_response(self, message, camera_props=None, frame_quality=None):
            return f"AI ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {message}"

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ agent ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞ mock
    detector.connect_agents(
        bird_detector=bird_detector,
        motion_analyzer=MockMotionAnalyzer(),
        ai_chatbot=MockAIChatbot()
    )

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_frame = np.zeros((480, 640, 3), dtype=np.uint8)
    cv2.rectangle(test_frame, (100, 100), (150, 130), (255, 255, 255), -1)
    cv2.circle(test_frame, (200, 200), 20, (255, 255, 255), -1)

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏° agent
    camera_props = {'exposure': 0.7, 'brightness': 0.8}
    frame_quality = {'blur': 0.1, 'brightness': 0.8}
    results = detector.detect_all(test_frame, camera_props, frame_quality)

    print("\n=== UltraSafeDetector Integration Test ===")
    print(f"‚úÖ UltraSafe: ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö {len(results['ultra_safe']['detections'])} motion objects")
    print(f"üìä UltraSafe Stats: {results['ultra_safe']['stats']}")
    print(f"üê¶ BirdDetector: {results.get('bird_detector')}")
    print(f"üéØ MotionAnalyzer: {results.get('motion_analyzer')}")
    print(f"ü§ñ AIChatbot: {results.get('ai_chatbot')}")
    print("üõ†Ô∏è Ultra Safe AI System Integration ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ (100% YOLO FREE)!")
    print("========================================\n")
    return True

if __name__ == "__main__":
    test_ultra_safe_ai()
