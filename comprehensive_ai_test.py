#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ï‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
"""

import requests
import json
import time
import sys
import os
from urllib.parse import urljoin

class ComprehensiveAIChatbotTester:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ï‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
    
    def __init__(self, base_url="http://127.0.0.1:5000"):
        self.base_url = base_url
        self.test_results = {
            'direct_agent': False,
            'flask_server': False,
            'api_chat': False,
            'web_interface': False,
            'system_integration': False,
            'learning_system': False,
            'knowledge_base': False,
            'error_handling': False
        }
        
    def test_direct_agent(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Agent ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
        print("üîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Ultra Smart AI Agent ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...")
        try:
            sys.path.append('.')
            from ultra_smart_ai_agent import UltraSmartAIAgent
            
            agent = UltraSmartAIAgent()
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            test_messages = [
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
                "‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß",
                "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö",
                "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô",
                "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì"
            ]
            
            all_passed = True
            for msg in test_messages:
                response = agent.get_response(msg)
                if not response or len(response) < 10:
                    all_passed = False
                    print(f"   ‚ùå ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {msg}")
                else:
                    print(f"   ‚úÖ {msg}: {response[:50]}...")
                    
            self.test_results['direct_agent'] = all_passed
            print(f"   {'‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if all_passed else '‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
            return all_passed
            
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['direct_agent'] = False
            return False
    
    def test_flask_server(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Flask Server"""
        print("üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Flask Server...")
        try:
            response = requests.get(f"{self.base_url}/", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ Flask Server ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ")
                self.test_results['flask_server'] = True
                return True
            else:
                print(f"   ‚ùå HTTP {response.status_code}")
                self.test_results['flask_server'] = False
                return False
        except Exception as e:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}")
            self.test_results['flask_server'] = False
            return False
    
    def test_api_chat(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Chat"""
        print("üí¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Chat...")
        try:
            test_cases = [
                {"message": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "expected_keywords": ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "AI", "Agent"]},
                {"message": "‡∏ô‡∏Å‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß", "expected_keywords": ["‡∏ô‡∏Å", "‡∏ï‡∏±‡∏ß"]},
                {"message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á", "expected_keywords": ["‡∏£‡∏∞‡∏ö‡∏ö", "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"]},
            ]
            
            all_passed = True
            for case in test_cases:
                response = requests.post(
                    f"{self.base_url}/api/chat",
                    headers={"Content-Type": "application/json"},
                    json={"message": case["message"]},
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        ai_response = data.get('response', '')
                        print(f"   ‚úÖ {case['message']}: {ai_response[:50]}...")
                    else:
                        print(f"   ‚ö†Ô∏è API ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {case['message']}")
                        all_passed = False
                else:
                    print(f"   ‚ùå HTTP {response.status_code}: {case['message']}")
                    all_passed = False
                    
            self.test_results['api_chat'] = all_passed
            print(f"   {'‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if all_passed else '‚ùå ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
            return all_passed
            
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['api_chat'] = False
            return False
    
    def test_web_interface(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Web Interface"""
        print("üñ•Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Web Interface...")
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤ AI Chat
            response = requests.get(f"{self.base_url}/ai-chat", timeout=5)
            if response.status_code == 200 and 'html' in response.headers.get('content-type', ''):
                print("   ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ AI Chat ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö content
                html_content = response.text
                required_elements = ['Ultra Smart AI Agent', 'chat-container', 'chat-input']
                missing_elements = [elem for elem in required_elements if elem not in html_content]
                
                if not missing_elements:
                    print("   ‚úÖ HTML elements ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
                    self.test_results['web_interface'] = True
                    return True
                else:
                    print(f"   ‚ö†Ô∏è ‡∏Ç‡∏≤‡∏î elements: {missing_elements}")
                    self.test_results['web_interface'] = False
                    return False
            else:
                print(f"   ‚ùå HTTP {response.status_code} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà HTML")
                self.test_results['web_interface'] = False
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['web_interface'] = False
            return False
    
    def test_system_integration(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö...")
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö APIs ‡∏ï‡πà‡∏≤‡∏á‡πÜ
            endpoints = [
                '/api/statistics',
                '/api/system-health',
                '/api/object-detection/status'
            ]
            
            working_endpoints = 0
            for endpoint in endpoints:
                try:
                    response = requests.get(f"{self.base_url}{endpoint}", timeout=3)
                    if response.status_code == 200:
                        working_endpoints += 1
                        print(f"   ‚úÖ {endpoint}")
                    else:
                        print(f"   ‚ö†Ô∏è {endpoint}: HTTP {response.status_code}")
                except:
                    print(f"   ‚ùå {endpoint}: ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á")
                    
            success_rate = working_endpoints / len(endpoints)
            if success_rate >= 0.7:  # 70% success rate
                print(f"   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ {working_endpoints}/{len(endpoints)} endpoints")
                self.test_results['system_integration'] = True
                return True
            else:
                print(f"   ‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {working_endpoints}/{len(endpoints)} endpoints")
                self.test_results['system_integration'] = False
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['system_integration'] = False
            return False
    
    def test_learning_system(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        print("üß† ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ...")
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            db_files = ['ai_agent_memory.db', 'swallow_smart_stats.db']
            found_dbs = []
            
            for db_file in db_files:
                if os.path.exists(db_file):
                    found_dbs.append(db_file)
                    print(f"   ‚úÖ {db_file} ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    print(f"   ‚ö†Ô∏è {db_file} ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                    
            if found_dbs:
                print(f"   ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ({len(found_dbs)} databases)")
                self.test_results['learning_system'] = True
                return True
            else:
                print("   ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ")
                self.test_results['learning_system'] = False
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['learning_system'] = False
            return False
    
    def test_knowledge_base(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ"""
        print("üìö ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ...")
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            knowledge_tests = [
                {"message": "‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "keywords": ["‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå", "‡∏ô‡∏Å"]},
                {"message": "‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô", "keywords": ["‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°", "‡∏ô‡∏Å"]},
                {"message": "‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á", "keywords": ["‡∏£‡∏∞‡∏ö‡∏ö", "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"]}
            ]
            
            correct_answers = 0
            for test in knowledge_tests:
                response = requests.post(
                    f"{self.base_url}/api/chat",
                    headers={"Content-Type": "application/json"},
                    json={"message": test["message"]},
                    timeout=5
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        ai_response = data.get('response', '').lower()
                        if any(keyword.lower() in ai_response for keyword in test["keywords"]):
                            correct_answers += 1
                            print(f"   ‚úÖ {test['message']}")
                        else:
                            print(f"   ‚ö†Ô∏è {test['message']}: ‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô")
                    else:
                        print(f"   ‚ùå {test['message']}: API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                else:
                    print(f"   ‚ùå {test['message']}: HTTP Error")
                    
            success_rate = correct_answers / len(knowledge_tests)
            if success_rate >= 0.7:
                print(f"   ‚úÖ ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ ({correct_answers}/{len(knowledge_tests)})")
                self.test_results['knowledge_base'] = True
                return True
            else:
                print(f"   ‚ö†Ô∏è ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ({correct_answers}/{len(knowledge_tests)})")
                self.test_results['knowledge_base'] = False
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['knowledge_base'] = False
            return False
    
    def test_error_handling(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
        print("‚ö†Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î...")
        try:
            error_tests = [
                {"message": "", "description": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á"},
                {"message": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡πÜ " * 100, "description": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ"}
            ]
            
            handled_correctly = 0
            for test in error_tests:
                response = requests.post(
                    f"{self.base_url}/api/chat",
                    headers={"Content-Type": "application/json"},
                    json={"message": test["message"]},
                    timeout=5
                )
                
                if response.status_code in [200, 400]:  # ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠ error ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    data = response.json()
                    if 'error' in data or data.get('success') == False:
                        print(f"   ‚úÖ {test['description']}: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÑ‡∏î‡πâ")
                        handled_correctly += 1
                    elif data.get('success') and data.get('response'):
                        print(f"   ‚úÖ {test['description']}: ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                        handled_correctly += 1
                    else:
                        print(f"   ‚ö†Ô∏è {test['description']}: ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
                else:
                    print(f"   ‚ùå {test['description']}: HTTP {response.status_code}")
                    
            success_rate = handled_correctly / len(error_tests)
            if success_rate >= 0.8:
                print(f"   ‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏î‡∏µ ({handled_correctly}/{len(error_tests)})")
                self.test_results['error_handling'] = True
                return True
            else:
                print(f"   ‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ({handled_correctly}/{len(error_tests)})")
                self.test_results['error_handling'] = False
                return False
                
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
            self.test_results['error_handling'] = False
            return False
    
    def run_comprehensive_test(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"""
        print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ï‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        print("=" * 60)
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        tests = [
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Agent ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á", self.test_direct_agent),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö Flask Server", self.test_flask_server),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Chat", self.test_api_chat),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö Web Interface", self.test_web_interface),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö", self.test_system_integration),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ", self.test_learning_system),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ", self.test_knowledge_base),
            ("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", self.test_error_handling),
        ]
        
        passed_tests = 0
        for test_name, test_func in tests:
            print(f"\n{test_name}...")
            if test_func():
                passed_tests += 1
            time.sleep(1)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print("\n" + "=" * 60)
        print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        print("=" * 60)
        
        total_tests = len(tests)
        success_rate = (passed_tests / total_tests) * 100
        
        for key, status in self.test_results.items():
            icon = "‚úÖ" if status else "‚ùå"
            print(f"{icon} {key.replace('_', ' ').title()}")
            
        print(f"\nüéØ ‡∏ú‡∏•‡∏£‡∏ß‡∏°: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
        
        if success_rate >= 90:
            print("üèÜ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û!")
        elif success_rate >= 70:
            print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
        elif success_rate >= 50:
            print("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î")
        else:
            print("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô")
            
        return success_rate

if __name__ == "__main__":
    tester = ComprehensiveAIChatbotTester()
    tester.run_comprehensive_test()
