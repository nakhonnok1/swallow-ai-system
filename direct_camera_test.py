#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
üîß Direct Camera Connection Test
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
"""

import cv2
import numpy as np
import time
import os

def test_camera_sources():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    
    camera_sources = [
        # IP Camera - Primary RTSP
        "rtsp://ainok1:ainok123@192.168.1.100:554/stream1",
        "rtsp://ainok1:ainok123@192.168.1.100:554/cam/realmonitor?channel=1&subtype=0",
        "rtsp://ainok1:ainok123@192.168.1.100/cam/realmonitor?channel=1&subtype=0",
        "rtsp://ainok1:ainok123@192.168.1.100:554/live",
        "rtsp://ainok1:ainok123@192.168.1.100:554/",
        
        # Alternative ports
        "rtsp://ainok1:ainok123@192.168.1.100:80/stream1",
        "rtsp://ainok1:ainok123@192.168.1.100:8554/stream1",
        
        # Different protocols
        "http://ainok1:ainok123@192.168.1.100/video.cgi",
        "http://192.168.1.100/cgi-bin/mjpeg?resolution=640x480",
        
        # USB Cameras
        0, 1, 2,
        
        # Test video file
        "test_video.mp4",
        "../test_video.mp4"
    ]
    
    working_sources = []
    
    for i, source in enumerate(camera_sources):
        print(f"\nüì∑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö [{i+1}/{len(camera_sources)}]: {source}")
        
        try:
            cap = cv2.VideoCapture(source)
            
            # Set timeout for network cameras
            if isinstance(source, str) and source.startswith(('rtsp', 'http')):
                cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                cap.set(cv2.CAP_PROP_TIMEOUT, 5000)  # 5 seconds timeout
            
            # Check if camera opened successfully
            if cap.isOpened():
                print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                
                # Try to read frame
                ret, frame = cap.read()
                if ret and frame is not None:
                    height, width = frame.shape[:2]
                    print(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡∏ô‡∏≤‡∏î: {width}x{height}")
                    
                    # Test multiple frames
                    frame_count = 0
                    for _ in range(5):
                        ret, frame = cap.read()
                        if ret:
                            frame_count += 1
                        time.sleep(0.1)
                    
                    if frame_count >= 3:
                        print(f"üéâ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ({frame_count}/5 ‡πÄ‡∏ü‡∏£‡∏°)")
                        working_sources.append(source)
                        
                        # Save test frame
                        if ret and frame is not None:
                            test_filename = f"test_frame_{i}.jpg"
                            cv2.imwrite(test_filename, frame)
                            print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_filename}")
                    else:
                        print(f"‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ({frame_count}/5 ‡πÄ‡∏ü‡∏£‡∏°)")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏î‡πâ")
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        finally:
            try:
                cap.release()
            except:
                pass
    
    print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    if working_sources:
        print(f"‚úÖ ‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {len(working_sources)} ‡πÅ‡∏´‡∏•‡πà‡∏á")
        for source in working_sources:
            print(f"   - {source}")
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    
    return working_sources

def test_network_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"""
    print("\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
    
    import subprocess
    import socket
    
    # Test ping to camera IP
    try:
        result = subprocess.run(['ping', '192.168.1.100', '-n', '4'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ Ping ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 192.168.1.100 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print("‚ùå Ping ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 192.168.1.100 ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
            print(result.stdout)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ping ‡πÑ‡∏î‡πâ: {e}")
    
    # Test port connectivity
    ports_to_test = [554, 80, 8554, 8080]
    for port in ports_to_test:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex(('192.168.1.100', port))
            if result == 0:
                print(f"‚úÖ Port {port} ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
            else:
                print(f"‚ùå Port {port} ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà")
            sock.close()
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö port {port}: {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£")
    print("=" * 50)
    
    # Test network first
    test_network_connection()
    
    print("\n" + "=" * 50)
    
    # Test camera sources
    working_sources = test_camera_sources()
    
    print("\n" + "=" * 50)
    print("üèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    
    if working_sources:
        print(f"\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {working_sources[0]}")
        
        # Update config
        config_update = f'''
# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå config.json
VIDEO_SOURCE = "{working_sources[0]}"
'''
        print(config_update)
    else:
        print("\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("   1. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        print("   2. ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà IP ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á")
        print("   3. Username ‡πÅ‡∏•‡∏∞ Password")
        print("   4. Port ‡πÅ‡∏•‡∏∞ stream path")

if __name__ == "__main__":
    main()
