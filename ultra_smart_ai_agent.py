#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Ultra Smart AI Agent - Advanced Chatbot System
‡∏£‡∏∞‡∏ö‡∏ö AI Agent ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ
‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏à‡∏±‡∏ö‡∏ô‡∏Å ‡πÅ‡∏•‡∏∞ AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°
"""

import re
import json
import datetime as dt
import random
import sqlite3
import requests
import os
from typing import Dict, List, Any, Optional

class UltraSmartAIAgent:
    """üöÄ Ultra Smart AI Agent - AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ"""
    
    def __init__(self):
        # ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        self.knowledge_base = self._initialize_knowledge_base()
        self.learning_db = "ai_agent_memory.db"
        self.conversation_history = []
        self.user_patterns = {}
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö
        self.api_endpoints = {
            'bird_stats': 'http://127.0.0.1:5000/api/statistics',
            'intruder_stats': 'http://127.0.0.1:5000/api/object-detection/stats',
            'intruder_alerts': 'http://127.0.0.1:5000/api/object-detection/alerts',
            'system_status': 'http://127.0.0.1:5000/api/object-detection/status',
            'system_health': 'http://127.0.0.1:5000/api/system-health'
        }
        
        # Session tracking ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        self.session_start = dt.datetime.now()
        self.conversation_count = 0
        self.last_context = {}
        self.learned_patterns = []
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        self._initialize_learning_database()
        self._load_learned_patterns()
        
        print("Ultra Smart AI Agent initialized successfully!")
        print("Loading knowledge base and learned patterns...")
        print("Connecting to system APIs...")
        
    def _initialize_knowledge_base(self) -> Dict:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        return {
            'greetings': [
                '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ', '‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏î‡∏µ‡∏Ñ‡πà‡∏∞', '‡πÄ‡∏Æ‡∏•‡πÇ‡∏•', 'hi', 'hello', '‡πÑ‡∏Æ', 
                '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô'
            ],
            
            'bird_questions': [
                '‡∏ô‡∏Å', '‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏≠‡∏≠‡∏Å', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏ô‡∏±‡∏ö', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô', 'swallow', 
                '‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß', '‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß', '‡∏ï‡∏±‡∏ß', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å', '‡πÄ‡∏´‡∏¥‡∏ô‡∏ö‡∏¥‡∏ô', '‡∏ö‡∏¥‡∏ô', '‡πÑ‡∏Ç‡πà', '‡∏£‡∏±‡∏á', 
                '‡πÄ‡∏à‡∏≤‡∏∞‡∏£‡∏π', '‡πÇ‡∏ã‡∏ô', '‡∏õ‡∏•‡∏¥‡∏á‡πÄ‡∏´‡∏¥‡∏ô', '‡∏ß‡∏≤‡∏á‡πÑ‡∏Ç‡πà', '‡∏•‡∏π‡∏Å‡∏ô‡∏Å', '‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡∏ô'
            ],
            
            'intruder_questions': [
                '‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°', '‡∏Ñ‡∏ô', '‡∏™‡∏±‡∏ï‡∏ß‡πå', '‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°', '‡∏á‡∏π', '‡∏´‡∏ô‡∏π', '‡πÅ‡∏°‡∏ß', '‡∏™‡∏∏‡∏ô‡∏±‡∏Ç', 
                '‡∏ï‡∏∏‡∏Å‡πÅ‡∏Å', '‡πÄ‡∏´‡∏¢‡∏µ‡πà‡∏¢‡∏ß', '‡∏û‡∏¥‡∏£‡∏≤‡∏ö', '‡∏°‡∏µ‡∏Ñ‡∏ô', '‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô', '‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å', '‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å', 
                'intruder', 'person', 'animal', 'security', '‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°'
            ],
            
            'alert_questions': [
                '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÅ‡∏≠‡∏•‡πÄ‡∏•‡∏¥‡∏£‡πå‡∏ï', 'alert', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÅ‡∏à‡πâ‡∏á', 
                '‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', '‡πÄ‡∏Ñ‡∏™', 'case', 'notification'
            ],
            
            'system_questions': [
                '‡∏£‡∏∞‡∏ö‡∏ö', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'status', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera', 'AI', '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', 
                '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'server', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'connect', '‡∏û‡∏£‡πâ‡∏≠‡∏°', 'ready'
            ],
            
            'time_questions': [
                '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á', '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '‡∏ß‡∏±‡∏ô', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏õ‡∏µ', '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', 
                '‡∏ô‡∏≤‡∏ó‡∏µ', '‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ', 'time', 'now', 'today', 'hour', 'minute'
            ],
            
            'help_questions': [
                '‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏™‡∏≠‡∏ô', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', 'command', '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 
                '‡∏ß‡∏¥‡∏ò‡∏µ', 'tutorial', 'manual', 'guide'
            ],
            
            'swallow_knowledge': {
                'basic_info': [
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏Å‡∏≠‡∏û‡∏¢‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡∏ô',
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏±‡∏Å‡πÄ‡∏à‡∏≤‡∏∞‡∏£‡∏π‡πÉ‡∏ô‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏£‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÑ‡∏Ç‡πà',
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏à‡∏±‡∏ö‡πÅ‡∏°‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£',
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß'
                ],
                'behavior': [
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏±‡∏Å‡∏ö‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ù‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô',
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏µ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢'
                ],
                'benefits': [
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏°‡∏•‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä',
                    '‡∏£‡∏±‡∏á‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à',
                    '‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç'
                ]
            }
        }
        
    def _initialize_learning_database(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    user_message TEXT NOT NULL,
                    ai_response TEXT NOT NULL,
                    context TEXT,
                    satisfaction_score INTEGER DEFAULT 0
                )
            ''')
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS learned_patterns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    pattern TEXT NOT NULL,
                    category TEXT NOT NULL,
                    confidence REAL DEFAULT 0.5,
                    usage_count INTEGER DEFAULT 1,
                    last_used TEXT NOT NULL
                )
            ''')
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_preferences (
                    user_id TEXT PRIMARY KEY,
                    preferred_response_style TEXT DEFAULT 'friendly',
                    common_questions TEXT,
                    interaction_count INTEGER DEFAULT 0,
                    last_interaction TEXT
                )
            ''')
            
            conn.commit()
            conn.close()
            print("Learning database initialized successfully!")
            
        except Exception as e:
            print("Learning database initialization failed:", str(e))
    
    def _load_learned_patterns(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT pattern, category, confidence 
                FROM learned_patterns 
                WHERE confidence > 0.7
                ORDER BY usage_count DESC
            ''')
            
            for pattern, category, confidence in cursor.fetchall():
                self.learned_patterns.append({
                    'pattern': pattern,
                    'category': category,
                    'confidence': confidence
                })
            
            conn.close()
            print(f"Loaded {len(self.learned_patterns)} learned patterns")
            
        except Exception as e:
            print(f"Error loading learned patterns: {e}")
    
    def _get_real_data(self, endpoint: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API"""
        try:
            if endpoint not in self.api_endpoints:
                return {}
                
            response = requests.get(self.api_endpoints[endpoint], timeout=10)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ö†Ô∏è API {endpoint} returned status {response.status_code}")
                return {}
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ Timeout connecting to {endpoint}")
            return {}
        except requests.exceptions.ConnectionError:
            print(f"üîå Connection error to {endpoint}")
            return {}
        except Exception as e:
            print(f"‚ö†Ô∏è Error fetching data from {endpoint}: {e}")
            return {}
    
    def get_response(self, message: str, context: Dict[str, Any] = None) -> str:
        """
        ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
        Args:
            message: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            context: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó
        Returns:
            ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI Agent
        """
        if not message or not isinstance(message, str):
            return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üìù"
            
        self.conversation_count += 1
        message = message.lower().strip()
        context = context or {}
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        self._record_conversation(message, context)
        
        # Preprocess message
        message = self._preprocess_message(message)
        print(f"DEBUG: Preprocessed message: '{message}'")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        question_type = self._classify_question_advanced(message)
        print(f"DEBUG: Question type: {question_type}")
        
        try:
            if question_type == 'greeting':
                return self._get_greeting_response()
            elif question_type == 'bird':
                return self._generate_bird_response(message, context)
            elif question_type == 'intruder':
                return self._generate_intruder_response(message, context)
            elif question_type == 'alert':
                return self._generate_alert_response(message, context)
            elif question_type == 'system':
                return self._generate_system_response(message, context)
            elif question_type == 'time':
                return self._generate_time_response(message, context)
            elif question_type == 'help':
                return self._generate_help_response()
            elif question_type == 'swallow_info':
                return self._generate_swallow_knowledge_response(message)
            else:
                return self._generate_learning_response(message, context)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error generating response: {e}")
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°? üòÖ"
    
    def _preprocess_message(self, message: str) -> str:
        """‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not isinstance(message, str):
            message = str(message)
        
        # ‡∏•‡∏ö whitespace ‡πÄ‡∏Å‡∏¥‡∏ô
        message = message.strip()
        
        return message
    
    def _classify_question_advanced(self, message: str) -> str:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö learned patterns ‡∏Å‡πà‡∏≠‡∏ô
        for pattern in self.learned_patterns:
            if pattern['pattern'].lower() in message:
                return pattern['category']
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
        greetings = ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ', '‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏î‡∏µ‡∏Ñ‡πà‡∏∞', '‡πÄ‡∏Æ‡∏•‡πÇ‡∏•', 'hi', 'hello', '‡πÑ‡∏Æ']
        if any(greeting in message for greeting in greetings):
            return 'greeting'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å
        bird_keywords = ['‡∏ô‡∏Å', '‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏≠‡∏≠‡∏Å', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏ô‡∏±‡∏ö', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô', 'swallow', '‡∏ï‡∏±‡∏ß', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å']
        if any(keyword in message for keyword in bird_keywords):
            return 'bird'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°
        intruder_keywords = ['‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°', '‡∏Ñ‡∏ô', '‡∏™‡∏±‡∏ï‡∏ß‡πå', '‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°', '‡∏á‡∏π', '‡∏´‡∏ô‡∏π', '‡πÅ‡∏°‡∏ß', '‡∏™‡∏∏‡∏ô‡∏±‡∏Ç', '‡∏ï‡∏∏‡∏Å‡πÅ‡∏Å', '‡πÄ‡∏´‡∏¢‡∏µ‡πà‡∏¢‡∏ß', '‡∏û‡∏¥‡∏£‡∏≤‡∏ö', '‡∏°‡∏µ‡∏Ñ‡∏ô', '‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô', '‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å', '‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å', 'intruder', 'person', 'animal']
        if any(keyword in message for keyword in intruder_keywords):
            return 'intruder'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        alert_keywords = ['‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÅ‡∏≠‡∏•‡πÄ‡∏•‡∏¥‡∏£‡πå‡∏ï', 'alert', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡πÅ‡∏à‡πâ‡∏á', '‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏', '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô']
        if any(keyword in message for keyword in alert_keywords):
            return 'alert'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
        system_keywords = ['‡∏£‡∏∞‡∏ö‡∏ö', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'status', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera', 'AI', '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'server', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'connect', '‡∏û‡∏£‡πâ‡∏≠‡∏°', 'ready']
        if any(keyword in message for keyword in system_keywords):
            return 'system'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
        time_keywords = ['‡πÄ‡∏ß‡∏•‡∏≤', '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á', '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '‡∏ß‡∏±‡∏ô', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡∏õ‡∏µ', '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', '‡∏ô‡∏≤‡∏ó‡∏µ', '‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ', 'time', 'now', 'today', 'hour', 'minute']
        if any(keyword in message for keyword in time_keywords):
            return 'time'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        help_keywords = ['‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏™‡∏≠‡∏ô', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', 'command', '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', '‡∏ß‡∏¥‡∏ò‡∏µ', 'tutorial', 'manual', 'guide']
        if any(keyword in message for keyword in help_keywords):
            return 'help'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô
        swallow_keywords = ['‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô', '‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô', 'swallow', '‡∏õ‡∏•‡∏¥‡∏á‡πÄ‡∏´‡∏¥‡∏ô', '‡∏£‡∏±‡∏á', '‡πÑ‡∏Ç‡πà']
        if any(keyword in message for keyword in swallow_keywords):
            return 'swallow_info'
        
        return 'unknown'
    
    def _record_conversation(self, message: str, context: Dict):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO conversations (timestamp, user_message, ai_response, context)
                VALUES (?, ?, ?, ?)
            ''', (
                dt.datetime.now().isoformat(),
                message,
                "",  # ‡∏à‡∏∞ update ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
                json.dumps(context)
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error recording conversation: {e}")
    
    def _get_greeting_response(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢"""
        greetings = [
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô AI Agent ‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô ü§ñ‚ú®",
            "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Smart Swallow Detection ü™∂",
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ üöÄ",
        ]
        
        current_hour = dt.datetime.now().hour
        if 6 <= current_hour < 12:
            time_greeting = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö! ‚òÄÔ∏è"
        elif 12 <= current_hour < 18:
            time_greeting = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üå§Ô∏è"
        else:
            time_greeting = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! üåô"
        
        base_greeting = random.choice(greetings)
        return f"{time_greeting} {base_greeting}"
    
    def _generate_bird_response(self, message: str, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å"""
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API
        bird_data = self._get_real_data('bird_stats')
        
        if not bird_data:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üîÑ"
        
        if any(word in message for word in ['‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏°‡∏≤', 'in', 'entering']):
            birds_in = bird_data.get('birds_in', 0)
            return f"üìä ‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: {birds_in} ‡∏ï‡∏±‡∏ß\n‚ú® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤ {dt.datetime.now().strftime('%H:%M:%S')}"
        
        elif any(word in message for word in ['‡∏≠‡∏≠‡∏Å', '‡πÑ‡∏õ', 'out', 'exiting']):
            birds_out = bird_data.get('birds_out', 0)
            return f"üìä ‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ: {birds_out} ‡∏ï‡∏±‡∏ß\n‚ú® ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤ {dt.datetime.now().strftime('%H:%M:%S')}"
        
        elif any(word in message for word in ['‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', 'current', 'now']):
            current_count = bird_data.get('current_count', 0)
            return f"ü™∂ ‡∏ô‡∏Å‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_count} ‡∏ï‡∏±‡∏ß\n‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {dt.datetime.now().strftime('%H:%M:%S')}"
        
        elif any(word in message for word in ['‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'stats', 'report']):
            return self._generate_detailed_bird_stats(bird_data)
        
        else:
            # ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            birds_in = bird_data.get('birds_in', 0)
            birds_out = bird_data.get('birds_out', 0)
            current_count = bird_data.get('current_count', 0)
            
            return f"""ü™∂ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô:
üìà ‡πÄ‡∏Ç‡πâ‡∏≤: {birds_in} ‡∏ï‡∏±‡∏ß
üìâ ‡∏≠‡∏≠‡∏Å: {birds_out} ‡∏ï‡∏±‡∏ß  
üî¢ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_count} ‡∏ï‡∏±‡∏ß
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {dt.datetime.now().strftime('%H:%M:%S')}"""
    
    def _generate_intruder_response(self, message: str, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°"""
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API
        intruder_stats = self._get_real_data('intruder_stats')
        intruder_alerts = self._get_real_data('intruder_alerts')
        
        if not intruder_stats and not intruder_alerts:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏î‡πâ üîÑ"
        
        today_total = intruder_stats.get('today_total', 0)
        total_alerts = intruder_stats.get('total_alerts', 0)
        
        if any(word in message for word in ['‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', 'today']):
            if today_total > 0:
                return f"üö® ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏° {today_total} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\nüìä ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_alerts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            else:
                return "‚úÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
        
        elif any(word in message for word in ['‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', 'latest', 'recent']):
            if intruder_alerts and len(intruder_alerts) > 0:
                latest = intruder_alerts[0]
                return f"""üö® ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {latest.get('object_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {latest.get('timestamp', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}
üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {latest.get('confidence', 0)*100:.1f}%"""
            else:
                return "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
        
        else:
            # ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            if today_total > 0:
                return f"""üõ°Ô∏è ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°:
üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {today_total} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üìä ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_alerts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡∏õ‡∏Å‡∏ï‡∏¥"""
            else:
                return "üõ°Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏° ‚úÖ"
    
    def _generate_alert_response(self, message: str, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        intruder_alerts = self._get_real_data('intruder_alerts')
        
        if not intruder_alerts:
            return "üì¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‚úÖ"
        
        if len(intruder_alerts) == 0:
            return "üì¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏á‡∏ö ‚úÖ"
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        response = "üì¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n\n"
        for i, alert in enumerate(intruder_alerts[:3]):
            response += f"{i+1}. üö® {alert.get('object_name', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
            response += f"   ‚è∞ {alert.get('timestamp', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
            response += f"   üìä {alert.get('confidence', 0)*100:.1f}%\n\n"
        
        return response.strip()
    
    def _generate_system_response(self, message: str, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö"""
        system_status = self._get_real_data('system_status')
        
        enabled = system_status.get('enabled', False)
        model_loaded = system_status.get('model_loaded', False)
        
        uptime = dt.datetime.now() - self.session_start
        uptime_str = str(uptime).split('.')[0]  # ‡∏•‡∏ö microseconds
        
        status_text = "üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" if (enabled and model_loaded) else "üî¥ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå"
        
        return f"""‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:
{status_text} ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {"‡∏õ‡∏Å‡∏ï‡∏¥" if enabled else "‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"}
ü§ñ AI Model: {"‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß" if model_loaded else "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"}
üìπ ‡∏Å‡∏•‡πâ‡∏≠‡∏á: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß
‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime_str}
üí¨ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"""
    
    def _generate_time_response(self, message: str, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤"""
        now = dt.datetime.now()
        thai_time = now.strftime('%H:%M:%S')
        thai_date = now.strftime('%d/%m/%Y')
        
        uptime = now - self.session_start
        uptime_str = str(uptime).split('.')[0]
        
        return f"""‚è∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤:
üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {thai_time}
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {thai_date}
‚ö° ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤: {uptime_str}
ü§ñ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"""
    
    def _generate_help_response(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        return """üÜò ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:

ü™∂ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å:
‚Ä¢ "‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß" - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
‚Ä¢ "‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß" - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ  
‚Ä¢ "‡∏ô‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ" - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
‚Ä¢ "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å" - ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î

üö® ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°:
‚Ä¢ "‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏´‡∏°" - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
‚Ä¢ "‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
‚Ä¢ "‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" - ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

üì¢ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:
‚Ä¢ "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" - ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
‚Ä¢ "‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏´‡∏°" - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

‚öôÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö:
‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö" - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚Ä¢ "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà" - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

ü™∂ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô:
‚Ä¢ "‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£" - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
‚Ä¢ "‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏ó‡∏≥‡∏£‡∏±‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á" - ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
‚Ä¢ "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô" - ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå

üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÜ ‡∏ú‡∏°‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏≠‡∏á!"""
    
    def _generate_swallow_knowledge_response(self, message: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô"""
        knowledge = self.knowledge_base['swallow_knowledge']
        
        if any(word in message for word in ['‡∏Ñ‡∏∑‡∏≠', '‡∏≠‡∏∞‡πÑ‡∏£', 'what', '‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô']):
            return "ü™∂ " + random.choice(knowledge['basic_info'])
        
        elif any(word in message for word in ['‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°', '‡∏ó‡∏≥‡∏£‡∏±‡∏á', 'behavior', '‡∏ö‡∏¥‡∏ô']):
            return "üè† " + random.choice(knowledge['behavior'])
        
        elif any(word in message for word in ['‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', 'benefit', '‡∏î‡∏µ', '‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå']):
            return "‚ú® " + random.choice(knowledge['benefits'])
        
        else:
            # ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏£‡∏ß‡∏°
            responses = []
            responses.extend(knowledge['basic_info'])
            return "ü™∂ " + random.choice(responses)
    
    def _generate_detailed_bird_stats(self, bird_data: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        birds_in = bird_data.get('birds_in', 0)
        birds_out = bird_data.get('birds_out', 0)
        current_count = bird_data.get('current_count', 0)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        net_change = birds_in - birds_out
        activity_level = "‡∏™‡∏π‡∏á" if (birds_in + birds_out) > 10 else "‡∏õ‡∏Å‡∏ï‡∏¥" if (birds_in + birds_out) > 5 else "‡∏ï‡πà‡∏≥"
        
        return f"""üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:

üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å:
‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤: {birds_in} ‡∏ï‡∏±‡∏ß
‚Ä¢ ‡∏≠‡∏≠‡∏Å: {birds_out} ‡∏ï‡∏±‡∏ß
‚Ä¢ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_count} ‡∏ï‡∏±‡∏ß
‚Ä¢ ‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á: {net_change:+d} ‡∏ï‡∏±‡∏ß

üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: {activity_level}
‚Ä¢ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: {"‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡∏Å" if net_change > 0 else "‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤" if net_change < 0 else "‡∏™‡∏°‡∏î‡∏∏‡∏•"}

‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {dt.datetime.now().strftime('%H:%M:%S')}"""
    
    def _generate_learning_response(self, message: str, context: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å"""
        # ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á
        similar_responses = [
            "ü§î ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å ü™∂ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö ü§ñ ‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö",
            "üòÖ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏°! ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á '‡∏ä‡πà‡∏ß‡∏¢' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡∏ö",
            "üß† ‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢?",
            "üí≠ ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÅ‡∏ï‡πà‡∏ú‡∏°‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ! ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
        ]
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô pattern ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
        self._learn_new_pattern(message, 'unknown')
        
        return random.choice(similar_responses)
    
    def _learn_new_pattern(self, message: str, category: str):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ pattern ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            cursor.execute('''
                SELECT id, usage_count FROM learned_patterns 
                WHERE pattern = ? AND category = ?
            ''', (message, category))
            
            result = cursor.fetchone()
            
            if result:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó usage count
                cursor.execute('''
                    UPDATE learned_patterns 
                    SET usage_count = usage_count + 1, last_used = ?
                    WHERE id = ?
                ''', (dt.datetime.now().isoformat(), result[0]))
            else:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° pattern ‡πÉ‡∏´‡∏°‡πà
                cursor.execute('''
                    INSERT INTO learned_patterns (pattern, category, last_used)
                    VALUES (?, ?, ?)
                ''', (message, category, dt.datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error learning pattern: {e}")

# Compatibility aliases ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
class SmartAIChatbot(UltraSmartAIAgent):
    """Compatibility class"""
    pass

class SmartAIChatbotV2(UltraSmartAIAgent):
    """Compatibility class"""
    pass

class UltraSmartAIChatbot(UltraSmartAIAgent):
    """Compatibility class"""
    pass

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
if __name__ == "__main__":
    print("üöÄ Testing Ultra Smart AI Agent...")
    
    agent = UltraSmartAIAgent()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ
    test_questions = [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
        "‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß",
        "‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏´‡∏°",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö",
        "‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà",
        "‡∏ä‡πà‡∏ß‡∏¢",
        "‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£"
    ]
    
    for question in test_questions:
        print(f"\nüë§: {question}")
        response = agent.get_response(question)
        print(f"ü§ñ: {response}")
    
    print("\n‚úÖ Testing completed!")
