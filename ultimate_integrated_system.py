#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ULTIMATE INTEGRATED SWALLOW AI SYSTEM V5 - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
‡∏£‡∏ß‡∏° AI ‡∏´‡∏•‡∏±‡∏Å + Live Stream + Web App + ‡∏Å‡∏•‡πâ‡∏≠‡∏á + Database ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô

‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏î‡πà‡∏ô:
   üéØ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á USB, IP Camera, Webcam
   ü§ñ ‡πÉ‡∏ä‡πâ AI ‡∏´‡∏•‡∏±‡∏Å V5 Ultra Precision
   üåê Web Dashboard ‡πÅ‡∏ö‡∏ö Real-time
   üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   üîÑ Live Stream 24/7
   üì± API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏û‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠

üéâ Ready for Production!
"""

import cv2
import numpy as np
import time
import json
import threading
import logging
import sqlite3
import os
import gc
import psutil
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from collections import deque
from flask import Flask, jsonify, render_template, Response, request, render_template_string
from werkzeug.serving import make_server
import base64

# Import ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å
try:
    from ultimate_perfect_ai_MASTER import V5_UltimatePrecisionSwallowAI, EnhancedMasterBirdDetector
    AI_AVAILABLE = True
    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î AI ‡∏´‡∏•‡∏±‡∏Å V5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    AI_AVAILABLE = False
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î AI ‡∏´‡∏•‡∏±‡∏Å: {e}")

# Import ‡∏£‡∏∞‡∏ö‡∏ö Live Stream
try:
    from live_stream_ai import MemoryEfficientDetector, LiveStreamManager
    LIVE_STREAM_AVAILABLE = True
    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Live Stream ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    LIVE_STREAM_AVAILABLE = False
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Live Stream: {e}")

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ultimate_integrated_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class UltimateIntegratedSystem:
    """üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô"""
    
    def __init__(self):
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Ultimate Integrated Swallow AI V5")
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        self.config = self._load_config()
        
        # ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å
        self.ai_system = None
        self.detector = None
        self._initialize_ai()
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á
        self.camera = None
        self.camera_thread = None
        self.camera_running = False
        self.current_frame = None
        self.frame_lock = threading.Lock()
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.db_manager = DatabaseManager()
        
        # ‡∏£‡∏∞‡∏ö‡∏ö Live Stream
        self.live_results = deque(maxlen=1000)
        self.detection_stats = {
            'total_detections': 0,
            'entering_birds': 0,
            'exiting_birds': 0,
            'session_start': datetime.now(),
            'last_detection': None
        }
        
        # Flask Web App
        self.app = Flask(__name__)
        self.setup_routes()
        
        print("‚úÖ Ultimate Integrated System ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    
    def _load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        default_config = {
            'camera': {
                'source': 'rtsp://ainok1:ainok123@192.168.1.100:554/stream1',  # IP Camera RTSP
                'backup_source': 0,  # 0 = webcam ‡∏™‡∏≥‡∏£‡∏≠‡∏á
                'width': 640,
                'height': 480,
                'fps': 15,
                'rtsp_transport': 'tcp',  # tcp ‡∏´‡∏£‡∏∑‡∏≠ udp
                'buffer_size': 1,
                'timeout': 10
            },
            'ai': {
                'mode': 'mixed',  # enter, exit, mixed
                'confidence_threshold': 0.25,
                'use_yolo': True,
                'enable_motion_detection': True
            },
            'web': {
                'host': '0.0.0.0',
                'port': 5000,
                'debug': False
            },
            'database': {
                'path': 'ultimate_integrated_results.db',
                'backup_interval': 3600
            }
        }
        
        try:
            if os.path.exists('integrated_config.json'):
                with open('integrated_config.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå")
                return {**default_config, **config}
        except Exception as e:
            print(f"‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {e}")
        
        return default_config
    
    def _initialize_ai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI"""
        try:
            if AI_AVAILABLE:
                self.ai_system = V5_UltimatePrecisionSwallowAI(self.config['ai']['mode'])
                self.detector = EnhancedMasterBirdDetector(self.config['ai']['mode'])
                print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏´‡∏•‡∏±‡∏Å V5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                # ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö backup
                if LIVE_STREAM_AVAILABLE:
                    self.detector = MemoryEfficientDetector()
                    print("‚úÖ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏™‡∏≥‡∏£‡∏≠‡∏á")
                else:
                    self.detector = None
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI: {e}")
            self.detector = None
    
    def connect_camera(self, source=None):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö IP Camera, RTSP, ‡πÅ‡∏•‡∏∞ USB Camera"""
        if source is None:
            source = self.config['camera']['source']
        
        try:
            print(f"üé• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á: {source}")
            
            # ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if self.camera is not None:
                self.camera.release()
            
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            self.camera = cv2.VideoCapture(source)
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTSP
            if isinstance(source, str) and source.startswith('rtsp://'):
                print("üîó ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTSP Stream...")
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ buffer ‡πÅ‡∏•‡∏∞ transport protocol
                self.camera.set(cv2.CAP_PROP_BUFFERSIZE, self.config['camera'].get('buffer_size', 1))
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout
                self.camera.set(cv2.CAP_PROP_OPEN_TIMEOUT_MSEC, self.config['camera'].get('timeout', 10) * 1000)
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ read timeout
                self.camera.set(cv2.CAP_PROP_READ_TIMEOUT_MSEC, 5000)
                
                print("‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTSP...")
                time.sleep(2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ RTSP ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            
            if not self.camera.isOpened():
                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ backup source
                backup_source = self.config['camera'].get('backup_source', 0)
                print(f"üîÑ ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backup camera: {backup_source}")
                
                if self.camera is not None:
                    self.camera.release()
                
                self.camera = cv2.VideoCapture(backup_source)
                
                if not self.camera.isOpened():
                    raise Exception(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏£‡∏≠‡∏á: {source}, {backup_source}")
                else:
                    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ backup camera ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á
            self.camera.set(cv2.CAP_PROP_FRAME_WIDTH, self.config['camera']['width'])
            self.camera.set(cv2.CAP_PROP_FRAME_HEIGHT, self.config['camera']['height'])
            self.camera.set(cv2.CAP_PROP_FPS, self.config['camera']['fps'])
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°...")
            test_attempts = 5
            frame_read_success = False
            
            for attempt in range(test_attempts):
                ret, frame = self.camera.read()
                if ret and frame is not None:
                    frame_read_success = True
                    print(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1} - ‡∏Ç‡∏ô‡∏≤‡∏î: {frame.shape}")
                    break
                else:
                    print(f"‚ö†Ô∏è ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt + 1}: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°")
                    time.sleep(1)
            
            if not frame_read_success:
                raise Exception("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡∏ô‡∏≤‡∏î: {frame.shape}")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á: {e}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug
            print("üîß ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ Debug:")
            print(f"   Source: {source}")
            print(f"   OpenCV Version: {cv2.__version__}")
            print(f"   Camera Object: {self.camera}")
            
            return False
    
    def start_camera_stream(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
        if self.camera_running:
            print("‚ö†Ô∏è ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        
        if not self.connect_camera():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á")
            return
        
        self.camera_running = True
        self.camera_thread = threading.Thread(target=self._camera_loop, daemon=True)
        self.camera_thread.start()
        
        print("üé• ‡πÄ‡∏£‡∏¥‡πà‡∏° Live Stream ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    
    def _camera_loop(self):
        """Loop ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTSP"""
        frame_count = 0
        consecutive_failures = 0
        max_failures = 10
        
        while self.camera_running and self.camera is not None:
            try:
                ret, frame = self.camera.read()
                if not ret or frame is None:
                    consecutive_failures += 1
                    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {consecutive_failures})")
                    
                    if consecutive_failures >= max_failures:
                        print("‚ùå ‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
                        if self.connect_camera():
                            consecutive_failures = 0
                            continue
                        else:
                            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ")
                            break
                    
                    time.sleep(0.5)
                    continue
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                consecutive_failures = 0
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°
                if frame.shape[0] == 0 or frame.shape[1] == 0:
                    print("‚ö†Ô∏è ‡πÄ‡∏ü‡∏£‡∏°‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    continue
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                with self.frame_lock:
                    self.current_frame = frame.copy()
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å (‡∏ó‡∏∏‡∏Å 3 ‡πÄ‡∏ü‡∏£‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
                if frame_count % 3 == 0 and self.detector is not None:
                    self._process_frame_detection(frame, frame_count)
                
                frame_count += 1
                
                # ‡∏õ‡∏£‡∏±‡∏ö sleep time ‡∏ï‡∏≤‡∏° FPS
                sleep_time = 1.0 / self.config['camera']['fps']
                time.sleep(sleep_time)
                
            except Exception as e:
                consecutive_failures += 1
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°: {e}")
                
                if consecutive_failures >= max_failures:
                    print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                    break
                
                time.sleep(1)
        
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á")
    
    def _process_frame_detection(self, frame, frame_count):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        try:
            start_time = time.time()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏´‡∏•‡∏±‡∏Å
            if self.ai_system and hasattr(self.detector, 'detect_smart'):
                detections = self.detector.detect_smart(frame, self.config['ai']['mode'])
            elif hasattr(self.detector, 'detect_birds'):
                detections = self.detector.detect_birds(frame)
            else:
                detections = []
            
            processing_time = time.time() - start_time
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            entering = len([d for d in detections if d.get('direction') == 'entering'])
            exiting = len([d for d in detections if d.get('direction') == 'exiting'])
            total = len(detections)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            result = {
                'timestamp': datetime.now().isoformat(),
                'frame_number': frame_count,
                'detections': total,
                'entering': entering,
                'exiting': exiting,
                'processing_time': processing_time,
                'detections_data': detections
            }
            
            self.live_results.append(result)
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self._update_stats(result)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if total > 0:
                self.db_manager.save_detection_result(result)
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {e}")
    
    def _update_stats(self, result):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        self.detection_stats['total_detections'] += result['detections']
        self.detection_stats['entering_birds'] += result['entering']
        self.detection_stats['exiting_birds'] += result['exiting']
        
        if result['detections'] > 0:
            self.detection_stats['last_detection'] = result['timestamp']
    
    def stop_camera_stream(self):
        """‡∏´‡∏¢‡∏∏‡∏î Live Stream"""
        self.camera_running = False
        
        if self.camera_thread:
            self.camera_thread.join(timeout=2)
        
        if self.camera:
            self.camera.release()
            self.camera = None
        
        print("üõë ‡∏´‡∏¢‡∏∏‡∏î Live Stream")
    
    def get_current_frame_encoded(self):
        """‡∏£‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ö‡∏ö encoded ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web"""
        with self.frame_lock:
            if self.current_frame is not None:
                frame = self.current_frame.copy()
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏ß‡πà‡∏≤‡∏á
                frame = np.zeros((480, 640, 3), dtype=np.uint8)
                cv2.putText(frame, "No Camera Feed", (200, 240), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°
        self._draw_info_on_frame(frame)
        
        # Encode ‡πÄ‡∏õ‡πá‡∏ô JPEG
        _, buffer = cv2.imencode('.jpg', frame)
        return base64.b64encode(buffer).decode('utf-8')
    
    def _draw_info_on_frame(self, frame):
        """‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°"""
        # ‡∏ß‡∏≤‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        info_text = [
            f"Mode: {self.config['ai']['mode'].upper()}",
            f"Total: {self.detection_stats['total_detections']}",
            f"Entering: {self.detection_stats['entering_birds']}",
            f"Exiting: {self.detection_stats['exiting_birds']}",
            f"Time: {datetime.now().strftime('%H:%M:%S')}"
        ]
        
        for i, text in enumerate(info_text):
            cv2.putText(frame, text, (10, 30 + i * 25), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
    
    def setup_routes(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Web Routes"""
        
        @self.app.route('/')
        def dashboard():
            """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏´‡∏•‡∏±‡∏Å"""
            return render_template_string(DASHBOARD_HTML)
        
        @self.app.route('/api/status')
        def api_status():
            """API ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
            return jsonify({
                'status': 'running',
                'camera_connected': self.camera is not None,
                'camera_running': self.camera_running,
                'ai_available': AI_AVAILABLE,
                'detector_available': self.detector is not None,
                'uptime': str(datetime.now() - self.detection_stats['session_start']),
                'config': self.config
            })
        
        @self.app.route('/api/stats')
        def api_stats():
            """API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
            return jsonify(self.detection_stats)
        
        @self.app.route('/api/live-data')
        def api_live_data():
            """API ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Live"""
            recent_results = list(self.live_results)[-10:]  # 10 ‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            return jsonify({
                'recent_detections': recent_results,
                'current_stats': self.detection_stats,
                'frame_encoded': self.get_current_frame_encoded()
            })
        
        @self.app.route('/api/camera/start')
        def api_camera_start():
            """API ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
            self.start_camera_stream()
            return jsonify({'status': 'started'})
        
        @self.app.route('/api/camera/stop')
        def api_camera_stop():
            """API ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
            self.stop_camera_stream()
            return jsonify({'status': 'stopped'})
        
        @self.app.route('/api/test-rtsp')
        def api_test_rtsp():
            """API ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTSP"""
            rtsp_url = "rtsp://ainok1:ainok123@192.168.1.100:554/stream1"
            
            print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTSP: {rtsp_url}")
            
            try:
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ cv2.VideoCapture
                test_cap = cv2.VideoCapture(rtsp_url)
                test_cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                test_cap.set(cv2.CAP_PROP_OPEN_TIMEOUT_MSEC, 10000)
                
                if test_cap.isOpened():
                    ret, frame = test_cap.read()
                    test_cap.release()
                    
                    if ret and frame is not None:
                        return jsonify({
                            'status': 'success',
                            'message': 'RTSP connection successful',
                            'frame_shape': frame.shape
                        })
                    else:
                        return jsonify({
                            'status': 'error',
                            'message': 'RTSP opened but cannot read frame'
                        })
                else:
                    test_cap.release()
                    return jsonify({
                        'status': 'error',
                        'message': 'Cannot open RTSP connection'
                    })
                    
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': f'RTSP test failed: {str(e)}'
                })
        
        @self.app.route('/api/camera/source', methods=['POST'])
        def api_camera_source():
            """API ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á"""
            data = request.get_json()
            source = data.get('source', 0)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
            try:
                source = int(source)
            except:
                pass
            
            success = self.connect_camera(source)
            return jsonify({'status': 'success' if success else 'failed'})
        
        @self.app.route('/api/config', methods=['GET', 'POST'])
        def api_config():
            """API ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
            if request.method == 'POST':
                new_config = request.get_json()
                self.config.update(new_config)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                with open('integrated_config.json', 'w', encoding='utf-8') as f:
                    json.dump(self.config, f, ensure_ascii=False, indent=2)
                
                return jsonify({'status': 'updated'})
            else:
                return jsonify(self.config)
    
    def run_web_server(self):
        """‡∏£‡∏±‡∏ô Web Server"""
        try:
            print(f"üåê ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Server: http://{self.config['web']['host']}:{self.config['web']['port']}")
            
            server = make_server(
                self.config['web']['host'], 
                self.config['web']['port'], 
                self.app
            )
            
            server.serve_forever()
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Server: {e}")
    
    def process_video_file(self, video_path):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠"""
        if not self.ai_system:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠")
            return None
        
        try:
            print(f"üé¨ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠: {video_path}")
            results = self.ai_system.process_video_v5(video_path)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.db_manager.save_video_result(video_path, results)
            
            print("‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return results
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠: {e}")
            return None

class DatabaseManager:
    """üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    def __init__(self, db_path='ultimate_integrated_results.db'):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS detections (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    frame_number INTEGER,
                    total_detections INTEGER,
                    entering_birds INTEGER,
                    exiting_birds INTEGER,
                    processing_time REAL,
                    source_type TEXT DEFAULT 'live',
                    data TEXT
                )
            ''')
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS video_results (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    video_path TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    total_frames INTEGER,
                    entering_birds INTEGER,
                    exiting_birds INTEGER,
                    processing_time REAL,
                    fps REAL,
                    results TEXT
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    
    def save_detection_result(self, result):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO detections 
                (timestamp, frame_number, total_detections, entering_birds, exiting_birds, processing_time, data)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                result['timestamp'],
                result['frame_number'],
                result['detections'],
                result['entering'],
                result['exiting'],
                result['processing_time'],
                json.dumps(result['detections_data'])
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {e}")
    
    def save_video_result(self, video_path, results):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO video_results 
                (video_path, timestamp, total_frames, entering_birds, exiting_birds, processing_time, fps, results)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                video_path,
                datetime.now().isoformat(),
                results.get('frames_processed', 0),
                results.get('entering', 0),
                results.get('exiting', 0),
                results.get('processing_time', 0),
                results.get('fps', 0),
                json.dumps(results)
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠: {e}")

# HTML Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
DASHBOARD_HTML = '''
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Ultimate Swallow AI V5 Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #1a1a1a; color: #fff; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 30px; }
        .header h1 { color: #00ff88; margin-bottom: 10px; }
        .status-panel { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .status-card { background: #2a2a2a; padding: 20px; border-radius: 10px; border-left: 4px solid #00ff88; }
        .status-card h3 { color: #00ff88; margin-bottom: 10px; }
        .video-panel { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; margin-bottom: 30px; }
        .video-container { background: #2a2a2a; padding: 20px; border-radius: 10px; }
        .controls-panel { background: #2a2a2a; padding: 20px; border-radius: 10px; }
        .btn { background: #00ff88; color: #000; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        .btn:hover { background: #00cc6a; }
        .btn.danger { background: #ff4444; color: #fff; }
        .btn.danger:hover { background: #cc3333; }
        .live-frame { width: 100%; max-width: 640px; border: 2px solid #00ff88; border-radius: 10px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
        .stat-item { background: #333; padding: 15px; border-radius: 8px; text-align: center; }
        .stat-value { font-size: 24px; font-weight: bold; color: #00ff88; }
        .stat-label { font-size: 12px; color: #ccc; margin-top: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Ultimate Swallow AI V5 Dashboard</h1>
            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô - Live Stream + AI + Analytics</p>
        </div>

        <div class="status-panel">
            <div class="status-card">
                <h3>üìä System Status</h3>
                <div id="system-status">Loading...</div>
            </div>
            <div class="status-card">
                <h3>üé• Camera Status</h3>
                <div id="camera-status">Loading...</div>
            </div>
            <div class="status-card">
                <h3>ü§ñ AI Status</h3>
                <div id="ai-status">Loading...</div>
            </div>
        </div>

        <div class="video-panel">
            <div class="video-container">
                <h3>üìπ Live Video Feed</h3>
                <img id="live-frame" class="live-frame" src="data:image/jpeg;base64," alt="Live Feed">
            </div>
            <div class="controls-panel">
                <h3>üéõÔ∏è Controls</h3>
                <button class="btn" onclick="startCamera()">‚ñ∂Ô∏è Start Camera</button>
                <button class="btn danger" onclick="stopCamera()">‚èπÔ∏è Stop Camera</button>
                <br><br>
                <h4>Camera Source:</h4>
                <input type="text" id="camera-source" placeholder="0 or IP camera URL" style="width: 100%; padding: 8px; margin: 10px 0; background: #333; color: #fff; border: 1px solid #555; border-radius: 5px;">
                <button class="btn" onclick="changeCameraSource()">üîÑ Change Source</button>
                
                <br><br>
                <h4>AI Mode:</h4>
                <select id="ai-mode" style="width: 100%; padding: 8px; margin: 10px 0; background: #333; color: #fff; border: 1px solid #555; border-radius: 5px;">
                    <option value="mixed">Mixed (‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å)</option>
                    <option value="enter">Enter Only (‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)</option>
                    <option value="exit">Exit Only (‡∏≠‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)</option>
                </select>
            </div>
        </div>

        <div class="status-card">
            <h3>üìà Live Statistics</h3>
            <div class="stats-grid" id="stats-grid">
                <div class="stat-item">
                    <div class="stat-value" id="total-detections">0</div>
                    <div class="stat-label">Total Detections</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="entering-birds">0</div>
                    <div class="stat-label">Entering Birds</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="exiting-birds">0</div>
                    <div class="stat-label">Exiting Birds</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="session-time">00:00:00</div>
                    <div class="stat-label">Session Time</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        async function updateStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                document.getElementById('system-status').innerHTML = `
                    <div>Status: <span style="color: #00ff88;">Running</span></div>
                    <div>Uptime: ${data.uptime}</div>
                `;
                
                document.getElementById('camera-status').innerHTML = `
                    <div>Connected: <span style="color: ${data.camera_connected ? '#00ff88' : '#ff4444'};">${data.camera_connected ? 'Yes' : 'No'}</span></div>
                    <div>Running: <span style="color: ${data.camera_running ? '#00ff88' : '#ff4444'};">${data.camera_running ? 'Yes' : 'No'}</span></div>
                `;
                
                document.getElementById('ai-status').innerHTML = `
                    <div>AI Available: <span style="color: ${data.ai_available ? '#00ff88' : '#ff4444'};">${data.ai_available ? 'Yes' : 'No'}</span></div>
                    <div>Detector: <span style="color: ${data.detector_available ? '#00ff88' : '#ff4444'};">${data.detector_available ? 'Ready' : 'Not Ready'}</span></div>
                `;
            } catch (error) {
                console.error('Error updating status:', error);
            }
        }

        async function updateLiveData() {
            try {
                const response = await fetch('/api/live-data');
                const data = await response.json();
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                document.getElementById('total-detections').textContent = data.current_stats.total_detections;
                document.getElementById('entering-birds').textContent = data.current_stats.entering_birds;
                document.getElementById('exiting-birds').textContent = data.current_stats.exiting_birds;
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°
                if (data.frame_encoded) {
                    document.getElementById('live-frame').src = 'data:image/jpeg;base64,' + data.frame_encoded;
                }
            } catch (error) {
                console.error('Error updating live data:', error);
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        async function startCamera() {
            try {
                await fetch('/api/camera/start');
                console.log('Camera started');
            } catch (error) {
                console.error('Error starting camera:', error);
            }
        }

        async function stopCamera() {
            try {
                await fetch('/api/camera/stop');
                console.log('Camera stopped');
            } catch (error) {
                console.error('Error stopping camera:', error);
            }
        }

        async function changeCameraSource() {
            const source = document.getElementById('camera-source').value;
            try {
                await fetch('/api/camera/source', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ source: source })
                });
                console.log('Camera source changed');
            } catch (error) {
                console.error('Error changing camera source:', error);
            }
        }

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        updateStatus();
        updateLiveData();
        setInterval(updateStatus, 5000);  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setInterval(updateLiveData, 1000); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    </script>
</body>
</html>
'''

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Ultimate Integrated Swallow AI System V5")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    system = UltimateIntegratedSystem()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
    system.start_camera_stream()
    
    try:
        # ‡∏£‡∏±‡∏ô Web Server
        system.run_web_server()
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
    finally:
        # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
        system.stop_camera_stream()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

if __name__ == "__main__":
    main()
