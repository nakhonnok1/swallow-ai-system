#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ Interactive Entrance Selector - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
"""

import cv2
import numpy as np
import json
import os
from typing import Tuple, Dict, Optional

class InteractiveEntranceSelector:
    """üñ±Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏°‡∏≤‡∏™‡πå"""
    
    def __init__(self):
        self.entrance_points = []
        self.entrance_zone = None
        self.current_frame = None
        self.window_name = "üè† ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏Å - ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
        
    def mouse_callback(self, event, x, y, flags, param):
        """üñ±Ô∏è Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå"""
        if event == cv2.EVENT_LBUTTONDOWN:
            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
            self.entrance_points.append((x, y))
            print(f"üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤: ({x}, {y})")
            
            if len(self.entrance_points) == 1:
                print("üîÑ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
            elif len(self.entrance_points) == 2:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å 2 ‡∏à‡∏∏‡∏î
                self.create_entrance_zone()
                print("‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏Å‡∏î 's' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ 'r' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà")
                
        elif event == cv2.EVENT_RBUTTONDOWN:
            # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤ - ‡∏•‡∏ö‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            if self.entrance_points:
                removed = self.entrance_points.pop()
                print(f"üóëÔ∏è ‡∏•‡∏ö‡∏à‡∏∏‡∏î: {removed}")
                if self.entrance_zone:
                    self.entrance_zone = None
                    print("üîÑ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        self.update_display()
    
    def create_entrance_zone(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å 2 ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        if len(self.entrance_points) < 2:
            return
            
        p1, p2 = self.entrance_points[0], self.entrance_points[1]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        x1, y1 = min(p1[0], p2[0]), min(p1[1], p2[1])
        x2, y2 = max(p1[0], p2[0]), max(p1[1], p2[1])
        
        width = x2 - x1
        height = y2 - y1
        
        # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        padding = 20
        x1 = max(0, x1 - padding)
        y1 = max(0, y1 - padding)
        width = width + (padding * 2)
        height = height + (padding * 2)
        
        self.entrance_zone = {
            'x': x1,
            'y': y1,
            'width': width,
            'height': height,
            'center_x': x1 + width // 2,
            'center_y': y1 + height // 2,
            'detection_method': 'user_selected',
            'confidence': 1.0,
            'selection_points': self.entrance_points.copy()
        }
    
    def update_display(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"""
        if self.current_frame is None:
            return
            
        display_frame = self.current_frame.copy()
        
        # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        for i, point in enumerate(self.entrance_points):
            cv2.circle(display_frame, point, 8, (0, 255, 0), -1)
            cv2.putText(display_frame, f"P{i+1}", 
                       (point[0] + 10, point[1] - 10),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
        
        # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î
        if len(self.entrance_points) == 2:
            cv2.line(display_frame, self.entrance_points[0], self.entrance_points[1], 
                    (255, 255, 0), 2)
        
        # ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
        if self.entrance_zone:
            zone = self.entrance_zone
            # ‡∏ß‡∏≤‡∏î‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
            cv2.rectangle(display_frame, 
                         (zone['x'], zone['y']), 
                         (zone['x'] + zone['width'], zone['y'] + zone['height']),
                         (0, 255, 255), 3)
            
            # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
            center = (zone['center_x'], zone['center_y'])
            cv2.circle(display_frame, center, 5, (0, 0, 255), -1)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
            cv2.putText(display_frame, "ENTRANCE ZONE", 
                       (zone['x'], zone['y'] - 10),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
            
            cv2.putText(display_frame, f"Size: {zone['width']}x{zone['height']}", 
                       (zone['x'], zone['y'] + zone['height'] + 25),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            
            cv2.putText(display_frame, f"Center: ({zone['center_x']}, {zone['center_y']})", 
                       (zone['x'], zone['y'] + zone['height'] + 45),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        instructions = [
            "üñ±Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤",
            "üñ±Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤: ‡∏•‡∏ö‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", 
            "‚å®Ô∏è 's': ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤",
            "‚å®Ô∏è 'r': ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà",
            "‚å®Ô∏è 'q': ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"
        ]
        
        for i, instruction in enumerate(instructions):
            cv2.putText(display_frame, instruction, 
                       (10, 30 + i * 25),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        status = f"‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {len(self.entrance_points)}/2"
        if self.entrance_zone:
            status += " | ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
        cv2.putText(display_frame, status, 
                   (10, display_frame.shape[0] - 20),
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        
        cv2.imshow(self.window_name, display_frame)
    
    def select_entrance_from_video(self, video_path: str) -> Optional[Dict]:
        """üé¨ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
        
        print("üéØ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö")
        print("=" * 60)
        print("üìπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
        
        if not os.path.exists(video_path):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {video_path}")
            return None
        
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ: {video_path}")
            return None
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å
        ret, frame = cap.read()
        if not ret:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ")
            cap.release()
            return None
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        frame = cv2.resize(frame, (960, 540))
        self.current_frame = frame
        
        print("üñ±Ô∏è ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
        print("   üìç ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡∏°‡∏∏‡∏°‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
        print("   üìç ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡∏°‡∏∏‡∏°‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞ callback
        cv2.namedWindow(self.window_name, cv2.WINDOW_NORMAL)
        cv2.setMouseCallback(self.window_name, self.mouse_callback)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏£‡∏Å
        self.update_display()
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö
        while True:
            key = cv2.waitKey(1) & 0xFF
            
            if key == ord('s'):  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                if self.entrance_zone:
                    print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤...")
                    self.save_entrance_config(video_path)
                    break
                else:
                    print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            
            elif key == ord('r'):  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà")
                self.entrance_points.clear()
                self.entrance_zone = None
                self.update_display()
            
            elif key == ord('q'):  # ‡∏≠‡∏≠‡∏Å
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
                self.entrance_zone = None
                break
            
            elif key == ord(' '):  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏°
                ret, new_frame = cap.read()
                if ret:
                    self.current_frame = cv2.resize(new_frame, (960, 540))
                    self.update_display()
                    print("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ü‡∏£‡∏° - ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÄ‡∏ü‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡∏î Spacebar")
        
        cap.release()
        cv2.destroyAllWindows()
        
        return self.entrance_zone
    
    def save_entrance_config(self, video_path: str):
        """üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤"""
        if not self.entrance_zone:
            return
        
        config_file = "entrance_config_user.json"
        
        config = {
            'video_path': video_path,
            'entrance_zone': self.entrance_zone,
            'timestamp': cv2.getTickCount(),
            'notes': 'User-defined entrance zone via interactive selection'
        }
        
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß: {config_file}")
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
    
    def load_entrance_config(self, config_file: str = "entrance_config_user.json") -> Optional[Dict]:
        """üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤"""
        if not os.path.exists(config_file):
            return None
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            print(f"üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å: {config_file}")
            return config.get('entrance_zone')
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î: {e}")
            return None


def test_interactive_entrance_selector():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
    
    print("üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö")
    print("=" * 60)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_videos = [
        "training_videos/swallows_entering/enter_001.mp4",
        "training_videos/swallows_exiting/exit_001.mp4"
    ]
    
    print("üìπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤:")
    for i, video in enumerate(test_videos):
        status = "‚úÖ" if os.path.exists(video) else "‚ùå"
        print(f"   {i+1}. {status} {video}")
    
    try:
        choice = input("üî¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (1-2): ").strip()
        video_index = int(choice) - 1
        
        if 0 <= video_index < len(test_videos):
            selected_video = test_videos[video_index]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á selector
            selector = InteractiveEntranceSelector()
            
            # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
            existing_config = selector.load_entrance_config()
            if existing_config:
                print(f"üìÇ ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤:")
                print(f"   üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ({existing_config['center_x']}, {existing_config['center_y']})")
                print(f"   üìè ‡∏Ç‡∏ô‡∏≤‡∏î: {existing_config['width']}x{existing_config['height']}")
                
                use_existing = input("ü§î ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤? (y/n): ").strip().lower()
                if use_existing == 'y':
                    print("‚úÖ ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤")
                    return existing_config
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
            entrance_zone = selector.select_entrance_from_video(selected_video)
            
            if entrance_zone:
                print("üéâ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á: ({entrance_zone['center_x']}, {entrance_zone['center_y']})")
                print(f"üìè ‡∏Ç‡∏ô‡∏≤‡∏î: {entrance_zone['width']}x{entrance_zone['height']}")
                print(f"üíØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {entrance_zone['confidence']}")
                return entrance_zone
            else:
                print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
        else:
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
    except (ValueError, KeyboardInterrupt):
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
    
    return None


def integrate_with_ai_system(entrance_zone: Dict):
    """üîó ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI"""
    
    print("üîó ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI")
    print("=" * 60)
    
    try:
        # ‡πÉ‡∏ä‡πâ V5 ULTRA PRECISION AI
        from ultimate_perfect_ai_MASTER import V5_UltimatePrecisionSwallowAI
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á V5 AI
        ai = V5_UltimatePrecisionSwallowAI('enter')  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î enter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (V5 ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
        # ai.entrance_zone = entrance_zone  # V5 ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        
        print("‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö V5 ULTRA PRECISION AI ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        print(f"üè† ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà: ({entrance_zone['center_x']}, {entrance_zone['center_y']})")
        print("üéØ V5 AI ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        test_video = "training_videos/swallows_entering/enter_001.mp4"
        if os.path.exists(test_video):
            print(f"üé¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {test_video}")
            
            try:
                # ‡πÉ‡∏ä‡πâ V5 ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
                result = ai.process_video_v5(test_video)
                print(f"üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö V5:")
                print(f"   üê¶ ‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤: {result.get('entering', 0)} ‡∏ï‡∏±‡∏ß")
                print(f"   ÔøΩ ‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å: {result.get('exiting', 0)} ‡∏ï‡∏±‡∏ß") 
                print(f"   ‚ö° FPS: {result.get('fps', 0):.1f}")
                print(f"   ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: {result.get('processing_time', 0):.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")
        
        return ai
        
    except ImportError as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î V5 ULTRA PRECISION AI: {e}")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ultimate_perfect_ai_MASTER.py")
        return None


if __name__ == "__main__":
    print("üéØ Interactive Entrance Selector")
    print("üè† ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö")
    print("=" * 60)
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
    entrance_zone = test_interactive_entrance_selector()
    
    if entrance_zone:
        # ‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI
        ai_system = integrate_with_ai_system(entrance_zone)
        
        if ai_system:
            print("\nüöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á!")
            print("üí° ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("\n‚ö†Ô∏è ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI")
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤")
