#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SIMPLE YOLO DETECTOR - ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ array error ‡πÇ‡∏î‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
"""

import cv2
import numpy as np

class SimpleYOLODetector:
    """YOLO detector ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ array error"""
    
    def __init__(self):
        print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Simple YOLO Detector...")
        try:
            from ultralytics import YOLO
            self.yolo_model = YOLO('yolov8n.pt')
            self.available = True
            print("‚úÖ Simple YOLO ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î YOLO: {e}")
            self.yolo_model = None
            self.available = False
    
    def detect_birds(self, frame):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏° - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ error"""
        if not self.available or self.yolo_model is None:
            return []
        
        detections = []
        
        try:
            # ‡∏£‡∏±‡∏ô YOLO
            results = self.yolo_model(frame, verbose=False, conf=0.2)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            if results and len(results) > 0:
                result = results[0]
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ boxes ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if hasattr(result, 'boxes') and result.boxes is not None:
                    boxes = result.boxes
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if hasattr(boxes, 'data') and len(boxes.data) > 0:
                        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞ detection
                        for i in range(len(boxes.data)):
                            try:
                                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
                                detection = boxes.data[i].cpu().numpy()
                                
                                if len(detection) >= 6:
                                    x1, y1, x2, y2, conf, cls = detection[:6]
                                    
                                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏Å (class 14) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                                    if int(cls) == 14 and float(conf) > 0.2:
                                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
                                        center_x = int((x1 + x2) / 2)
                                        center_y = int((y1 + y2) / 2)
                                        width = int(x2 - x1)
                                        height = int(y2 - y1)
                                        
                                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
                                        area = width * height
                                        if 100 <= area <= 5000:
                                            detections.append({
                                                'center': (center_x, center_y),
                                                'bbox': (int(x1), int(y1), width, height),
                                                'confidence': float(conf),
                                                'area': area,
                                                'source': 'simple_yolo'
                                            })
                                            
                            except Exception as detection_error:
                                print(f"‚ö†Ô∏è Detection parsing error: {detection_error}")
                                continue
                                
        except Exception as e:
            print(f"‚ö†Ô∏è YOLO error: {e}")
            return []
        
        return detections

# Test simple detector
if __name__ == "__main__":
    detector = SimpleYOLODetector()
    
    if detector.available:
        print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Simple YOLO Detector...")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö RTSP
        rtsp_url = "rtsp://ainok1:ainok123@192.168.1.100:554/stream1"
        cap = cv2.VideoCapture(rtsp_url)
        
        if cap.isOpened():
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTSP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            frame_count = 0
            detection_count = 0
            
            while frame_count < 20:  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 20 ‡πÄ‡∏ü‡∏£‡∏°
                ret, frame = cap.read()
                if not ret:
                    continue
                    
                frame_count += 1
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                detections = detector.detect_birds(frame)
                
                if len(detections) > 0:
                    detection_count += 1
                    print(f"üéØ Frame {frame_count}: ‡∏û‡∏ö‡∏ô‡∏Å {len(detections)} ‡∏ï‡∏±‡∏ß")
                    
                    for i, det in enumerate(detections):
                        print(f"   ‡∏ô‡∏Å {i+1}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {det['confidence']:.2f}, ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {det['area']}")
                        
                if frame_count % 5 == 0:
                    print(f"üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß {frame_count}/20 ‡πÄ‡∏ü‡∏£‡∏° | ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {detection_count}")
                    
            cap.release()
            
            print(f"\nüìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Simple YOLO:")
            print(f"   üì∑ ‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {frame_count}")
            print(f"   üéØ ‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ: {detection_count}")
            print(f"   üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {(detection_count/frame_count)*100:.1f}%")
            
            if detection_count > 0:
                print("‚úÖ Simple YOLO ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
            else:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTSP")
    else:
        print("‚ùå Simple YOLO ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
