#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé• CAMERA CONNECTION TESTER
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ß‡∏á‡∏à‡∏£‡∏õ‡∏¥‡∏î RTSP
===============================================================================
"""

import cv2
import time
import sys
import datetime
import threading
import numpy as np

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
CAMERA_CONFIG = {
    'main_camera': 'rtsp://ainok1:ainok123@192.168.1.100:554/stream1',
    'backup_camera': 'rtsp://ainok1:ainok123@192.168.1.101:554/stream1',
    'usb_camera': 0
}

def test_single_camera(camera_url, camera_name):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {camera_name}")
    print(f"üì° URL: {camera_url}")
    print("-" * 50)
    
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        cap = cv2.VideoCapture(camera_url)
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # ‡∏•‡∏î buffer lag
        
        if not cap.isOpened():
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_name}")
            return False
            
        print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á {camera_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        
        # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
        ret, frame = cap.read()
        if ret:
            height, width, channels = frame.shape
            print(f"üìπ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {width}x{height}")
            print(f"üé® Channels: {channels}")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏£‡∏≠‡∏ö
            frames_read = 0
            start_time = time.time()
            
            for i in range(30):  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 30 ‡∏Å‡∏£‡∏≠‡∏ö
                ret, frame = cap.read()
                if ret:
                    frames_read += 1
                else:
                    break
                    
            elapsed_time = time.time() - start_time
            fps = frames_read / elapsed_time if elapsed_time > 0 else 0
            
            print(f"‚ö° FPS ‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ: {fps:.2f}")
            print(f"üìä ‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {frames_read}/30")
            
            if fps > 10:
                print(f"üéâ {camera_name} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! (FPS > 10)")
            elif fps > 5:
                print(f"üëç {camera_name} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏û‡∏≠‡πÉ‡∏ä‡πâ (FPS 5-10)")
            else:
                print(f"‚ö†Ô∏è {camera_name} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤ (FPS < 5)")
                
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å {camera_name}")
            cap.release()
            return False
            
        cap.release()
        print(f"‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {camera_name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return True
        
    except Exception as e:
        print(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö {camera_name}: {e}")
        return False

def test_all_cameras():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("=" * 60)
    print("üé• ULTIMATE CAMERA CONNECTION TESTER")
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    results = {}
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á RTSP ‡∏´‡∏•‡∏±‡∏Å
    print("\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á RTSP ‡∏´‡∏•‡∏±‡∏Å...")
    results['main_camera'] = test_single_camera(
        CAMERA_CONFIG['main_camera'], 
        "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å (Main RTSP)"
    )
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á USB (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    print("\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á USB...")
    results['usb_camera'] = test_single_camera(
        CAMERA_CONFIG['usb_camera'], 
        "‡∏Å‡∏•‡πâ‡∏≠‡∏á USB"
    )
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    print("\n" + "=" * 60)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("=" * 60)
    
    for camera, success in results.items():
        status = "‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ" if success else "‚ùå ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
        print(f"   {camera}: {status}")
    
    working_cameras = sum(results.values())
    total_cameras = len(results)
    
    print(f"\nüéØ ‡∏ú‡∏•‡∏£‡∏ß‡∏°: {working_cameras}/{total_cameras} ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    
    if working_cameras > 0:
        print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        if 'main_camera' in results and results['main_camera']:
            print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á RTSP ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        print("   - ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        print("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (username/password)")
        print("   - IP Address ‡πÅ‡∏•‡∏∞ Port")
        print("   - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á RTSP")
    
    return results

def live_camera_test(camera_url="rtsp://ainok1:ainok123@192.168.1.100:554/stream1"):
    """‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)"""
    print(f"\nüé¨ ‡πÄ‡∏õ‡∏¥‡∏î‡∏†‡∏≤‡∏û‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á...")
    print(f"üì° URL: {camera_url}")
    print("üí° ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á")
    
    cap = cv2.VideoCapture(camera_url)
    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
    
    if not cap.isOpened():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        return
        
    frame_count = 0
    start_time = time.time()
    
    try:
        while True:
            ret, frame = cap.read()
            
            if not ret:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û")
                break
                
            frame_count += 1
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û
            current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            elapsed = time.time() - start_time
            fps = frame_count / elapsed if elapsed > 0 else 0
            
            cv2.putText(frame, f"Live Camera Test", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(frame, f"Time: {current_time}", (10, 70), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, f"FPS: {fps:.1f}", (10, 110), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
            cv2.putText(frame, f"Frames: {frame_count}", (10, 150), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 255), 2)
            cv2.putText(frame, "Press 'q' to quit", (10, frame.shape[0] - 20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            
            cv2.imshow('Ultimate Camera Test', frame)
            
            # ‡∏Å‡∏î 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
                
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    finally:
        cap.release()
        cv2.destroyAllWindows()
        print("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    while True:
        print("\nüé• ULTIMATE CAMERA TESTER")
        print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("2. ‡∏î‡∏π‡∏†‡∏≤‡∏û‡∏™‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å")
        print("3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á RTSP ‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
        print("4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        
        choice = input("\nüëÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): ").strip()
        
        if choice == '1':
            test_all_cameras()
        elif choice == '2':
            live_camera_test()
        elif choice == '3':
            url = input("üîó ‡πÉ‡∏™‡πà RTSP URL: ").strip()
            if url:
                live_camera_test(url)
        elif choice == '4':
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        else:
            print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
        input("\n‚è≥ ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")

if __name__ == "__main__":
    main()
