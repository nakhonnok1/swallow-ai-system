# -*- coding: utf-8 -*-
"""
AI Performance Optimizer
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI
"""

import time
import threading
import queue
from typing import Optional, Tuple
import cv2
import numpy as np
from ultralytics import YOLO
from config import Config

class PerformanceOptimizer:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI"""
    
    def __init__(self, model: YOLO):
        self.model = model
        self.config = Config()
        self.frame_queue = queue.Queue(maxsize=5)
        self.result_queue = queue.Queue(maxsize=10)
        self.processing_thread = None
        self.is_running = False
        
        # Performance settings
        self.frame_skip = getattr(self.config, 'FRAME_SKIP', 2)
        self.performance_mode = getattr(self.config, 'PERFORMANCE_MODE', 'FAST')
        self.roi_enabled = getattr(self.config, 'ROI_ENABLED', True)
        
        # ROI settings
        self.roi_x = getattr(self.config, 'ROI_X', 0)
        self.roi_y = getattr(self.config, 'ROI_Y', 100)
        self.roi_width = getattr(self.config, 'ROI_WIDTH', 640)
        self.roi_height = getattr(self.config, 'ROI_HEIGHT', 280)
        
        # Performance tracking
        self.fps_counter = 0
        self.last_fps_time = time.time()
        self.current_fps = 0.0
        
    def optimize_frame(self, frame: np.ndarray) -> np.ndarray:
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        
        # ROI Processing - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if self.roi_enabled:
            h, w = frame.shape[:2]
            roi_x = min(self.roi_x, w - 1)
            roi_y = min(self.roi_y, h - 1)
            roi_w = min(self.roi_width, w - roi_x)
            roi_h = min(self.roi_height, h - roi_y)
            
            frame = frame[roi_y:roi_y + roi_h, roi_x:roi_x + roi_w]
        
        # Performance mode optimization
        if self.performance_mode == 'FAST':
            # ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
            if frame.shape[1] > 416:
                scale = 416 / frame.shape[1]
                new_width = 416
                new_height = int(frame.shape[0] * scale)
                frame = cv2.resize(frame, (new_width, new_height))
                
        elif self.performance_mode == 'BALANCED':
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            if frame.shape[1] > 640:
                scale = 640 / frame.shape[1]
                new_width = 640
                new_height = int(frame.shape[0] * scale)
                frame = cv2.resize(frame, (new_width, new_height))
                
        # ACCURATE mode ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ï‡πá‡∏°
        
        return frame
    
    def start_async_processing(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö async"""
        self.is_running = True
        self.processing_thread = threading.Thread(target=self._process_frames)
        self.processing_thread.daemon = True
        self.processing_thread.start()
    
    def stop_async_processing(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö async"""
        self.is_running = False
        if self.processing_thread:
            self.processing_thread.join(timeout=2)
    
    def _process_frames(self):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å"""
        while self.is_running:
            try:
                # ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å queue
                frame = self.frame_queue.get(timeout=0.1)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏†‡∏≤‡∏û
                optimized_frame = self.optimize_frame(frame)
                
                # ‡∏ó‡∏≥ detection
                start_time = time.time()
                results = self.model(optimized_frame, verbose=False)
                process_time = time.time() - start_time
                
                # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á result queue
                self.result_queue.put({
                    'results': results,
                    'process_time': process_time,
                    'original_frame': frame,
                    'optimized_frame': optimized_frame
                })
                
                self.frame_queue.task_done()
                
            except queue.Empty:
                continue
            except Exception as e:
                print(f"Processing error: {e}")
    
    def add_frame(self, frame: np.ndarray) -> bool:
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà queue ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        try:
            self.frame_queue.put_nowait(frame)
            return True
        except queue.Full:
            # ‡∏ñ‡πâ‡∏≤ queue ‡πÄ‡∏ï‡πá‡∏° ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ü‡∏£‡∏°‡∏ô‡∏µ‡πâ
            return False
    
    def get_result(self, timeout: float = 0.1) -> Optional[dict]:
        """‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        try:
            return self.result_queue.get(timeout=timeout)
        except queue.Empty:
            return None
    
    def update_fps(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö FPS"""
        self.fps_counter += 1
        current_time = time.time()
        
        if current_time - self.last_fps_time >= 1.0:
            self.current_fps = self.fps_counter / (current_time - self.last_fps_time)
            self.fps_counter = 0
            self.last_fps_time = current_time
    
    def get_performance_stats(self) -> dict:
        """‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        return {
            'fps': round(self.current_fps, 1),
            'frame_queue_size': self.frame_queue.qsize(),
            'result_queue_size': self.result_queue.qsize(),
            'performance_mode': self.performance_mode,
            'roi_enabled': self.roi_enabled,
            'frame_skip': self.frame_skip
        }
    
    def adjust_performance_mode(self, fps_target: float = 15.0):
        """‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏° FPS ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if self.current_fps < fps_target * 0.5:  # ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            if self.performance_mode != 'FAST':
                self.performance_mode = 'FAST'
                print(f"üîÑ Switched to FAST mode (FPS: {self.current_fps:.1f})")
                
        elif self.current_fps > fps_target * 1.2:  # ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 120% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            if self.performance_mode != 'ACCURATE':
                self.performance_mode = 'ACCURATE'
                print(f"üîÑ Switched to ACCURATE mode (FPS: {self.current_fps:.1f})")
                
        elif self.current_fps > fps_target * 0.8:  # 80-120% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            if self.performance_mode != 'BALANCED':
                self.performance_mode = 'BALANCED'
                print(f"üîÑ Switched to BALANCED mode (FPS: {self.current_fps:.1f})")

class SmartFrameSelector:
    """‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
    
    def __init__(self, skip_frames: int = 2):
        self.skip_frames = skip_frames
        self.frame_counter = 0
        self.last_frame = None
        self.motion_threshold = 30.0
    
    def should_process_frame(self, frame: np.ndarray) -> bool:
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        
        # Frame skipping
        self.frame_counter += 1
        if self.frame_counter % (self.skip_frames + 1) != 0:
            return False
        
        # Motion detection
        if self.last_frame is not None:
            gray_current = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            gray_last = cv2.cvtColor(self.last_frame, cv2.COLOR_BGR2GRAY)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°
            diff = cv2.absdiff(gray_current, gray_last)
            motion_score = np.mean(diff)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏°‡∏≤‡∏Å ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ü‡∏£‡∏°
            if motion_score < self.motion_threshold:
                return False
        
        self.last_frame = frame.copy()
        return True
    
    def reset(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ü‡∏£‡∏°"""
        self.frame_counter = 0
        self.last_frame = None
