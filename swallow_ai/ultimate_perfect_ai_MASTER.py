
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ULTIMATE PERFECT SWALLOW AI AGENT V5 - ULTRA PRECISE PRODUCTION READY
===============================================================================
‡∏£‡∏∞‡∏ö‡∏ö AI Agent ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á Live Stream 24/7

‚úÖ CORE FEATURES:
   üéØ Bird Detection & Counting (‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å/‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
   ü§ñ AI Agent Capabilities (‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
   üìπ Live Stream Integration (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á IP/USB)
   üìä Real-time Statistics & Analytics
   ÔøΩ Auto-learning & Adaptation
   üíæ Database Integration & Backup
   üåê Web API & Dashboard Integration

‚ö° V5 AI AGENT ENHANCEMENTS:
   üß† Self-learning Detection Algorithm
   üéØ Adaptive Confidence Scoring
   üìà Performance Optimization
   ÔøΩ Advanced Pattern Recognition
   üöÄ Production-ready Architecture
===============================================================================
"""

# Core System Imports
import cv2
import numpy as np
import sqlite3
import logging
import warnings
import time
import json
import os
import threading
import queue
import math
import pickle
from pathlib import Path
from datetime import datetime, timedelta
from collections import deque, defaultdict
from typing import List, Tuple, Dict, Optional, Any
from scipy.optimize import linear_sum_assignment

# Suppress warnings for cleaner output
warnings.filterwarnings('ignore')
warnings.filterwarnings('ignore', category=FutureWarning)
warnings.filterwarnings('ignore', message='.*ambiguous.*')
np.seterr(all='ignore')

# Try to import YOLO with fallback
try:
    from ultralytics import YOLO
    YOLO_AVAILABLE = True
    print("‚úÖ YOLO model loaded successfully")
except ImportError:
    YOLO_AVAILABLE = False
    print("‚ö†Ô∏è YOLO not available, using backup detection system")

# Setup comprehensive logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ultimate_ai_agent.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('UltimateSwallowAI')

# ============================================================================
# AI AGENT CORE SYSTEM CLASSES
# ============================================================================
from typing import Dict, List, Tuple, Optional

# ============================================================================
# AI AGENT CORE SYSTEM CLASSES
# ============================================================================

class UltimateSwallowAIAgent:
    """ü§ñ ULTIMATE SWALLOW AI AGENT - ‡∏£‡∏∞‡∏ö‡∏ö AI Agent ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏ö‡∏ö"""
    
    def __init__(self, video_type="mixed", config_path=None):
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Ultimate Swallow AI Agent V5")
        
        # Core Configuration
        self.video_type = video_type
        self.config = self._load_config(config_path)
        self.agent_id = f"SwallowAI_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # AI Agent Core Components
        self.brain = AIBrain()
        self.detector = SmartBirdDetector(video_type)
        self.tracker = MasterTracker()
        self.analyzer = BehaviorAnalyzer()
        self.memory = AIMemorySystem()
        self.learning_engine = ContinuousLearning()
        
        # Database & Storage
        self.db_manager = DatabaseManager("ultimate_ai_agent.db")
        self.stats_manager = StatisticsManager()
        
        # Performance & Monitoring
        self.performance_monitor = PerformanceMonitor()
        self.health_checker = SystemHealthChecker()
        
        # Live Stream Management
        self.stream_manager = StreamManager()
        self.frame_processor = FrameProcessor()
        
        # Results & Communication
        self.results_manager = ResultsManager()
        self.api_communicator = APICommunicator()
        
        # Agent State
        self.is_active = False
        self.learning_mode = True
        self.last_health_check = time.time()
        
        # Statistics
        self.session_stats = {
            'birds_entered': 0,
            'birds_exited': 0,
            'birds_inside': 0,
            'total_detections': 0,
            'session_start': datetime.now(),
            'frames_processed': 0,
            'accuracy_score': 0.0
        }
        
        logger.info(f"‚úÖ AI Agent {self.agent_id} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    def _load_config(self, config_path):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI Agent"""
        default_config = {
            'detection': {
                'confidence_threshold': 0.3,
                'nms_threshold': 0.4,
                'max_detections': 100,
                'enable_tracking': True
            },
            'learning': {
                'adaptation_rate': 0.1,
                'memory_size': 1000,
                'learning_interval': 100
            },
            'performance': {
                'target_fps': 30,
                'max_processing_time': 0.05,
                'enable_optimization': True
            },
            'api': {
                'update_interval': 1.0,
                'enable_realtime': True,
                'data_format': 'json'
            }
        }
        
        if config_path and os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                logger.warning(f"Cannot load config: {e}, using defaults")
        
        return default_config
    
    def start_agent(self):
        """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Agent"""
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô AI Agent...")
        
        self.is_active = True
        self.session_stats['session_start'] = datetime.now()
        
        # Initialize all systems
        self.db_manager.initialize()
        self.memory.initialize()
        self.performance_monitor.start()
        
        # Start health monitoring
        self._start_health_monitoring()
        
        logger.info("‚úÖ AI Agent ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        return True
    
    def stop_agent(self):
        """üõë ‡∏´‡∏¢‡∏∏‡∏î AI Agent"""
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î AI Agent...")
        
        self.is_active = False
        
        # Save current session
        self._save_session_data()
        
        # Cleanup resources
        self.performance_monitor.stop()
        self.db_manager.close()
        
        logger.info("‚úÖ AI Agent ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    
    def process_frame_agent(self, frame, frame_number=None):
        """üß† ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI Agent"""
        if not self.is_active:
            return None
        
        start_time = time.time()
        
        try:
            # 1. Pre-processing & Quality Check
            frame_quality = self._assess_frame_quality(frame)
            
            # 2. Smart Detection with AI Brain
            detections = self.brain.smart_detect(frame, self.detector)
            
            # 3. Advanced Tracking
            tracked_objects = self.tracker.update_tracking(detections)
            
            # 4. Behavior Analysis
            behaviors = self.analyzer.analyze_behaviors(tracked_objects)
            
            # 5. Update AI Memory
            self.memory.update_memory(frame, detections, behaviors)
            
            # 6. Continuous Learning
            if self.learning_mode:
                self.learning_engine.learn_from_frame(frame, detections, behaviors)
            
            # 7. Update Statistics
            self._update_session_stats(detections, behaviors)
            
            # 8. Prepare Results
            results = self._compile_results(frame, detections, tracked_objects, behaviors)
            
            # 9. Performance Monitoring
            processing_time = time.time() - start_time
            self.performance_monitor.record_frame(processing_time, len(detections))
            
            # 10. Health Check (periodic)
            if time.time() - self.last_health_check > 30:  # Every 30 seconds
                self._perform_health_check()
            
            return results
            
        except Exception as e:
            logger.error(f"Error processing frame: {e}")
            return None
    
    def get_realtime_stats(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö Real-time"""
        return {
            'agent_status': 'active' if self.is_active else 'inactive',
            'agent_id': self.agent_id,
            'session_stats': self.session_stats.copy(),
            'performance': self.performance_monitor.get_stats(),
            'health': self.health_checker.get_status(),
            'memory_usage': self.memory.get_usage_stats(),
            'learning_progress': self.learning_engine.get_progress(),
            'last_update': datetime.now().isoformat()
        }
    
    def get_detailed_analytics(self):
        """üìà ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        return {
            'detection_analytics': self.detector.get_analytics(),
            'tracking_analytics': self.tracker.get_analytics(),
            'behavior_patterns': self.analyzer.get_patterns(),
            'learning_insights': self.learning_engine.get_insights(),
            'performance_trends': self.performance_monitor.get_trends(),
            'database_stats': self.db_manager.get_stats()
        }
    
    def _assess_frame_quality(self, frame):
        """üîç ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏ü‡∏£‡∏°"""
        try:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            
            # Brightness
            brightness = np.mean(gray) / 255.0
            
            # Contrast (standard deviation)
            contrast = np.std(gray) / 255.0
            
            # Sharpness (Laplacian variance)
            sharpness = cv2.Laplacian(gray, cv2.CV_64F).var() / 10000.0
            
            # Noise estimation
            noise = np.std(cv2.GaussianBlur(gray, (5, 5), 0) - gray) / 255.0
            
            quality_score = (brightness * 0.3 + contrast * 0.3 + 
                           min(sharpness, 1.0) * 0.3 + (1.0 - noise) * 0.1)
            
            return {
                'brightness': brightness,
                'contrast': contrast,
                'sharpness': min(sharpness, 1.0),
                'noise': noise,
                'quality_score': quality_score
            }
        except Exception as e:
            logger.warning(f"Frame quality assessment failed: {e}")
            return {'quality_score': 0.5}  # Default quality
    
    def _update_session_stats(self, detections, behaviors):
        """üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Session"""
        self.session_stats['frames_processed'] += 1
        self.session_stats['total_detections'] += len(detections)
        
        # Count birds by direction
        for behavior in behaviors:
            direction = behavior.get('direction', 'unknown')
            if direction == 'entering':
                self.session_stats['birds_entered'] += 1
                self.session_stats['birds_inside'] += 1
            elif direction == 'exiting':
                self.session_stats['birds_exited'] += 1
                self.session_stats['birds_inside'] = max(0, self.session_stats['birds_inside'] - 1)
    
    def _compile_results(self, frame, detections, tracked_objects, behaviors):
        """üìã ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        return {
            'timestamp': datetime.now().isoformat(),
            'frame_info': {
                'height': frame.shape[0],
                'width': frame.shape[1],
                'channels': frame.shape[2] if len(frame.shape) > 2 else 1
            },
            'detections': detections,
            'tracked_objects': tracked_objects,
            'behaviors': behaviors,
            'statistics': {
                'birds_entered': self.session_stats['birds_entered'],
                'birds_exited': self.session_stats['birds_exited'],
                'birds_inside': self.session_stats['birds_inside'],
                'total_detections': len(detections)
            },
            'agent_status': {
                'agent_id': self.agent_id,
                'learning_mode': self.learning_mode,
                'performance': self.performance_monitor.get_current_stats()
            }
        }
    
    def _start_health_monitoring(self):
        """üè• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö"""
        def health_monitor():
            while self.is_active:
                try:
                    self._perform_health_check()
                    time.sleep(30)  # Check every 30 seconds
                except Exception as e:
                    logger.error(f"Health monitoring error: {e}")
        
        health_thread = threading.Thread(target=health_monitor, daemon=True)
        health_thread.start()
    
    def _perform_health_check(self):
        """üè• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö"""
        self.last_health_check = time.time()
        
        health_status = {
            'memory_usage': self.memory.get_usage_stats(),
            'performance': self.performance_monitor.get_stats(),
            'database_status': self.db_manager.check_health(),
            'detector_status': self.detector.get_health(),
            'tracker_status': self.tracker.get_health()
        }
        
        # Check for issues and auto-fix if possible
        self._auto_fix_issues(health_status)
        
        return health_status
    
    def _auto_fix_issues(self, health_status):
        """üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        # Memory cleanup if usage is high
        if health_status['memory_usage'].get('usage_percent', 0) > 80:
            self.memory.cleanup_old_data()
            logger.info("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Memory ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        
        # Performance optimization if FPS is low
        if health_status['performance'].get('avg_fps', 30) < 15:
            self.detector.optimize_for_speed()
            logger.info("‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    def _save_session_data(self):
        """üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session"""
        session_data = {
            'agent_id': self.agent_id,
            'session_stats': self.session_stats,
            'session_end': datetime.now().isoformat(),
            'total_runtime': (datetime.now() - self.session_stats['session_start']).total_seconds()
        }
        
        self.db_manager.save_session(session_data)
        logger.info(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session: {self.agent_id}")

    # ============================================================================
    # PUBLIC API METHODS FOR EXTERNAL INTEGRATION
    # ============================================================================
    
    def detect_birds_realtime(self, frame, **kwargs):
        """üê¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö Real-time (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö app_working.py)"""
        results = self.process_frame_agent(frame)
        if not results:
            return None, [], self.get_realtime_stats()
        
        return frame, results['detections'], results['statistics']
    
    def get_bird_statistics(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ô‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API endpoints)"""
        return {
            'entering': self.session_stats['birds_entered'],
            'exiting': self.session_stats['birds_exited'],
            'current_inside': self.session_stats['birds_inside'],
            'total_detections': self.session_stats['total_detections'],
            'session_duration': (datetime.now() - self.session_stats['session_start']).total_seconds(),
            'agent_status': 'active' if self.is_active else 'inactive'
        }
    
    def reset_counters(self):
        """üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö"""
        self.session_stats.update({
            'birds_entered': 0,
            'birds_exited': 0,
            'birds_inside': 0,
            'total_detections': 0,
            'frames_processed': 0
        })
        logger.info("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    
    def set_learning_mode(self, enabled):
        """üß† ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        self.learning_mode = enabled
        logger.info(f"üß† ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ: {'‡πÄ‡∏õ‡∏¥‡∏î' if enabled else '‡∏õ‡∏¥‡∏î'}")
    
    def export_data(self, format='json'):
        """üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        data = {
            'agent_info': {
                'agent_id': self.agent_id,
                'version': '5.0',
                'export_time': datetime.now().isoformat()
            },
            'session_data': self.session_stats,
            'analytics': self.get_detailed_analytics(),
            'memory_data': self.memory.export_data()
        }
        
        if format == 'json':
            return json.dumps(data, ensure_ascii=False, indent=2)
        else:
            return data


class AIBrain:
    """üß† AI Brain - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å"""
    
    def __init__(self):
        self.decision_history = deque(maxlen=1000)
        self.confidence_calibrator = ConfidenceCalibrator()
        self.pattern_recognizer = PatternRecognizer()
        
    def smart_detect(self, frame, detector):
        """üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
        # Multi-scale detection
        detections = []
        
        # Primary detection
        primary_detections = detector.detect_primary(frame)
        detections.extend(primary_detections)
        
        # Secondary validation
        validated_detections = self._validate_detections(frame, detections)
        
        # Confidence adjustment
        adjusted_detections = self.confidence_calibrator.adjust_confidence(validated_detections)
        
        # Pattern-based filtering
        final_detections = self.pattern_recognizer.filter_by_patterns(adjusted_detections)
        
        return final_detections
    
    def _validate_detections(self, frame, detections):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        validated = []
        for detection in detections:
            if self._is_valid_detection(frame, detection):
                validated.append(detection)
        return validated
    
    def _is_valid_detection(self, frame, detection):
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"""
        # Size validation
        bbox = detection.get('bbox', [0, 0, 0, 0])
        area = bbox[2] * bbox[3]
        if area < 50 or area > 10000:
            return False
        
        # Aspect ratio validation
        aspect_ratio = bbox[2] / bbox[3] if bbox[3] > 0 else 0
        if aspect_ratio < 0.2 or aspect_ratio > 5.0:
            return False
        
        # Confidence validation
        confidence = detection.get('confidence', 0)
        if confidence < 0.1:
            return False
        
        return True


class SmartBirdDetector:
    """ÔøΩ Smart Bird Detector - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
    
    def __init__(self, video_type="mixed"):
        self.video_type = video_type
        self.yolo_model = self._load_yolo_model()
        self.motion_detector = MotionDetector()
        self.feature_extractor = FeatureExtractor()
        
        # Performance stats
        self.detection_stats = {
            'total_detections': 0,
            'successful_detections': 0,
            'processing_times': deque(maxlen=100)
        }
    
    def _load_yolo_model(self):
        """üì¶ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO"""
        if YOLO_AVAILABLE:
            try:
                model_path = "yolov8n.pt"
                if os.path.exists(model_path):
                    return YOLO(model_path)
                else:
                    logger.warning("YOLO model file not found, downloading...")
                    return YOLO('yolov8n.pt')  # Will download if not exists
            except Exception as e:
                logger.error(f"Failed to load YOLO: {e}")
        return None
    
    def detect_primary(self, frame):
        """üéØ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
        start_time = time.time()
        detections = []
        
        try:
            # YOLO detection (primary)
            if self.yolo_model:
                yolo_detections = self._detect_with_yolo(frame)
                detections.extend(yolo_detections)
            
            # Motion detection (supplementary)
            motion_detections = self.motion_detector.detect(frame)
            detections.extend(motion_detections)
            
            # Remove duplicates
            detections = self._remove_duplicates(detections)
            
            # Update stats
            processing_time = time.time() - start_time
            self.detection_stats['processing_times'].append(processing_time)
            self.detection_stats['total_detections'] += len(detections)
            
            return detections
            
        except Exception as e:
            logger.error(f"Detection error: {e}")
            return []
    
    def _detect_with_yolo(self, frame):
        """ü§ñ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢ YOLO"""
        try:
            results = self.yolo_model(frame, verbose=False)
            detections = []
            
            for result in results:
                boxes = result.boxes
                if boxes is not None and len(boxes) > 0:
                    for box in boxes:
                        # Only birds (class 14 in COCO)
                        cls_value = int(box.cls[0]) if hasattr(box.cls, '__len__') else int(box.cls)
                        if cls_value == 14:  # bird class
                            coords = box.xyxy[0].cpu().numpy() if hasattr(box.xyxy[0], 'cpu') else box.xyxy[0].tolist()
                            x1, y1, x2, y2 = coords
                            conf_value = float(box.conf[0]) if hasattr(box.conf, '__len__') else float(box.conf)
                            
                            if conf_value > 0.2:  # Minimum confidence
                                detections.append({
                                    'bbox': [int(x1), int(y1), int(x2-x1), int(y2-y1)],
                                    'center': (int((x1+x2)/2), int((y1+y2)/2)),
                                    'confidence': conf_value,
                                    'source': 'yolo',
                                    'class': 'bird'
                                })
            
            return detections
            
        except Exception as e:
            logger.error(f"YOLO detection error: {e}")
            return []
    
    def _remove_duplicates(self, detections):
        """üîÑ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ã‡πâ‡∏≥"""
        if len(detections) <= 1:
            return detections
        
        unique_detections = []
        for detection in detections:
            is_duplicate = False
            center = detection['center']
            
            for existing in unique_detections:
                existing_center = existing['center']
                distance = math.sqrt((center[0] - existing_center[0])**2 + 
                                   (center[1] - existing_center[1])**2)
                
                if distance < 50:  # Within 50 pixels
                    # Keep the one with higher confidence
                    if detection['confidence'] > existing['confidence']:
                        unique_detections.remove(existing)
                        unique_detections.append(detection)
                    is_duplicate = True
                    break
            
            if not is_duplicate:
                unique_detections.append(detection)
        
        return unique_detections
    
    def get_analytics(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        avg_time = np.mean(self.detection_stats['processing_times']) if self.detection_stats['processing_times'] else 0
        
        return {
            'total_detections': self.detection_stats['total_detections'],
            'avg_processing_time': avg_time,
            'detection_rate': len(self.detection_stats['processing_times']) / max(sum(self.detection_stats['processing_times']), 1),
            'yolo_available': self.yolo_model is not None,
            'video_type': self.video_type
        }
    
    def get_health(self):
        """üè• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö"""
        return {
            'model_loaded': self.yolo_model is not None,
            'motion_detector_active': self.motion_detector.is_active(),
            'recent_detections': len(self.detection_stats['processing_times']),
            'status': 'healthy' if self.yolo_model else 'degraded'
        }
    
    def optimize_for_speed(self):
        """‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        # Adjust detection parameters for speed
        if hasattr(self.motion_detector, 'set_speed_mode'):
            self.motion_detector.set_speed_mode(True)
        logger.info("‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß")


class MotionDetector:
    """üéØ Motion Detection System"""
    
    def __init__(self):
        self.bg_subtractor = cv2.createBackgroundSubtractorMOG2(
            detectShadows=True, varThreshold=50, history=200
        )
        self.active = True
        self.speed_mode = False
    
    def detect(self, frame):
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"""
        try:
            # Apply background subtraction
            fg_mask = self.bg_subtractor.apply(frame)
            
            # Morphological operations
            kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
            fg_mask = cv2.morphologyEx(fg_mask, cv2.MORPH_OPEN, kernel)
            fg_mask = cv2.morphologyEx(fg_mask, cv2.MORPH_CLOSE, kernel)
            
            # Find contours
            contours, _ = cv2.findContours(fg_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            detections = []
            for contour in contours:
                area = cv2.contourArea(contour)
                
                # Filter by area
                if 100 < area < 5000:
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h if h > 0 else 0
                    
                    # Filter by aspect ratio
                    if 0.3 < aspect_ratio < 3.0:
                        center_x = x + w // 2
                        center_y = y + h // 2
                        confidence = min(area / 1000, 1.0) * 0.6  # Lower confidence than YOLO
                        
                        detections.append({
                            'center': (center_x, center_y),
                            'bbox': [x, y, w, h],
                            'confidence': confidence,
                            'source': 'motion',
                            'area': area,
                            'class': 'movement'
                        })
            
            return detections
            
        except Exception as e:
            logger.error(f"Motion detection error: {e}")
            return []
    
    def is_active(self):
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        return self.active
    
    def set_speed_mode(self, enabled):
        """‚ö° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"""
        self.speed_mode = enabled
        if enabled:
            # Adjust parameters for speed
            self.bg_subtractor.setHistory(100)  # Reduce history
            self.bg_subtractor.setVarThreshold(100)  # Increase threshold


class MasterTracker:
    """üîÑ Master Tracking System"""
    
    def __init__(self):
        self.tracks = {}
        self.next_id = 1
        self.max_age = 30
        self.min_hits = 3
        self.iou_threshold = 0.3
        
        self.tracking_stats = {
            'total_tracks': 0,
            'active_tracks': 0,
            'lost_tracks': 0
        }
    
    def update_tracking(self, detections):
        """üéØ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        # Predict existing tracks
        self._predict_tracks()
        
        # Associate detections with tracks
        matched, unmatched_dets, unmatched_trks = self._associate_detections_to_tracks(detections)
        
        # Update matched tracks
        for m in matched:
            self.tracks[unmatched_trks[m[1]]].update(detections[m[0]])
        
        # Create new tracks for unmatched detections
        for i in unmatched_dets:
            self._create_new_track(detections[i])
        
        # Remove old tracks
        self._remove_old_tracks()
        
        return self._get_active_tracks()
    
    def _predict_tracks(self):
        """üîÆ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á tracks"""
        for track in self.tracks.values():
            track.predict()
    
    def _associate_detections_to_tracks(self, detections):
        """üîó ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏±‡∏ö tracks"""
        if not self.tracks or not detections:
            return [], list(range(len(detections))), []
        
        # Simple distance-based matching
        matched = []
        unmatched_detections = list(range(len(detections)))
        unmatched_tracks = list(self.tracks.keys())
        
        for i, detection in enumerate(detections):
            best_match = None
            best_distance = float('inf')
            
            for track_id in list(unmatched_tracks):
                track = self.tracks[track_id]
                distance = self._calculate_distance(detection['center'], track.get_position())
                
                if distance < best_distance and distance < 100:  # threshold
                    best_distance = distance
                    best_match = track_id
            
            if best_match is not None:
                matched.append([i, best_match])
                unmatched_detections.remove(i)
                unmatched_tracks.remove(best_match)
        
        return matched, unmatched_detections, unmatched_tracks
    
    def _calculate_distance(self, pos1, pos2):
        """üìè ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á"""
        return math.sqrt((pos1[0] - pos2[0])**2 + (pos1[1] - pos2[1])**2)
    
    def _create_new_track(self, detection):
        """üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á track ‡πÉ‡∏´‡∏°‡πà"""
        track_id = self.next_id
        self.tracks[track_id] = Track(track_id, detection)
        self.next_id += 1
        self.tracking_stats['total_tracks'] += 1
    
    def _remove_old_tracks(self):
        """üóëÔ∏è ‡∏•‡∏ö tracks ‡πÄ‡∏Å‡πà‡∏≤"""
        to_remove = []
        for track_id, track in self.tracks.items():
            if track.age > self.max_age:
                to_remove.append(track_id)
        
        for track_id in to_remove:
            del self.tracks[track_id]
            self.tracking_stats['lost_tracks'] += 1
    
    def _get_active_tracks(self):
        """üìã ‡∏£‡∏±‡∏ö tracks ‡∏ó‡∏µ‡πà active"""
        active = []
        for track in self.tracks.values():
            if track.hits >= self.min_hits and track.age < self.max_age:
                active.append(track.get_info())
        
        self.tracking_stats['active_tracks'] = len(active)
        return active
    
    def get_analytics(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        return self.tracking_stats.copy()
    
    def get_health(self):
        """üè• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"""
        return {
            'total_tracks': len(self.tracks),
            'active_tracks': self.tracking_stats['active_tracks'],
            'status': 'healthy'
        }


class Track:
    """üéØ Individual Track Object"""
    
    def __init__(self, track_id, detection):
        self.id = track_id
        self.position = detection['center']
        self.bbox = detection['bbox']
        self.confidence = detection['confidence']
        self.trajectory = [self.position]
        
        self.hits = 1
        self.age = 0
        self.time_since_update = 0
        
        self.direction = 'unknown'
        self.velocity = (0, 0)
    
    def update(self, detection):
        """üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï track"""
        old_position = self.position
        self.position = detection['center']
        self.bbox = detection['bbox']
        self.confidence = detection['confidence']
        
        # Calculate velocity
        self.velocity = (self.position[0] - old_position[0], 
                        self.position[1] - old_position[1])
        
        # Update trajectory
        self.trajectory.append(self.position)
        if len(self.trajectory) > 30:  # Keep last 30 positions
            self.trajectory.pop(0)
        
        # Analyze direction
        self._analyze_direction()
        
        self.hits += 1
        self.time_since_update = 0
    
    def predict(self):
        """üîÆ ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"""
        # Simple linear prediction
        predicted_x = self.position[0] + self.velocity[0]
        predicted_y = self.position[1] + self.velocity[1]
        self.position = (int(predicted_x), int(predicted_y))
        
        self.age += 1
        self.time_since_update += 1
    
    def _analyze_direction(self):
        """üß≠ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á"""
        if len(self.trajectory) < 5:
            return
        
        # Analyze movement over trajectory
        start_pos = self.trajectory[0]
        end_pos = self.trajectory[-1]
        
        dx = end_pos[0] - start_pos[0]
        dy = end_pos[1] - start_pos[1]
        
        # Determine direction based on movement
        if abs(dx) > abs(dy):
            self.direction = 'entering' if dx > 0 else 'exiting'
        else:
            self.direction = 'vertical_movement'
    
    def get_position(self):
        """üìç ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return self.position
    
    def get_info(self):
        """üìã ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• track"""
        return {
            'id': self.id,
            'position': self.position,
            'bbox': self.bbox,
            'confidence': self.confidence,
            'direction': self.direction,
            'trajectory_length': len(self.trajectory),
            'hits': self.hits,
            'age': self.age
        }


class BehaviorAnalyzer:
    """üß† Behavior Analysis System"""
    
    def __init__(self):
        self.behavior_patterns = {}
        self.direction_analyzer = DirectionAnalyzer()
        self.movement_analyzer = MovementAnalyzer()
    
    def analyze_behaviors(self, tracked_objects):
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°"""
        behaviors = []
        
        for track in tracked_objects:
            behavior = self._analyze_individual_behavior(track)
            behaviors.append(behavior)
        
        return behaviors
    
    def _analyze_individual_behavior(self, track):
        """üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß"""
        return {
            'track_id': track['id'],
            'direction': track['direction'],
            'confidence': track['confidence'],
            'movement_type': self._classify_movement(track),
            'behavior_score': self._calculate_behavior_score(track)
        }
    
    def _classify_movement(self, track):
        """üìä ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"""
        if track['direction'] == 'entering':
            return 'bird_entering'
        elif track['direction'] == 'exiting':
            return 'bird_exiting'
        else:
            return 'bird_tracking'
    
    def _calculate_behavior_score(self, track):
        """üìà ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°"""
        base_score = track['confidence']
        trajectory_bonus = min(track['trajectory_length'] / 10.0, 0.3)
        hits_bonus = min(track['hits'] / 5.0, 0.2)
        
        return min(base_score + trajectory_bonus + hits_bonus, 1.0)
    
    def get_patterns(self):
        """üìã ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°"""
        return self.behavior_patterns.copy()


class AIMemorySystem:
    """üß† AI Memory System"""
    
    def __init__(self, max_memory_size=1000):
        self.max_memory_size = max_memory_size
        self.short_term_memory = deque(maxlen=100)
        self.long_term_memory = deque(maxlen=max_memory_size)
        self.pattern_memory = {}
        
        self.memory_stats = {
            'total_memories': 0,
            'pattern_count': 0,
            'memory_usage': 0
        }
    
    def initialize(self):
        """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Memory"""
        logger.info("üß† ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AI Memory")
    
    def update_memory(self, frame, detections, behaviors):
        """üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Memory"""
        memory_entry = {
            'timestamp': datetime.now().isoformat(),
            'frame_hash': self._calculate_frame_hash(frame),
            'detection_count': len(detections),
            'behavior_summary': self._summarize_behaviors(behaviors)
        }
        
        self.short_term_memory.append(memory_entry)
        
        # Move to long-term if significant
        if self._is_significant_memory(memory_entry):
            self.long_term_memory.append(memory_entry)
            self.memory_stats['total_memories'] += 1
    
    def _calculate_frame_hash(self, frame):
        """üî¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hash ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ü‡∏£‡∏°"""
        try:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            return hash(gray.tobytes()) % 1000000
        except:
            return 0
    
    def _summarize_behaviors(self, behaviors):
        """üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°"""
        summary = {
            'entering_count': len([b for b in behaviors if b.get('direction') == 'entering']),
            'exiting_count': len([b for b in behaviors if b.get('direction') == 'exiting']),
            'tracking_count': len([b for b in behaviors if b.get('direction') not in ['entering', 'exiting']])
        }
        return summary
    
    def _is_significant_memory(self, memory_entry):
        """‚ú® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Memory"""
        behavior_sum = memory_entry['behavior_summary']
        return (behavior_sum['entering_count'] > 0 or 
                behavior_sum['exiting_count'] > 0 or 
                memory_entry['detection_count'] > 5)
    
    def get_usage_stats(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Memory"""
        return {
            'short_term_count': len(self.short_term_memory),
            'long_term_count': len(self.long_term_memory),
            'usage_percent': len(self.long_term_memory) / self.max_memory_size * 100,
            'total_memories': self.memory_stats['total_memories']
        }
    
    def cleanup_old_data(self):
        """üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤"""
        # Clear oldest 25% of short-term memory
        cleanup_count = len(self.short_term_memory) // 4
        for _ in range(cleanup_count):
            if self.short_term_memory:
                self.short_term_memory.popleft()
        
        logger.info(f"üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Memory: ‡∏•‡∏ö {cleanup_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    
    def export_data(self):
        """üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Memory"""
        return {
            'short_term_memory': list(self.short_term_memory),
            'memory_stats': self.memory_stats,
            'export_time': datetime.now().isoformat()
        }


class ContinuousLearning:
    """üìö Continuous Learning System"""
    
    def __init__(self):
        self.learning_data = deque(maxlen=500)
        self.adaptation_rate = 0.1
        self.learning_stats = {
            'total_learning_sessions': 0,
            'adaptations_made': 0,
            'accuracy_improvements': 0
        }
    
    def learn_from_frame(self, frame, detections, behaviors):
        """üìñ ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏ü‡∏£‡∏°"""
        learning_entry = {
            'timestamp': datetime.now().isoformat(),
            'detection_count': len(detections),
            'behavior_count': len(behaviors),
            'frame_quality': self._assess_frame_quality(frame)
        }
        
        self.learning_data.append(learning_entry)
        self.learning_stats['total_learning_sessions'] += 1
        
        # Perform adaptation if enough data
        if len(self.learning_data) % 50 == 0:
            self._perform_adaptation()
    
    def _assess_frame_quality(self, frame):
        """üîç ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏ü‡∏£‡∏°"""
        try:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            return {
                'brightness': np.mean(gray) / 255.0,
                'contrast': np.std(gray) / 255.0
            }
        except:
            return {'brightness': 0.5, 'contrast': 0.5}
    
    def _perform_adaptation(self):
        """üîÑ ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß"""
        # Analyze recent learning data
        recent_data = list(self.learning_data)[-50:]
        
        # Calculate adaptation parameters
        avg_detections = np.mean([d['detection_count'] for d in recent_data])
        
        if avg_detections > 10:
            # Too many detections, increase threshold
            self.adaptation_rate = min(self.adaptation_rate + 0.01, 0.3)
            self.learning_stats['adaptations_made'] += 1
        elif avg_detections < 2:
            # Too few detections, decrease threshold
            self.adaptation_rate = max(self.adaptation_rate - 0.01, 0.05)
            self.learning_stats['adaptations_made'] += 1
    
    def get_progress(self):
        """üìà ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        return {
            'learning_sessions': self.learning_stats['total_learning_sessions'],
            'adaptations_made': self.learning_stats['adaptations_made'],
            'adaptation_rate': self.adaptation_rate,
            'data_points': len(self.learning_data)
        }
    
    def get_insights(self):
        """üí° ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å"""
        if not self.learning_data:
            return {}
        
        recent_data = list(self.learning_data)[-100:]
        return {
            'avg_detections_per_frame': np.mean([d['detection_count'] for d in recent_data]),
            'detection_stability': np.std([d['detection_count'] for d in recent_data]),
            'learning_trend': 'improving' if self.learning_stats['adaptations_made'] > 0 else 'stable'
        }


class DatabaseManager:
    """üíæ Database Management System"""
    
    def __init__(self, db_path="ultimate_ai_agent.db"):
        self.db_path = db_path
        self.connection = None
        self.lock = threading.Lock()
    
    def initialize(self):
        """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
            self._create_tables()
            logger.info(f"üíæ Database ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {self.db_path}")
        except Exception as e:
            logger.error(f"Database initialization failed: {e}")
    
    def _create_tables(self):
        """üìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        cursor = self.connection.cursor()
        
        # Sessions table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS sessions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            agent_id TEXT,
            start_time TEXT,
            end_time TEXT,
            birds_entered INTEGER,
            birds_exited INTEGER,
            total_detections INTEGER,
            session_data TEXT
        )
        ''')
        
        # Detections table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS detections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp TEXT,
            session_id INTEGER,
            detection_type TEXT,
            confidence REAL,
            bbox_x INTEGER,
            bbox_y INTEGER,
            bbox_w INTEGER,
            bbox_h INTEGER,
            FOREIGN KEY (session_id) REFERENCES sessions (id)
        )
        ''')
        
        self.connection.commit()
    
    def save_session(self, session_data):
        """üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Session"""
        with self.lock:
            try:
                cursor = self.connection.cursor()
                cursor.execute('''
                INSERT INTO sessions 
                (agent_id, start_time, end_time, birds_entered, birds_exited, total_detections, session_data)
                VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    session_data.get('agent_id'),
                    session_data.get('session_stats', {}).get('session_start'),
                    session_data.get('session_end'),
                    session_data.get('session_stats', {}).get('birds_entered', 0),
                    session_data.get('session_stats', {}).get('birds_exited', 0),
                    session_data.get('session_stats', {}).get('total_detections', 0),
                    json.dumps(session_data)
                ))
                self.connection.commit()
                logger.info("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Session ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as e:
                logger.error(f"Failed to save session: {e}")
    
    def check_health(self):
        """üè• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM sessions")
            session_count = cursor.fetchone()[0]
            
            return {
                'status': 'healthy',
                'session_count': session_count,
                'db_path': self.db_path
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def get_stats(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT COUNT(*) FROM sessions")
            session_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM detections")
            detection_count = cursor.fetchone()[0]
            
            return {
                'total_sessions': session_count,
                'total_detections': detection_count,
                'db_size': os.path.getsize(self.db_path) if os.path.exists(self.db_path) else 0
            }
        except Exception as e:
            logger.error(f"Failed to get database stats: {e}")
            return {}
    
    def close(self):
        """üö™ ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if self.connection:
            self.connection.close()
            logger.info("üíæ ‡∏õ‡∏¥‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß")


class StatisticsManager:
    """üìä Statistics Management System"""
    
    def __init__(self):
        self.session_stats = {}
        self.historical_stats = deque(maxlen=1000)
        
    def update_stats(self, stats_data):
        """üìà ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        self.session_stats.update(stats_data)
        self.historical_stats.append({
            'timestamp': datetime.now().isoformat(),
            'stats': stats_data.copy()
        })
    
    def get_current_stats(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return self.session_stats.copy()
    
    def get_historical_stats(self):
        """üìà ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        return list(self.historical_stats)


class PerformanceMonitor:
    """‚ö° Performance Monitoring System"""
    
    def __init__(self):
        self.performance_data = deque(maxlen=1000)
        self.is_monitoring = False
        self.start_time = time.time()
        
    def start(self):
        """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        self.is_monitoring = True
        self.start_time = time.time()
        logger.info("‚ö° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    
    def stop(self):
        """üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        self.is_monitoring = False
        logger.info("‚ö° ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    
    def record_frame(self, processing_time, detection_count):
        """üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏ü‡∏£‡∏°"""
        if self.is_monitoring:
            self.performance_data.append({
                'timestamp': time.time(),
                'processing_time': processing_time,
                'detection_count': detection_count,
                'fps': 1.0 / processing_time if processing_time > 0 else 0
            })
    
    def get_stats(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        if not self.performance_data:
            return {}
        
        recent_data = list(self.performance_data)[-100:]
        
        return {
            'avg_processing_time': np.mean([d['processing_time'] for d in recent_data]),
            'avg_fps': np.mean([d['fps'] for d in recent_data]),
            'avg_detections': np.mean([d['detection_count'] for d in recent_data]),
            'total_frames': len(self.performance_data),
            'uptime': time.time() - self.start_time
        }
    
    def get_current_stats(self):
        """üìä ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if not self.performance_data:
            return {}
        
        latest = self.performance_data[-1]
        return {
            'current_fps': latest['fps'],
            'current_processing_time': latest['processing_time'],
            'current_detections': latest['detection_count']
        }
    
    def get_trends(self):
        """üìà ‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        if len(self.performance_data) < 10:
            return {}
        
        recent_fps = [d['fps'] for d in list(self.performance_data)[-10:]]
        return {
            'fps_trend': 'improving' if recent_fps[-1] > recent_fps[0] else 'declining',
            'fps_stability': np.std(recent_fps),
            'performance_score': min(np.mean(recent_fps) / 30.0, 1.0)  # Normalized to 30 FPS
        }


class SystemHealthChecker:
    """üè• System Health Monitoring"""
    
    def __init__(self):
        self.health_status = 'unknown'
        self.last_check = time.time()
        
    def get_status(self):
        """üè• ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"""
        return {
            'status': self.health_status,
            'last_check': self.last_check,
            'check_time': datetime.now().isoformat()
        }


class StreamManager:
    """üìπ Stream Management System"""
    
    def __init__(self):
        self.active_streams = {}
        self.stream_stats = {}
    
    def add_stream(self, stream_id, stream_source):
        """‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Stream"""
        self.active_streams[stream_id] = stream_source
        self.stream_stats[stream_id] = {
            'start_time': datetime.now().isoformat(),
            'frame_count': 0,
            'errors': 0
        }


class FrameProcessor:
    """üñºÔ∏è Frame Processing System"""
    
    def __init__(self):
        self.processing_queue = queue.Queue(maxsize=100)
        self.results_queue = queue.Queue(maxsize=100)
    
    def add_frame(self, frame):
        """‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        if not self.processing_queue.full():
            self.processing_queue.put(frame)
            return True
        return False
    
    def get_result(self):
        """üì§ ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        if not self.results_queue.empty():
            return self.results_queue.get()
        return None


class ResultsManager:
    """üìã Results Management System"""
    
    def __init__(self):
        self.latest_results = {}
        self.results_history = deque(maxlen=100)
    
    def update_results(self, results):
        """üìù ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        self.latest_results = results
        self.results_history.append({
            'timestamp': datetime.now().isoformat(),
            'results': results
        })
    
    def get_latest_results(self):
        """üì§ ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        return self.latest_results.copy()


class APICommunicator:
    """üåê API Communication System"""
    
    def __init__(self):
        self.api_endpoints = {}
        self.communication_stats = {
            'successful_requests': 0,
            'failed_requests': 0
        }
    
    def register_endpoint(self, name, url):
        """üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô API Endpoint"""
        self.api_endpoints[name] = url
    
    def send_data(self, endpoint_name, data):
        """üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API"""
        # Implementation for sending data to external APIs
        self.communication_stats['successful_requests'] += 1
        return True


# Supporting Classes
class ConfidenceCalibrator:
    """üéØ Confidence Calibration System"""
    
    def __init__(self):
        self.calibration_data = deque(maxlen=1000)
    
    def adjust_confidence(self, detections):
        """üîß ‡∏õ‡∏£‡∏±‡∏ö Confidence Score"""
        for detection in detections:
            original_confidence = detection['confidence']
            # Apply calibration logic
            detection['confidence'] = min(original_confidence * 1.1, 1.0)
        return detections


class PatternRecognizer:
    """üîç Pattern Recognition System"""
    
    def __init__(self):
        self.patterns = {}
    
    def filter_by_patterns(self, detections):
        """üîç ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
        # Apply pattern-based filtering
        return detections


class FeatureExtractor:
    """üî¨ Feature Extraction System"""
    
    def __init__(self):
        self.features = {}
    
    def extract_features(self, frame, detection):
        """üî¨ ‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞"""
        return {}


class DirectionAnalyzer:
    """üß≠ Direction Analysis System"""
    
    def __init__(self):
        self.direction_history = deque(maxlen=100)
    
    def analyze_direction(self, trajectory):
        """üß≠ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á"""
        if len(trajectory) < 2:
            return 'unknown'
        
        start = trajectory[0]
        end = trajectory[-1]
        
        dx = end[0] - start[0]
        
        if abs(dx) > 50:  # Significant horizontal movement
            return 'entering' if dx > 0 else 'exiting'
        else:
            return 'tracking'


class MovementAnalyzer:
    """üèÉ Movement Analysis System"""
    
    def __init__(self):
        self.movement_patterns = {}
    
    def analyze_movement(self, track):
        """üèÉ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"""
        return {
            'speed': self._calculate_speed(track),
            'smoothness': self._calculate_smoothness(track)
        }
    
    def _calculate_speed(self, track):
        """‚ö° ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"""
        return 0.5  # Placeholder
    
    def _calculate_smoothness(self, track):
        """üåä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô"""
        return 0.7  # Placeholder


# ============================================================================
# LEGACY SUPPORT CLASSES (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
# ============================================================================

class V5_UltimatePrecisionSwallowAI:
    """üîÑ Legacy Support Class for V5 API Compatibility"""
    
    def __init__(self, video_type="mixed"):
        self.agent = UltimateSwallowAIAgent(video_type)
        self.video_type = video_type
        
    def detect_birds_realtime(self, frame, **kwargs):
        """üê¶ Legacy method for compatibility"""
        return self.agent.detect_birds_realtime(frame, **kwargs)
    
    def get_statistics(self):
        """üìä Legacy statistics method"""
        return self.agent.get_bird_statistics()


class EnhancedMasterBirdDetector:
    """üîÑ Legacy Support Class for Enhanced Master Detector"""
    
    def __init__(self, video_type="mixed", roi_zones=None):
        self.agent = UltimateSwallowAIAgent(video_type)
        self.video_type = video_type
        self.roi_zones = roi_zones
        
    def detect_birds(self, frame):
        """üê¶ Legacy detection method"""
        results = self.agent.detect_birds_realtime(frame)
        if results:
            return results[1]  # Return detections only
        return []
    
    def detect_smart(self, frame, **kwargs):
        """üß† Legacy smart detection"""
        return self.detect_birds(frame)


# ============================================================================
# MAIN EXECUTION AND TESTING
# ============================================================================

def create_ai_agent(video_type="mixed", config_path=None):
    """üè≠ Factory function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á AI Agent"""
    logger.info(f"üè≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á AI Agent ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {video_type}")
    return UltimateSwallowAIAgent(video_type, config_path)


def test_ai_agent():
    """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Agent"""
    logger.info("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Agent")
    
    # Create agent
    agent = create_ai_agent("mixed")
    
    # Start agent
    agent.start_agent()
    
    # Test with dummy frame
    dummy_frame = np.zeros((480, 640, 3), dtype=np.uint8)
    results = agent.process_frame_agent(dummy_frame)
    
    # Get statistics
    stats = agent.get_realtime_stats()
    analytics = agent.get_detailed_analytics()
    
    logger.info(f"üìä Test Results: {len(results.get('detections', []))} detections")
    logger.info(f"üìà Performance: {stats.get('performance', {}).get('avg_fps', 0):.2f} FPS")
    
    # Stop agent
    agent.stop_agent()
    
    return True


def main():
    """üöÄ Main execution function"""
    logger.info("üöÄ ULTIMATE SWALLOW AI AGENT V5 - PRODUCTION READY")
    logger.info("=" * 80)
    logger.info("‚úÖ Core Features:")
    logger.info("   ü§ñ AI Agent with Self-learning")
    logger.info("   üéØ Bird Detection & Counting")
    logger.info("   üìπ Live Stream Integration")
    logger.info("   üìä Real-time Analytics")
    logger.info("   üíæ Database Management")
    logger.info("   üåê Web API Integration")
    logger.info("=" * 80)
    
    # Run tests
    try:
        if test_ai_agent():
            logger.info("‚úÖ All tests passed!")
        else:
            logger.error("‚ùå Tests failed!")
    except Exception as e:
        logger.error(f"‚ùå Test error: {e}")
    
    logger.info("üéØ AI Agent ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    logger.info("üìö Usage:")
    logger.info("   agent = create_ai_agent('mixed')")
    logger.info("   agent.start_agent()")
    logger.info("   results = agent.process_frame_agent(frame)")
    logger.info("   stats = agent.get_realtime_stats()")


if __name__ == "__main__":
    main()
