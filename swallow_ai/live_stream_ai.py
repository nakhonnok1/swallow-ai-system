"""
üî¥ AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£ ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
"""

import cv2
import cv2
import numpy as np
import time
import json
import threading
import logging
import sqlite3
import os
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
from collections import deque
import gc
import psutil

# ‡πÄ‡∏ã‡πá‡∏ï‡∏≠‡∏±‡∏û logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('live_stream.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MemoryEfficientDetector:
    """üî¨ ‡∏ï‡∏±‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
    
    def __init__(self):
        # ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
        self.bg_subtractor = cv2.createBackgroundSubtractorMOG2(
            detectShadows=True,
            varThreshold=4,  # ‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÄ‡∏à‡πÄ‡∏ô‡∏ï‡∏¥‡∏Å
            history=50       # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        )
        
        self.min_contour_area = 3     # ‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÄ‡∏à‡πÄ‡∏ô‡∏ï‡∏¥‡∏Å
        self.max_contour_area = 1088  # ‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÄ‡∏à‡πÄ‡∏ô‡∏ï‡∏¥‡∏Å
        
        # ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        self.frame_skip = 2  # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏∏‡∏Å 2 ‡πÄ‡∏ü‡∏£‡∏°
        self.frame_count = 0
        
    def detect_birds(self, frame: np.ndarray) -> List[Dict]:
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£"""
        
        self.frame_count += 1
        
        # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
        if self.frame_count % self.frame_skip != 0:
            return []
        
        # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        height, width = frame.shape[:2]
        if width > 640:
            scale = 640 / width
            new_width = 640
            new_height = int(height * scale)
            frame = cv2.resize(frame, (new_width, new_height))
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏ü‡∏£‡∏°
        frame_blur = cv2.GaussianBlur(frame, (3, 3), 0)
        
        # Background subtraction
        fg_mask = self.bg_subtractor.apply(frame_blur)
        
        # Morphological operations
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
        fg_mask = cv2.morphologyEx(fg_mask, cv2.MORPH_CLOSE, kernel)
        fg_mask = cv2.morphologyEx(fg_mask, cv2.MORPH_OPEN, kernel)
        
        # ‡∏´‡∏≤ contours
        contours, _ = cv2.findContours(fg_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        detections = []
        for contour in contours:
            area = cv2.contourArea(contour)
            
            if self.min_contour_area <= area <= self.max_contour_area:
                x, y, w, h = cv2.boundingRect(contour)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏£‡∏¥‡∏á
                if width > 640:
                    x = int(x / scale)
                    y = int(y / scale)
                    w = int(w / scale)
                    h = int(h / scale)
                    area = area / (scale * scale)
                
                center_x = x + w // 2
                center_y = y + h // 2
                
                detections.append({
                    'bbox': (x, y, w, h),
                    'center': (center_x, center_y),
                    'area': area,
                    'confidence': min(1.0, area / 100.0)
                })
        
        return detections

class LightweightTracker:
    """üéØ ‡∏ï‡∏±‡∏ß‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤"""
    
    def __init__(self):
        self.tracks = {}
        self.next_id = 1
        self.max_distance = 80
        self.max_age = 30  # ‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        self.max_path_length = 20  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        
    def update_tracks(self, detections: List[Dict]) -> List[Dict]:
        """üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
        
        if not detections:
            # ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° +1
            for track in self.tracks.values():
                track['age'] += 1
            
            # ‡∏•‡∏ö tracks ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            self.tracks = {tid: track for tid, track in self.tracks.items() 
                          if track['age'] < self.max_age}
            
            return list(self.tracks.values())
        
        # ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏±‡∏ö tracks
        unmatched_detections = []
        
        for detection in detections:
            detection_center = detection['center']
            best_track_id = None
            best_distance = float('inf')
            
            for track_id, track in self.tracks.items():
                if track['age'] > 5:  # ‡∏Ç‡πâ‡∏≤‡∏° tracks ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                    continue
                    
                track_center = track['center']
                distance = np.sqrt(
                    (detection_center[0] - track_center[0])**2 +
                    (detection_center[1] - track_center[1])**2
                )
                
                if distance < best_distance and distance < self.max_distance:
                    best_distance = distance
                    best_track_id = track_id
            
            if best_track_id is not None:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï track ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                track = self.tracks[best_track_id]
                track['center'] = detection_center
                track['bbox'] = detection['bbox']
                track['age'] = 0
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
                track['path_history'].append(detection_center)
                if len(track['path_history']) > self.max_path_length:
                    track['path_history'].pop(0)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏£‡∏ß‡∏°
                if len(track['path_history']) > 1:
                    total_movement = 0
                    for i in range(1, len(track['path_history'])):
                        movement = np.sqrt(
                            (track['path_history'][i][0] - track['path_history'][i-1][0])**2 +
                            (track['path_history'][i][1] - track['path_history'][i-1][1])**2
                        )
                        total_movement += movement
                    track['total_movement'] = total_movement
                else:
                    track['total_movement'] = 0
            else:
                unmatched_detections.append(detection)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á tracks ‡πÉ‡∏´‡∏°‡πà
        for detection in unmatched_detections:
            self.tracks[self.next_id] = {
                'id': self.next_id,
                'center': detection['center'],
                'bbox': detection['bbox'],
                'path_history': [detection['center']],
                'age': 0,
                'total_movement': 0,
                'area': detection['area']
            }
            self.next_id += 1
        
        # ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° +1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tracks ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        for track in self.tracks.values():
            if track['age'] > 0:
                track['age'] += 1
        
        # ‡∏•‡∏ö tracks ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        self.tracks = {tid: track for tid, track in self.tracks.items() 
                      if track['age'] < self.max_age}
        
        return list(self.tracks.values())

class StreamingEntranceAnalyzer:
    """üö™ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏°"""
    
    def __init__(self, entrance_zone: Dict):
        self.entrance_zone = entrance_zone
        self.detection_radius = 94  # ‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡πÄ‡∏à‡πÄ‡∏ô‡∏ï‡∏¥‡∏Å
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self.daily_entries = 0
        self.daily_exits = 0
        self.hourly_stats = deque(maxlen=24)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        
        # ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.init_database()
        
        # ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        self.counted_entries = set()
        self.counted_exits = set()
        self.last_cleanup = time.time()
        
    def init_database(self):
        """üóÑÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        self.conn = sqlite3.connect('live_stream_data.db', check_same_thread=False)
        cursor = self.conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bird_events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                event_type TEXT NOT NULL,
                track_id INTEGER,
                confidence REAL,
                position_x INTEGER,
                position_y INTEGER
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS hourly_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                hour DATETIME,
                entries INTEGER DEFAULT 0,
                exits INTEGER DEFAULT 0
            )
        ''')
        
        self.conn.commit()
    
    def analyze_tracks(self, tracks: List[Dict]) -> Dict:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå tracks"""
        
        if not self.entrance_zone:
            return {'new_entries': 0, 'new_exits': 0}
        
        new_entries = 0
        new_exits = 0
        entrance_center = (self.entrance_zone['center_x'], self.entrance_zone['center_y'])
        
        for track in tracks:
            track_id = track['id']
            track_center = track['center']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
            distance = np.sqrt(
                (track_center[0] - entrance_center[0])**2 +
                (track_center[1] - entrance_center[1])**2
            )
            
            if distance <= self.detection_radius:
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
                direction = self.analyze_direction(track, entrance_center)
                
                if direction == 'entering' and track_id not in self.counted_entries:
                    if self.is_valid_entry(track):
                        self.counted_entries.add(track_id)
                        new_entries += 1
                        self.daily_entries += 1
                        
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        self.log_event('entry', track_id, track_center, 0.8)
                        
                elif direction == 'exiting' and track_id not in self.counted_exits:
                    if self.is_valid_exit(track):
                        self.counted_exits.add(track_id)
                        new_exits += 1
                        self.daily_exits += 1
                        
                        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        self.log_event('exit', track_id, track_center, 0.8)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        current_time = time.time()
        if current_time - self.last_cleanup > 300:  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            self.cleanup_old_data()
            self.last_cleanup = current_time
        
        return {
            'new_entries': new_entries,
            'new_exits': new_exits,
            'daily_entries': self.daily_entries,
            'daily_exits': self.daily_exits
        }
    
    def analyze_direction(self, track: Dict, entrance_center: Tuple[int, int]) -> str:
        """üß≠ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á"""
        
        path = track['path_history']
        if len(path) < 3:
            return 'unknown'
        
        # ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 3 ‡∏à‡∏∏‡∏î
        recent_points = path[-3:]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
        distances = []
        for point in recent_points:
            distance = np.sqrt(
                (point[0] - entrance_center[0])**2 +
                (point[1] - entrance_center[1])**2
            )
            distances.append(distance)
        
        # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏•‡∏î‡∏•‡∏á = ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
        if distances[0] > distances[-1]:
            return 'entering'
        # ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô = ‡∏≠‡∏≠‡∏Å‡∏´‡πà‡∏≤‡∏á = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å
        elif distances[0] < distances[-1]:
            return 'exiting'
        else:
            return 'unknown'
    
    def is_valid_entry(self, track: Dict) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        return (track['total_movement'] > 5.0 and 
                len(track['path_history']) >= 3 and
                track['area'] >= 3)
    
    def is_valid_exit(self, track: Dict) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        return (track['total_movement'] > 5.0 and 
                len(track['path_history']) >= 3 and
                track['area'] >= 3)
    
    def log_event(self, event_type: str, track_id: int, position: Tuple[int, int], confidence: float):
        """üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå"""
        try:
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT INTO bird_events (event_type, track_id, confidence, position_x, position_y)
                VALUES (?, ?, ?, ?, ?)
            ''', (event_type, track_id, confidence, position[0], position[1]))
            self.conn.commit()
        except Exception as e:
            logger.error(f"Database error: {e}")
    
    def cleanup_old_data(self):
        """üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤"""
        # ‡∏•‡πâ‡∏≤‡∏á counted sets ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        if len(self.counted_entries) > 1000:
            self.counted_entries.clear()
        if len(self.counted_exits) > 1000:
            self.counted_exits.clear()
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 7 ‡∏ß‡∏±‡∏ô
        try:
            cursor = self.conn.cursor()
            week_ago = datetime.now() - timedelta(days=7)
            cursor.execute('DELETE FROM bird_events WHERE timestamp < ?', (week_ago,))
            self.conn.commit()
        except Exception as e:
            logger.error(f"Cleanup error: {e}")

class LiveStreamAI:
    """üî¥ AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"""
    
    def __init__(self, stream_source: str = 0, entrance_zone: Dict = None):
        self.stream_source = stream_source
        self.detector = MemoryEfficientDetector()
        self.tracker = LightweightTracker()
        self.entrance_analyzer = StreamingEntranceAnalyzer(entrance_zone or self.load_entrance_config())
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.frame_count = 0
        self.fps_counter = deque(maxlen=30)
        self.start_time = time.time()
        self.last_fps_update = time.time()
        
        # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        self.memory_check_interval = 300  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        self.last_memory_check = time.time()
        
        # ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        self.running = False
        
        logger.info("üî¥ Live Stream AI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    
    def load_entrance_config(self) -> Dict:
        """üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤"""
        try:
            with open('entrance_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
                
            if 'entrance_zones' in config and config['entrance_zones']:
                first_zone = config['entrance_zones'][0]
                return {
                    'center_x': first_zone[0],
                    'center_y': first_zone[1],
                    'width': 100,
                    'height': 100,
                    'x': first_zone[0] - 50,
                    'y': first_zone[1] - 50
                }
        except Exception as e:
            logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤: {e}")
        
        return {
            'center_x': 816,
            'center_y': 297,
            'width': 100,
            'height': 100,
            'x': 766,
            'y': 247
        }
    
    def start_stream(self):
        """‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏ï‡∏£‡∏µ‡∏°"""
        
        logger.info(f"üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {self.stream_source}")
        
        cap = cv2.VideoCapture(self.stream_source)
        if not cap.isOpened():
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {self.stream_source}")
            return
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ buffer ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πá‡∏Å
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        self.running = True
        logger.info("üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        
        try:
            while self.running:
                ret, frame = cap.read()
                if not ret:
                    logger.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏° - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
                    time.sleep(1)
                    continue
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°
                self.process_frame(frame)
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
                self.check_memory_usage()
                
                # ‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ CPU
                time.sleep(0.01)  # 10ms
                
        except KeyboardInterrupt:
            logger.info("üõë ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏´‡∏¢‡∏∏‡∏î")
        except Exception as e:
            logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        finally:
            cap.release()
            self.cleanup()
            logger.info("üèÅ ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    
    def process_frame(self, frame: np.ndarray):
        """üé¨ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏ü‡∏£‡∏°"""
        
        self.frame_count += 1
        frame_start_time = time.time()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
        detections = self.detector.detect_birds(frame)
        tracks = self.tracker.update_tracks(detections)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
        entrance_results = self.entrance_analyzer.analyze_tracks(tracks)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS
        frame_time = time.time() - frame_start_time
        self.fps_counter.append(frame_time)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        if time.time() - self.last_fps_update > 30:
            self.print_stats(entrance_results)
            self.last_fps_update = time.time()
    
    def check_memory_usage(self):
        """üíæ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥"""
        
        current_time = time.time()
        if current_time - self.last_memory_check < self.memory_check_interval:
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
        process = psutil.Process()
        memory_percent = process.memory_percent()
        
        if memory_percent > 80:  # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 80%
            logger.warning(f"‚ö†Ô∏è ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ï‡πá‡∏°: {memory_percent:.1f}%")
            
            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö garbage collection
            gc.collect()
            
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
            self.tracker.tracks.clear()
            self.entrance_analyzer.cleanup_old_data()
            
            logger.info("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à")
        
        self.last_memory_check = current_time
    
    def print_stats(self, entrance_results: Dict):
        """üìä ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        
        uptime = time.time() - self.start_time
        avg_fps = len(self.fps_counter) / sum(self.fps_counter) if self.fps_counter else 0
        
        logger.info(f"""
üî¥ === ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ===
‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime/3600:.1f} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
üé¨ ‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {self.frame_count:,}
‚ö° FPS ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_fps:.1f}
üê¶ ‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {entrance_results['daily_entries']}
üê¶ ‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {entrance_results['daily_exits']}
üéØ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á: ‚úÖ
        """)
    
    def stop_stream(self):
        """‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏ï‡∏£‡∏µ‡∏°"""
        self.running = False
    
    def cleanup(self):
        """üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if hasattr(self.entrance_analyzer, 'conn'):
            self.entrance_analyzer.conn.close()
        gc.collect()

def main():
    """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
    
    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°
    STREAM_SOURCES = {
        '0': 0,  # ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
        'rtsp': 'rtsp://ainok1:ainok123@192.168.1.100:554/stream1',  # ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP
        'file': 'training_videos/mixed_behavior/mixed_001.mp4.mp4'  # ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    }
    
    print("üî¥ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    print("=" * 50)
    print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏™‡∏ï‡∏£‡∏µ‡∏°:")
    print("0 - ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°")
    print("1 - ‡∏Å‡∏•‡πâ‡∏≠‡∏á IP (RTSP)")
    print("2 - ‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (0-2): ").strip()
    
    if choice == '0':
        stream_source = 0
    elif choice == '1':
        stream_source = input("‡πÉ‡∏™‡πà RTSP URL: ").strip() or STREAM_SOURCES['rtsp']
    elif choice == '2':
        stream_source = STREAM_SOURCES['file']
    else:
        stream_source = 0
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° AI
    ai = LiveStreamAI(stream_source)
    
    try:
        ai.start_stream()
    except KeyboardInterrupt:
        ai.stop_stream()

if __name__ == "__main__":
    main()
