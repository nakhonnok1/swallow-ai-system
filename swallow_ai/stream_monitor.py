"""
üìä ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
"""

import sqlite3
import json
import time
import smtplib
import requests
from datetime import datetime, timedelta
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from typing import Dict, List, Tuple
import pandas as pd

class StreamMonitor:
    """üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ï‡∏£‡∏µ‡∏°"""
    
    def __init__(self, db_path: str = 'live_stream_data.db'):
        self.db_path = db_path
        self.load_config()
        
    def load_config(self):
        """üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        try:
            with open('live_stream_config.json', 'r', encoding='utf-8') as f:
                self.config = json.load(f)
        except:
            self.config = {"notification_settings": {"enable_alerts": False}}
    
    def get_hourly_stats(self, hours: int = 24) -> List[Dict]:
        """üìà ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"""
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        start_time = datetime.now() - timedelta(hours=hours)
        
        cursor.execute('''
            SELECT 
                strftime('%Y-%m-%d %H:00:00', timestamp) as hour,
                COUNT(CASE WHEN event_type = 'entry' THEN 1 END) as entries,
                COUNT(CASE WHEN event_type = 'exit' THEN 1 END) as exits
            FROM bird_events 
            WHERE timestamp >= ?
            GROUP BY strftime('%Y-%m-%d %H:00:00', timestamp)
            ORDER BY hour
        ''', (start_time,))
        
        results = []
        for row in cursor.fetchall():
            results.append({
                'hour': row[0],
                'entries': row[1],
                'exits': row[2]
            })
        
        conn.close()
        return results
    
    def get_daily_summary(self) -> Dict:
        """üìÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô"""
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        today = datetime.now().date()
        
        cursor.execute('''
            SELECT 
                COUNT(CASE WHEN event_type = 'entry' THEN 1 END) as entries,
                COUNT(CASE WHEN event_type = 'exit' THEN 1 END) as exits,
                COUNT(*) as total_events
            FROM bird_events 
            WHERE date(timestamp) = ?
        ''', (today,))
        
        row = cursor.fetchone()
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
        week_ago = today - timedelta(days=7)
        cursor.execute('''
            SELECT 
                COUNT(CASE WHEN event_type = 'entry' THEN 1 END) as entries,
                COUNT(CASE WHEN event_type = 'exit' THEN 1 END) as exits
            FROM bird_events 
            WHERE date(timestamp) >= ?
        ''', (week_ago,))
        
        week_row = cursor.fetchone()
        
        conn.close()
        
        return {
            'today': {
                'entries': row[0] if row else 0,
                'exits': row[1] if row else 0,
                'total_events': row[2] if row else 0
            },
            'this_week': {
                'entries': week_row[0] if week_row else 0,
                'exits': week_row[1] if week_row else 0
            }
        }
    
    def generate_chart(self, hours: int = 24, save_path: str = 'bird_stats.png'):
        """üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        
        stats = self.get_hourly_stats(hours)
        
        if not stats:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            return
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        hours_list = [datetime.strptime(s['hour'], '%Y-%m-%d %H:%M:%S') for s in stats]
        entries = [s['entries'] for s in stats]
        exits = [s['exits'] for s in stats]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig, ax = plt.subplots(figsize=(12, 6))
        
        ax.plot(hours_list, entries, 'g-', label='‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤', linewidth=2, marker='o')
        ax.plot(hours_list, exits, 'r-', label='‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å', linewidth=2, marker='s')
        
        ax.set_xlabel('‡πÄ‡∏ß‡∏•‡∏≤')
        ax.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏Å')
        ax.set_title(f'‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô ({hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡∏ô X
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
        ax.xaxis.set_major_locator(mdates.HourLocator(interval=2))
        plt.xticks(rotation=45)
        
        plt.tight_layout()
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        print(f"üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà: {save_path}")
        plt.close()
    
    def check_anomalies(self) -> List[Dict]:
        """üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥"""
        
        anomalies = []
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        recent_stats = self.get_hourly_stats(1)
        
        if recent_stats:
            latest = recent_stats[-1]
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
            if latest['entries'] > 50:
                anomalies.append({
                    'type': 'high_entry',
                    'message': f"üö® ‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {latest['entries']} ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                    'value': latest['entries'],
                    'timestamp': latest['hour']
                })
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
            if latest['exits'] > 20:
                anomalies.append({
                    'type': 'high_exit',
                    'message': f"‚ö†Ô∏è ‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {latest['exits']} ‡∏ï‡∏±‡∏ß‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                    'value': latest['exits'],
                    'timestamp': latest['hour']
                })
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å)
        no_activity_stats = self.get_hourly_stats(3)
        if no_activity_stats:
            total_activity = sum(s['entries'] + s['exits'] for s in no_activity_stats)
            if total_activity == 0:
                anomalies.append({
                    'type': 'no_activity',
                    'message': "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
                    'value': 0,
                    'timestamp': datetime.now().isoformat()
                })
        
        return anomalies
    
    def send_alert(self, message: str):
        """üìß ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        
        if not self.config.get('notification_settings', {}).get('enable_alerts', False):
            return
        
        # Webhook
        webhook_url = self.config.get('notification_settings', {}).get('webhook_url', '')
        if webhook_url:
            try:
                payload = {
                    'text': f"üê¶ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô: {message}",
                    'timestamp': datetime.now().isoformat()
                }
                requests.post(webhook_url, json=payload, timeout=10)
                print(f"üì§ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Webhook: {message}")
            except Exception as e:
                print(f"‚ùå ‡∏™‡πà‡∏á Webhook ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        
        # Email (‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ)
        if self.config.get('notification_settings', {}).get('email_notifications', False):
            self.send_email_alert(message)
    
    def send_email_alert(self, message: str):
        """üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å)
            smtp_server = "smtp.gmail.com"
            smtp_port = 587
            sender_email = "your_email@gmail.com"
            sender_password = "your_app_password"
            receiver_email = "alert_receiver@gmail.com"
            
            msg = MIMEMultipart()
            msg['From'] = sender_email
            msg['To'] = receiver_email
            msg['Subject'] = "üê¶ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô"
            
            body = f"""
‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {message}

‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
{self.get_daily_summary()}
            """
            
            msg.attach(MIMEText(body, 'plain', 'utf-8'))
            
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)
            server.quit()
            
            print(f"üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {message}")
            
        except Exception as e:
            print(f"‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    
    def run_monitoring(self, check_interval: int = 300):
        """üîÑ ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        
        print("üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        print(f"üîÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å {check_interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        while True:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
                anomalies = self.check_anomalies()
                
                for anomaly in anomalies:
                    print(f"üö® {anomaly['message']}")
                    self.send_alert(anomaly['message'])
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏∏‡∏Å 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                current_time = datetime.now()
                if current_time.minute == 0:  # ‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏£‡∏á
                    self.generate_chart()
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                summary = self.get_daily_summary()
                print(f"""
üìä === ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡πÄ‡∏Ç‡πâ‡∏≤ {summary['today']['entries']} ‡∏≠‡∏≠‡∏Å {summary['today']['exits']}
üìÖ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ: ‡πÄ‡∏Ç‡πâ‡∏≤ {summary['this_week']['entries']} ‡∏≠‡∏≠‡∏Å {summary['this_week']['exits']}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {current_time.strftime('%Y-%m-%d %H:%M:%S')}
                """)
                
                time.sleep(check_interval)
                
            except KeyboardInterrupt:
                print("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
                break
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°: {e}")
                time.sleep(10)

def main():
    """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"""
    
    monitor = StreamMonitor()
    
    print("üìä ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏ï‡∏£‡∏µ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
    print("=" * 50)
    print("1 - ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á")
    print("2 - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
    print("3 - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    print("4 - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
    
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (1-4): ").strip()
    
    if choice == '1':
        monitor.run_monitoring()
    elif choice == '2':
        hours = int(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (24): ") or "24")
        monitor.generate_chart(hours)
    elif choice == '3':
        summary = monitor.get_daily_summary()
        print(f"""
üìä === ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ===
üìÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:
   üê¶ ‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤: {summary['today']['entries']} ‡∏ï‡∏±‡∏ß
   üê¶ ‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å: {summary['today']['exits']} ‡∏ï‡∏±‡∏ß
   üìä ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary['today']['total_events']}

üìÖ ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ:
   üê¶ ‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤: {summary['this_week']['entries']} ‡∏ï‡∏±‡∏ß
   üê¶ ‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å: {summary['this_week']['exits']} ‡∏ï‡∏±‡∏ß
        """)
    elif choice == '4':
        anomalies = monitor.check_anomalies()
        if anomalies:
            print("üö® ‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥:")
            for anomaly in anomalies:
                print(f"   {anomaly['message']}")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")

if __name__ == "__main__":
    main()
