#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ENHANCED IP CAMERA RTSP CONNECTOR V2 - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ‡∏û‡∏£‡πâ‡∏≠‡∏° Authentication
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö RTSP, HTTP, ‡πÅ‡∏•‡∏∞ USB Camera ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô

‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞:
   üéØ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö IP Camera ‡∏û‡∏£‡πâ‡∏≠‡∏° Username/Password
   üîÑ Auto-reconnect ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
   üì° RTSP/HTTP Stream ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
   üé• Live Preview ‡∏ú‡πà‡∏≤‡∏ô Web Interface
   üí™ ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢

üéâ Ready for Production!
"""

import cv2
import os
import time
import threading
import numpy as np
from flask import Flask, Response, render_template_string
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EnhancedIPCameraConnector:
    """üé• ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á IP ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏° Authentication"""
    
    def __init__(self):
        self.cap = None
        self.is_connected = False
        self.current_frame = None
        self.frame_lock = threading.Lock()
        self.capture_thread = None
        self.running = False
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ RTSP
        self.rtsp_configs = {
            'default': {
                'url': "rtsp://ainok1:ainok123@192.168.1.100:554/stream1",
                'username': 'ainok1',
                'password': 'ainok123',
                'ip': '192.168.1.100',
                'port': 554,
                'stream_path': '/stream1'
            }
        }
        
    def build_rtsp_url(self, config):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á RTSP URL ‡∏û‡∏£‡πâ‡∏≠‡∏° Authentication"""
        username = config['username']
        password = config['password']
        ip = config['ip']
        port = config['port']
        stream_path = config['stream_path']
        
        # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RTSP URL
        urls = [
            f"rtsp://{username}:{password}@{ip}:{port}{stream_path}",
            f"rtsp://{username}:{password}@{ip}:{port}/",
            f"rtsp://{username}:{password}@{ip}{stream_path}",
            f"rtsp://{ip}:{port}{stream_path}",
        ]
        
        return urls
    
    def setup_opencv_rtsp(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenCV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTSP"""
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ FFMPEG options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RTSP
        os.environ['OPENCV_FFMPEG_CAPTURE_OPTIONS'] = (
            'rtsp_transport;tcp;'
            'timeout;10000000;'
            'reconnect;1;'
            'reconnect_at_eof;1;'
            'reconnect_streamed;1;'
            'reconnect_delay_max;2;'
            'fflags;nobuffer;'
            'flags;low_delay;'
            'strict;experimental'
        )
    
    def connect_camera(self, config_name='default'):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á IP"""
        if config_name not in self.rtsp_configs:
            logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {config_name}")
            return False
        
        config = self.rtsp_configs[config_name]
        logger.info(f"üé• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á IP: {config['ip']}")
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenCV
        self.setup_opencv_rtsp()
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ URL
        urls = self.build_rtsp_url(config)
        
        for i, url in enumerate(urls):
            try:
                logger.info(f"üîÑ ‡∏•‡∏≠‡∏á URL {i+1}/{len(urls)}: {url.replace(config['password'], '***')}")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á VideoCapture
                self.cap = cv2.VideoCapture(url, cv2.CAP_FFMPEG)
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ buffer
                self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                self.cap.set(cv2.CAP_PROP_FPS, 25)
                
                if self.cap.isOpened():
                    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°
                    ret, frame = self.cap.read()
                    if ret and frame is not None:
                        logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ü‡∏£‡∏°: {frame.shape}")
                        
                        with self.frame_lock:
                            self.current_frame = frame
                        
                        self.is_connected = True
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                        self.cap.release()
                else:
                    logger.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î VideoCapture")
                    
            except Exception as e:
                logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î URL {i+1}: {e}")
                if self.cap:
                    self.cap.release()
                    self.cap = None
        
        logger.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ URL ‡πÉ‡∏î‡πÜ")
        return False
    
    def start_capture(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        if not self.is_connected:
            logger.error("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á")
            return False
        
        self.running = True
        self.capture_thread = threading.Thread(target=self._capture_loop, daemon=True)
        self.capture_thread.start()
        logger.info("üé¨ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á")
        return True
    
    def _capture_loop(self):
        """‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û"""
        consecutive_failures = 0
        max_failures = 30
        
        while self.running:
            try:
                if self.cap and self.cap.isOpened():
                    ret, frame = self.cap.read()
                    
                    if ret and frame is not None:
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        with self.frame_lock:
                            self.current_frame = frame.copy()
                        
                        consecutive_failures = 0
                        time.sleep(0.033)  # ~30 FPS
                        
                    else:
                        consecutive_failures += 1
                        logger.warning(f"‚ö†Ô∏è ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ({consecutive_failures}/{max_failures})")
                        
                        if consecutive_failures >= max_failures:
                            logger.error("‚ùå ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
                            self._reconnect()
                            consecutive_failures = 0
                        
                        time.sleep(0.1)
                else:
                    logger.error("‚ùå ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà")
                    self._reconnect()
                    time.sleep(1)
                    
            except Exception as e:
                logger.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û: {e}")
                time.sleep(1)
    
    def _reconnect(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà"""
        logger.info("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...")
        
        if self.cap:
            self.cap.release()
            self.cap = None
        
        self.is_connected = False
        time.sleep(2)
        
        if self.connect_camera():
            logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            logger.error("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
    
    def get_current_frame(self):
        """‡∏£‡∏±‡∏ö‡πÄ‡∏ü‡∏£‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        with self.frame_lock:
            if self.current_frame is not None:
                return self.current_frame.copy()
        return None
    
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û")
        self.running = False
        
        if self.capture_thread and self.capture_thread.is_alive():
            self.capture_thread.join(timeout=5)
        
        if self.cap:
            self.cap.release()
            self.cap = None
        
        self.is_connected = False

# Flask App ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
app = Flask(__name__)
camera_connector = EnhancedIPCameraConnector()

def generate_frames():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö streaming"""
    while True:
        frame = camera_connector.get_current_frame()
        
        if frame is not None:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            status_text = f"Connected: {camera_connector.is_connected} | Time: {time.strftime('%H:%M:%S')}"
            cv2.putText(frame, status_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô JPEG
            ret, buffer = cv2.imencode('.jpg', frame)
            if ret:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            error_frame = np.zeros((480, 640, 3), dtype=np.uint8)
            status = "Connecting..." if not camera_connector.is_connected else "No Frame"
            cv2.putText(error_frame, status, (200, 240), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
            
            ret, buffer = cv2.imencode('.jpg', error_frame)
            if ret:
                yield (b'--frame\r\n'
                       b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
        
        time.sleep(0.033)  # ~30 FPS

@app.route('/')
def index():
    """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"""
    return render_template_string('''
    <!DOCTYPE html>
    <html>
    <head>
        <title>üé• IP Camera RTSP Stream Test</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial; margin: 20px; background: #f0f0f0; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
            .connected { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .disconnected { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
            .video-container { text-align: center; margin: 20px 0; }
            .controls { margin: 20px 0; }
            .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 5px; cursor: pointer; }
            .btn-primary { background: #007bff; color: white; }
            .btn-success { background: #28a745; color: white; }
            .btn-danger { background: #dc3545; color: white; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üé• IP Camera RTSP Stream Test</h1>
            
            <div id="status" class="status disconnected">
                üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠... | ‡∏Å‡∏•‡πâ‡∏≠‡∏á: {{ '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' if connected else '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' }}
            </div>
            
            <div class="video-container">
                <h3>üìπ Live Stream</h3>
                <img src="{{ url_for('video_feed') }}" style="max-width: 100%; border: 2px solid #ddd; border-radius: 10px;">
            </div>
            
            <div class="controls">
                <h3>üéõÔ∏è ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°</h3>
                <button class="btn btn-success" onclick="location.reload()">üîÑ Refresh</button>
                <button class="btn btn-primary" onclick="testConnection()">üîó Test Connection</button>
                <button class="btn btn-danger" onclick="stopStream()">‚èπÔ∏è Stop</button>
            </div>
            
            <div style="margin-top: 30px;">
                <h3>üìã ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á</h3>
                <ul>
                    <li><strong>URL:</strong> rtsp://ainok1:ainok123@192.168.1.100:554/stream1</li>
                    <li><strong>Username:</strong> ainok1</li>
                    <li><strong>Password:</strong> ainok123</li>
                    <li><strong>IP Address:</strong> 192.168.1.100</li>
                    <li><strong>Port:</strong> 554</li>
                    <li><strong>Stream Path:</strong> /stream1</li>
                </ul>
            </div>
        </div>
        
        <script>
            function testConnection() {
                alert('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠... ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console Log');
                fetch('/test_connection').then(r => r.json()).then(data => {
                    alert('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ' + JSON.stringify(data));
                });
            }
            
            function stopStream() {
                if(confirm('‡∏´‡∏¢‡∏∏‡∏î Stream ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
                    fetch('/stop').then(() => location.reload());
                }
            }
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setInterval(() => {
                fetch('/status').then(r => r.json()).then(data => {
                    const statusDiv = document.getElementById('status');
                    statusDiv.className = 'status ' + (data.connected ? 'connected' : 'disconnected');
                    statusDiv.innerHTML = `üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${data.connected ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'} | ‡πÄ‡∏ß‡∏•‡∏≤: ${data.time}`;
                });
            }, 5000);
        </script>
    </body>
    </html>
    ''', connected=camera_connector.is_connected)

@app.route('/video_feed')
def video_feed():
    """‡∏™‡πà‡∏á‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏ï‡∏£‡∏µ‡∏°"""
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/status')
def status():
    """‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
    return {
        'connected': camera_connector.is_connected,
        'time': time.strftime('%H:%M:%S'),
        'running': camera_connector.running
    }

@app.route('/test_connection')
def test_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
    logger.info("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
    success = camera_connector.connect_camera()
    
    if success and not camera_connector.running:
        camera_connector.start_capture()
    
    return {
        'success': success,
        'connected': camera_connector.is_connected,
        'message': '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'
    }

@app.route('/stop')
def stop():
    """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    camera_connector.stop()
    return {'message': 'üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'}

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Enhanced IP Camera RTSP Connector")
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
    if camera_connector.connect_camera():
        camera_connector.start_capture()
        print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô web interface)")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° web server
    print("üåê ‡πÄ‡∏£‡∏¥‡πà‡∏° Web Server ‡∏ó‡∏µ‡πà http://localhost:5001")
    print("üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà http://localhost:5001 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Live Stream")
    
    try:
        app.run(host='0.0.0.0', port=5001, debug=False, threaded=True)
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö...")
        camera_connector.stop()

if __name__ == '__main__':
    main()
