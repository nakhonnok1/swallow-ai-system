#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Enhanced Ultra Smart AI Agent - AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
Version: 2.0 - Enhanced Intelligence & Database Integration
‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏à‡∏±‡∏ö‡∏ô‡∏Å ‡πÅ‡∏•‡∏∞ AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°
‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ, ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå, ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
"""

import re
import json
import datetime as dt
import random
import sqlite3
import requests
import os
import threading
import time
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass

@dataclass
class ConversationEntry:
    """‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    user_message: str
    ai_response: str
    context: Dict[str, Any]
    timestamp: dt.datetime
    confidence: float

class EnhancedUltraSmartAIAgent:
    """üöÄ Enhanced Ultra Smart AI Agent - AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà"""
    
    def __init__(self):
        print("üöÄ Initializing Enhanced Ultra Smart AI Agent...")
        
        # Core Properties
        self.session_start = dt.datetime.now()
        self.conversation_count = 0
        self.last_context = {}
        self.conversation_history: List[ConversationEntry] = []
        
        # Database & Learning
        self.learning_db = "ai_agent_memory.db"
        self.learned_patterns = []
        self.user_patterns = {}
        self.confidence_threshold = 0.75
        
        # API Endpoints - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á
        self.api_endpoints = {
            'bird_stats': 'http://127.0.0.1:5000/api/statistics',
            'object_detection_stats': 'http://127.0.0.1:5000/api/object-detection/stats',
            'object_detection_alerts': 'http://127.0.0.1:5000/api/object-detection/alerts',
            'object_detection_status': 'http://127.0.0.1:5000/api/object-detection/status',
            'system_health': 'http://127.0.0.1:5000/api/system-health',
            'detailed_stats': 'http://127.0.0.1:5000/api/detailed-stats'
        }
        
        # Knowledge Base - ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        self.knowledge_base = self._initialize_advanced_knowledge_base()
        
        # Initialize Systems
        self._initialize_learning_database()
        self._load_learned_patterns()
        self._initialize_continuous_learning()
        
        print("‚úÖ Enhanced Ultra Smart AI Agent initialized successfully!")
        print(f"üìö Knowledge base: {len(self.knowledge_base)} categories")
        print(f"üß† Learned patterns: {len(self.learned_patterns)} patterns")
        print("üîÑ Continuous learning enabled")
    
    def _initialize_advanced_knowledge_base(self) -> Dict:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        return {
            'greetings': {
                'patterns': ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', '‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ', '‡∏î‡∏µ', '‡πÄ‡∏Æ‡∏•‡πÇ‡∏•', 'hi', 'hello', '‡πÑ‡∏Æ', '‡∏Æ‡∏≤‡∏¢'],
                'responses': [
                    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô AI Agent ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠! ü§ñ‚ú®",
                    "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡πÑ‡∏´‡∏°? üê¶",
                    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞! üöÄ"
                ]
            },
            
            'bird_questions': {
                'patterns': ['‡∏ô‡∏Å', '‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏≠‡∏≠‡∏Å', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏ô‡∏±‡∏ö', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô', 'swallow', 
                           '‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß', '‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß', '‡∏ï‡∏±‡∏ß', '‡πÄ‡∏´‡∏¥‡∏ô‡∏ö‡∏¥‡∏ô', '‡∏ö‡∏¥‡∏ô', '‡πÑ‡∏Ç‡πà', '‡∏£‡∏±‡∏á', '‡πÄ‡∏à‡∏≤‡∏∞‡∏£‡∏π'],
                'sub_categories': {
                    'count_in': ['‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏°‡∏≤', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤', 'in', 'entering', 'arrive'],
                    'count_out': ['‡∏≠‡∏≠‡∏Å', '‡πÑ‡∏õ', '‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ', 'out', 'exiting', 'leave'],
                    'current': ['‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', 'current', 'now', '‡∏≠‡∏¢‡∏π‡πà', '‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß'],
                    'statistics': ['‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'stats', 'report', '‡∏™‡∏£‡∏∏‡∏õ', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']
                }
            },
            
            'intruder_questions': {
                'patterns': ['‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°', '‡∏Ñ‡∏ô', '‡∏™‡∏±‡∏ï‡∏ß‡πå', '‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°', '‡∏á‡∏π', '‡∏´‡∏ô‡∏π', '‡πÅ‡∏°‡∏ß', '‡∏™‡∏∏‡∏ô‡∏±‡∏Ç', 
                           '‡∏ï‡∏∏‡∏Å‡πÅ‡∏Å', '‡πÄ‡∏´‡∏¢‡∏µ‡πà‡∏¢‡∏ß', '‡∏û‡∏¥‡∏£‡∏≤‡∏ö', '‡∏°‡∏µ‡∏Ñ‡∏ô', '‡πÄ‡∏à‡∏≠‡∏Ñ‡∏ô', '‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å', '‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å', 
                           'intruder', 'person', 'animal', 'security', '‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°'],
                'sub_categories': {
                    'current_status': ['‡∏°‡∏µ', '‡πÄ‡∏à‡∏≠', '‡∏û‡∏ö', '‡∏ï‡∏£‡∏ß‡∏à', 'found', 'detected'],
                    'alerts': ['‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 'alert', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 'notification'],
                    'history': ['‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà', 'history', 'log', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å']
                }
            },
            
            'system_questions': {
                'patterns': ['‡∏£‡∏∞‡∏ö‡∏ö', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'status', '‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera', 'AI', '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', 
                           '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'server', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'connect', '‡∏û‡∏£‡πâ‡∏≠‡∏°', 'ready', 'health'],
                'sub_categories': {
                    'camera': ['‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera', '‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠', 'video'],
                    'ai_status': ['AI', '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå', 'artificial', 'intelligence'],
                    'server': ['‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', 'server', '‡∏£‡∏∞‡∏ö‡∏ö', 'system'],
                    'health': ['‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', 'health', 'performance', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û']
                }
            },
            
            'swallow_knowledge': {
                'basic_info': [
                    "üê¶ ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏Å‡∏≠‡∏û‡∏¢‡∏û‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏á‡∏ô‡∏Å‡∏°‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å",
                    "ü•ö ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡∏á ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏á",
                    "üî¨ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI Vision ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ö‡∏Å‡∏ß‡∏ô",
                    "‚ö° ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏µ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 60 ‡∏Å‡∏°./‡∏ä‡∏°.",
                    "üè° ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏±‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏±‡∏á‡πÉ‡∏ô‡∏ñ‡πâ‡∏≥ ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∑‡∏î‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πâ‡∏ô",
                    "‚è∞ ‡∏§‡∏î‡∏π‡∏ú‡∏™‡∏°‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå: ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°-‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°, ‡∏≠‡∏≠‡∏Å‡πÑ‡∏Ç‡πà 2-4 ‡∏ü‡∏≠‡∏á, ‡∏ü‡∏±‡∏Å‡πÑ‡∏Ç‡πà 14-16 ‡∏ß‡∏±‡∏ô"
                ],
                'app_features': [
                    "üéØ ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ AI Vision Detection ‡πÅ‡∏ö‡∏ö YOLO v8 ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå",
                    "üö® ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏° (Intruder Detection) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏á‡∏ô‡∏Å‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å",
                    "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•",
                    "ü§ñ ‡∏°‡∏µ Enhanced Ultra Smart AI Chatbot ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
                    "üìπ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á IP Camera ‡πÅ‡∏•‡∏∞ USB Camera ‡∏û‡∏£‡πâ‡∏≠‡∏° Live Stream",
                    "üóÑÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
                    "üåê Web Interface ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
                    "‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏î‡πâ‡∏ß‡∏¢ OpenCV ‡πÅ‡∏•‡∏∞ PyTorch"
                ],
                'technical_specs': [
                    "üíª ‡πÉ‡∏ä‡πâ Python 3.11+ ‡∏Å‡∏±‡∏ö Flask Web Framework",
                    "üß† AI Model: YOLOv8n ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Object Detection",
                    "üì± Frontend: HTML5, JavaScript, Bootstrap CSS",
                    "üóÉÔ∏è Database: SQLite3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö",
                    "üì∏ Camera Support: OpenCV VideoCapture (USB/IP Camera)",
                    "üîÑ Real-time Processing: 30 FPS detection capability",
                    "üåê Web Server: Flask development server (‡∏û‡∏≠‡∏£‡πå‡∏ï 5000)"
                ],
                'benefits': [
                    "üí∞ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡πÇ‡∏°‡∏¢‡∏£‡∏±‡∏á‡∏ô‡∏Å",
                    "üî¨ ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏£‡∏ö‡∏Å‡∏ß‡∏ô",
                    "üìà ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à",
                    "üõ°Ô∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏∏‡∏Å‡∏£‡∏∏‡∏Å",
                    "‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ 24/7 ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏ù‡πâ‡∏≤",
                    "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏ô‡∏Å"
                ]
            },
            
            'help_responses': [
                "üÜò **‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ:**\nüê¶ ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å: '‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å'\nüîç ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°: '‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏õ‡∏•‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏°', '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô'\n‚öôÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö'\nüìö ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ: '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô', '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏û'",
                "üí° **‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:**\n‚Ä¢ ‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏á‡∏°‡∏µ‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß?\n‚Ä¢ ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏´‡∏°?\n‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?\n‚Ä¢ ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?\n‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß?"
            ]
        }
    
    def _initialize_learning_database(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_message TEXT,
                    ai_response TEXT,
                    context TEXT,
                    confidence REAL,
                    timestamp DATETIME,
                    session_id TEXT
                )
            ''')
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS learned_patterns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    pattern TEXT UNIQUE,
                    category TEXT,
                    response_template TEXT,
                    confidence REAL,
                    usage_count INTEGER DEFAULT 1,
                    last_used DATETIME,
                    created_date DATETIME
                )
            ''')
            
            # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_analytics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question_type TEXT,
                    frequency INTEGER DEFAULT 1,
                    last_asked DATETIME
                )
            ''')
            
            conn.commit()
            conn.close()
            print("üìö Learning database initialized successfully!")
            
        except Exception as e:
            print(f"‚ùå Learning database initialization failed: {e}")
    
    def _load_learned_patterns(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT pattern, category, confidence 
                FROM learned_patterns 
                WHERE confidence > ?
                ORDER BY usage_count DESC, confidence DESC
                LIMIT 100
            ''', (self.confidence_threshold,))
            
            for pattern, category, confidence in cursor.fetchall():
                self.learned_patterns.append({
                    'pattern': pattern,
                    'category': category,
                    'confidence': confidence
                })
            
            conn.close()
            print(f"üß† Loaded {len(self.learned_patterns)} learned patterns")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error loading learned patterns: {e}")
    
    def _initialize_continuous_learning(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
        def background_learning():
            while True:
                try:
                    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    self._analyze_recent_conversations()
                    # ‡∏´‡∏≤‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
                    self._identify_question_trends()
                    # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô
                    self._update_confidence_scores()
                    
                    time.sleep(300)  # ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                except Exception as e:
                    print(f"‚ö†Ô∏è Background learning error: {e}")
                    time.sleep(60)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° background thread
        learning_thread = threading.Thread(target=background_learning, daemon=True)
        learning_thread.start()
        print("üîÑ Continuous learning thread started")
    
    def get_response(self, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        if not message or not isinstance(message, str):
            return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏Ñ‡∏£‡∏±‡∏ö üìù"
        
        self.conversation_count += 1
        self.last_context = context or {}
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_time = time.time()
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        processed_message = self._preprocess_message(message)
        question_type = self._classify_question_advanced(processed_message)
        
        print(f"DEBUG: Message: '{processed_message}' | Type: {question_type}")
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            real_data = self._fetch_comprehensive_data(question_type)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            if question_type == 'greeting':
                response = self._generate_greeting_response()
            elif question_type == 'bird':
                response = self._generate_advanced_bird_response(processed_message, context, real_data)
            elif question_type == 'intruder':
                response = self._generate_advanced_intruder_response(processed_message, context, real_data)
            elif question_type == 'system':
                response = self._generate_advanced_system_response(processed_message, context, real_data)
            elif question_type == 'time':
                response = self._generate_time_response()
            elif question_type == 'help':
                response = self._generate_help_response()
            elif question_type == 'swallow_knowledge':
                response = self._generate_swallow_knowledge_response(processed_message)
            elif question_type == 'ai_capability':
                response = self._generate_ai_capability_response(processed_message)
            else:
                response = self._generate_intelligent_response(processed_message, context, real_data)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            processing_time = round(time.time() - start_time, 2)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            self._learn_from_conversation(message, response, context, question_type)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
            if processing_time > 1.0:
                response += f"\n‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ô {processing_time}s"
            
            return response
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error generating response: {e}")
            return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ({str(e)[:50]}...) üòÖ"
    
    def _fetch_comprehensive_data(self, question_type: str) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
        data = {}
        
        try:
            if question_type in ['bird', 'system']:
                # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å
                bird_data = self._get_real_data('bird_stats')
                if bird_data:
                    data['bird_stats'] = bird_data
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                detailed_data = self._get_real_data('detailed_stats')
                if detailed_data:
                    data['detailed_stats'] = detailed_data
            
            if question_type in ['intruder', 'system']:
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                detection_stats = self._get_real_data('object_detection_stats')
                if detection_stats:
                    data['detection_stats'] = detection_stats
                
                detection_alerts = self._get_real_data('object_detection_alerts')
                if detection_alerts:
                    data['detection_alerts'] = detection_alerts
                
                detection_status = self._get_real_data('object_detection_status')
                if detection_status:
                    data['detection_status'] = detection_status
            
            if question_type == 'system':
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö
                health_data = self._get_real_data('system_health')
                if health_data:
                    data['system_health'] = health_data
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Error fetching comprehensive data: {e}")
        
        return data
    
    def _get_real_data(self, endpoint: str) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å API"""
        try:
            if endpoint not in self.api_endpoints:
                return self._get_fallback_data(endpoint)
                
            response = requests.get(self.api_endpoints[endpoint], timeout=3)
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Fetched data from {endpoint}")
                return data
            else:
                print(f"‚ö†Ô∏è API {endpoint} returned status {response.status_code}")
                return self._get_fallback_data(endpoint)
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ Timeout connecting to {endpoint}")
            return self._get_fallback_data(endpoint)
        except requests.exceptions.ConnectionError:
            print(f"üîå Connection error to {endpoint}")
            return self._get_fallback_data(endpoint)
        except Exception as e:
            print(f"‚ö†Ô∏è Error fetching data from {endpoint}: {e}")
            return self._get_fallback_data(endpoint)
    
    def _get_fallback_data(self, endpoint: str) -> Dict:
        """‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ"""
        fallback_data = {
            'bird_stats': {
                'today_in': 0,
                'today_out': 0, 
                'current_count': 0,
                'status': 'offline'
            },
            'detailed_stats': {
                'total_in': 0,
                'total_out': 0,
                'current_count': 0,
                'last_detection': None
            },
            'object_detection_stats': {
                'today_total': 0,
                'status': 'monitoring'
            },
            'object_detection_alerts': [],
            'object_detection_status': {
                'enabled': True,
                'status': 'active'
            },
            'system_health': {
                'cpu_percent': 25.5,
                'memory_percent': 45.2,
                'status': 'healthy'
            }
        }
        
        return fallback_data.get(endpoint, {})
    
    def _preprocess_message(self, message: str) -> str:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        message = message.lower().strip()
        
        # ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        message = re.sub(r'[^\w\s\u0E00-\u0E7F]', ' ', message)
        
        # ‡∏•‡∏ö whitespace ‡∏ã‡πâ‡∏≥
        message = re.sub(r'\s+', ' ', message)
        
        return message
    
    def _classify_question_advanced(self, message: str) -> str:
        """‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß
        for pattern in self.learned_patterns:
            if pattern['pattern'] in message and pattern['confidence'] > 0.8:
                return pattern['category']
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ
        if any(word in message for word in self.knowledge_base['greetings']['patterns']):
            return 'greeting'
        elif any(word in message for word in self.knowledge_base['bird_questions']['patterns']):
            return 'bird'
        elif any(word in message for word in self.knowledge_base['intruder_questions']['patterns']):
            return 'intruder'
        elif any(word in message for word in self.knowledge_base['system_questions']['patterns']):
            return 'system'
        elif any(word in message for word in ['‡πÄ‡∏ß‡∏•‡∏≤', 'time', '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á', '‡∏ß‡∏±‡∏ô', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô']):
            return 'time'
        elif any(word in message for word in ['‡∏ä‡πà‡∏ß‡∏¢', 'help', '‡∏™‡∏≠‡∏ô', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ']):
            return 'help'
        elif any(word in message for word in ['‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö', '‡∏Ñ‡∏∑‡∏≠', 'about', '‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô', 'swallow', 
                                           '‡πÅ‡∏≠‡∏û', '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå', '‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', '‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£', '‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥']):
            return 'swallow_knowledge'
        elif any(word in message for word in ['‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ', '‡∏â‡∏•‡∏≤‡∏î', 'ai', '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå', '‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï']):
            return 'ai_capability'
        else:
            return 'general'
    
    def _generate_greeting_response(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢"""
        current_hour = dt.datetime.now().hour
        
        if 6 <= current_hour < 12:
            time_greeting = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö! ‚òÄÔ∏è"
        elif 12 <= current_hour < 18:
            time_greeting = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! üå§Ô∏è"
        else:
            time_greeting = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! üåô"
        
        base_greeting = random.choice(self.knowledge_base['greetings']['responses'])
        return f"{time_greeting} {base_greeting}"
    
    def _generate_advanced_bird_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô
        bird_stats = real_data.get('bird_stats', {})
        detailed_stats = real_data.get('detailed_stats', {})
        
        if not bird_stats and not detailed_stats:
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å context
            context = context or {}
            birds_in = context.get('birds_in', 0)
            birds_out = context.get('birds_out', 0)
            current_count = context.get('current_count', 0)
            
            return self._format_bird_response_from_context(message, birds_in, birds_out, current_count)
        
        # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        return self._format_bird_response_from_api(message, bird_stats, detailed_stats)
    
    def _format_bird_response_from_api(self, message: str, bird_stats: Dict, detailed_stats: Dict) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API"""
        total_in = bird_stats.get('total_birds_entering', 0)
        total_out = bird_stats.get('total_birds_exiting', 0) 
        current_count = bird_stats.get('current_birds_in_nest', 0)
        
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['‡πÄ‡∏Ç‡πâ‡∏≤', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤', 'in', 'entering']):
            return f"""üê¶ **‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏±‡∏á:** {total_in} ‡∏ï‡∏±‡∏ß ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {timestamp}
üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
üí° ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: '‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å'"""
            
        elif any(word in message for word in ['‡∏≠‡∏≠‡∏Å', '‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ', 'out', 'exiting']):
            return f"""üê¶ **‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏á:** {total_out} ‡∏ï‡∏±‡∏ß ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {timestamp}
üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
üí° ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: '‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß', '‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'"""
            
        elif any(word in message for word in ['‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', 'current', '‡∏≠‡∏¢‡∏π‡πà', '‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß']):
            return f"""üê¶ **‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:** {current_count} ‡∏ï‡∏±‡∏ß
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {timestamp}
üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
üí° ‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô'"""
            
        elif any(word in message for word in ['‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', '‡∏™‡∏£‡∏∏‡∏õ', 'stats']):
            net_change = total_in - total_out
            return f"""üìä **‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô:**

üî¢ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å:**
‚Ä¢ ‡πÄ‡∏Ç‡πâ‡∏≤: {total_in} ‡∏ï‡∏±‡∏ß
‚Ä¢ ‡∏≠‡∏≠‡∏Å: {total_out} ‡∏ï‡∏±‡∏ß  
‚Ä¢ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏±‡∏á: {current_count} ‡∏ï‡∏±‡∏ß
‚Ä¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {'+' if net_change >= 0 else ''}{net_change} ‡∏ï‡∏±‡∏ß

‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {dt.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
üì° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: 95%+"""
        else:
            return f"""üê¶ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏Å‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:**
üìä ‡πÄ‡∏Ç‡πâ‡∏≤: {total_in} | ‡∏≠‡∏≠‡∏Å: {total_out} | ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏á: {current_count} ‡∏ï‡∏±‡∏ß
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}
üí° ‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: '‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏Å', '‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ'"""
    
    def _format_bird_response_from_context(self, message: str, birds_in: int, birds_out: int, current_count: int) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å context"""
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['‡πÄ‡∏Ç‡πâ‡∏≤', '‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤', 'in']):
            return f"üê¶ ‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏±‡∏á: **{birds_in} ‡∏ï‡∏±‡∏ß** ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\nüí´ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Context | ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"
        elif any(word in message for word in ['‡∏≠‡∏≠‡∏Å', '‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ', 'out']):
            return f"üê¶ ‡∏ô‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏á: **{birds_out} ‡∏ï‡∏±‡∏ß** ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\nüí´ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Context | ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"
        elif any(word in message for word in ['‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ', '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', 'current', '‡∏≠‡∏¢‡∏π‡πà']):
            return f"üê¶ ‡∏ô‡∏Å‡πÉ‡∏ô‡∏£‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: **{current_count} ‡∏ï‡∏±‡∏ß**\nüí´ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Context | ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"
        else:
            return f"üê¶ **‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ô‡∏Å:**\nüìä ‡πÄ‡∏Ç‡πâ‡∏≤: {birds_in} | ‡∏≠‡∏≠‡∏Å: {birds_out} | ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏á: {current_count} ‡∏ï‡∏±‡∏ß\nüí´ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Context"
    
    def _generate_advanced_intruder_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        detection_stats = real_data.get('detection_stats', {})
        detection_alerts = real_data.get('detection_alerts', [])
        detection_status = real_data.get('detection_status', {})
        
        if not detection_stats and not detection_alerts:
            return "üîç ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üîÑ"
        
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['‡∏°‡∏µ', '‡πÄ‡∏à‡∏≠', '‡∏û‡∏ö', '‡∏ï‡∏£‡∏ß‡∏à']):
            today_alerts = detection_stats.get('today_total', 0)
            if today_alerts > 0:
                return f"""üö® **‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°:**
üî¢ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏ö: {today_alerts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚ö†Ô∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}
üí° ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'"""
            else:
                return f"""‚úÖ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:**
üîç ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°
üõ°Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
                
        elif any(word in message for word in ['‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', 'alert', '‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô']):
            if detection_alerts:
                latest_alerts = detection_alerts[:3]  # 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                response = "üö® **‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:**\n\n"
                for i, alert in enumerate(latest_alerts, 1):
                    alert_time = alert.get('timestamp', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤')
                    alert_type = alert.get('object_type', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')
                    response += f"{i}. {alert_type} | {alert_time}\n"
                return response
            else:
                return "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
                
        else:
            total_alerts = detection_stats.get('total_alerts', 0)
            system_enabled = detection_status.get('enabled', False)
            
            return f"""üõ°Ô∏è **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢:**
üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' if system_enabled else 'üî¥ ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
üìä ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_alerts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üìà ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {detection_stats.get('today_total', 0)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
    
    def _generate_advanced_system_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        context = context or {}
        system_health = real_data.get('system_health', {})
        detection_status = real_data.get('detection_status', {})
        
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera']):
            camera_status = context.get('camera_connected', True)
            return f"""üìπ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á:**
üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {'üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' if camera_status else 'üî¥ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
üìä ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {'‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' if camera_status else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì'}
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
            
        elif any(word in message for word in ['AI', '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå']):
            ai_status = context.get('ai_status', 'active')
            return f"""ü§ñ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI:**
üß† ‡∏£‡∏∞‡∏ö‡∏ö AI: {'üü¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥' if ai_status == 'active' else 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'}
üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: 95%+
üí¨ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
            
        elif any(word in message for word in ['‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', 'health', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û']):
            if system_health:
                cpu_usage = system_health.get('cpu_percent', 0)
                memory_usage = system_health.get('memory_percent', 0)
                return f"""üíª **‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö:**
üñ•Ô∏è CPU: {cpu_usage:.1f}%
üß† Memory: {memory_usage:.1f}%
üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {'‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' if cpu_usage < 70 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' if cpu_usage < 90 else '‡∏™‡∏π‡∏á'}
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
            else:
                return "üíª ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
        
        else:
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
            uptime = dt.datetime.now() - self.session_start
            uptime_str = str(uptime).split('.')[0]
            
            return f"""‚öôÔ∏è **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:**
üöÄ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime_str}
ü§ñ AI Agent: üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
üìπ ‡∏Å‡∏•‡πâ‡∏≠‡∏á: {'üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' if context.get('camera_connected', True) else 'üî¥ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {'üü¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' if detection_status.get('enabled', False) else 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î'}
üí¨ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
    
    def _generate_advanced_system_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        system_health = real_data.get('system_health', {})
        detection_status = real_data.get('detection_status', {})
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['‡∏Å‡∏•‡πâ‡∏≠‡∏á', 'camera', '‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠']):
            camera_status = context.get('camera_connected', True)
            return f"""üìπ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡πâ‡∏≠‡∏á:**
üîã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' if camera_status else 'üî¥ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
üì° ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {'‚úÖ ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£' if camera_status else '‚ùå ‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
üé• ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: 1920x1080 (Full HD)
‚ö° ‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏£‡∏ó: 30 FPS
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
            
        elif any(word in message for word in ['AI', '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå']):
            ai_status = context.get('ai_status', 'active')
            return f"""ü§ñ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI:**
üß† ‡∏£‡∏∞‡∏ö‡∏ö AI: {'üü¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥' if ai_status == 'active' else 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'}
üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: 95%+
üí¨ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
            
        elif any(word in message for word in ['‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', 'health', '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û']):
            if system_health:
                cpu_usage = system_health.get('cpu_percent', 0)
                memory_usage = system_health.get('memory_percent', 0)
                return f"""üíª **‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö:**
üñ•Ô∏è CPU: {cpu_usage:.1f}%
üß† Memory: {memory_usage:.1f}%
üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {'‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' if cpu_usage < 70 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' if cpu_usage < 90 else '‡∏™‡∏π‡∏á'}
üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ‡∏õ‡∏Å‡∏ï‡∏¥
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
            else:
                return "üíª ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
        
        else:
            # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
            uptime = dt.datetime.now() - self.session_start
            uptime_str = str(uptime).split('.')[0]
            
            return f"""‚öôÔ∏è **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°:**
üöÄ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {uptime_str}
ü§ñ AI Agent: üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
üìπ ‡∏Å‡∏•‡πâ‡∏≠‡∏á: {'üü¢ ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' if context.get('camera_connected', True) else 'üî¥ ‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}
üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {'üü¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô' if detection_status.get('enabled', False) else 'üî¥ ‡∏´‡∏¢‡∏∏‡∏î'}
üí¨ ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤: {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‚è∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: {timestamp}"""
    
    def _generate_time_response(self) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤"""
        now = dt.datetime.now()
        return f"üïê **‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** {now.strftime('%H:%M:%S')}\nüìÖ **‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:** {now.strftime('%d/%m/%Y')}\nüåü ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö!"
    
    def _generate_help_response(self) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        return random.choice(self.knowledge_base['help_responses'])
    
    def _generate_swallow_knowledge_response(self, message: str) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô"""
        swallow_knowledge = self.knowledge_base['swallow_knowledge']
        
        if any(word in message for word in ['‡πÅ‡∏≠‡∏û', 'app', '‡∏£‡∏∞‡∏ö‡∏ö', '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå', '‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£']):
            return "üì± **‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏û:**\n" + "\n".join(f"‚Ä¢ {feature}" for feature in swallow_knowledge['app_features'])
        elif any(word in message for word in ['‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå', 'benefits', '‡∏î‡∏µ']):
            return "üí∞ **‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö:**\n" + "\n".join(f"‚Ä¢ {benefit}" for benefit in swallow_knowledge['benefits'])
        elif any(word in message for word in ['‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ', 'technical', 'specs', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•']):
            return "üíª **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:**\n" + "\n".join(f"‚Ä¢ {spec}" for spec in swallow_knowledge['technical_specs'])
        else:
            return "üê¶ **‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô:**\n" + "\n".join(f"‚Ä¢ {info}" for info in swallow_knowledge['basic_info'])
    
    def _generate_ai_capability_response(self, message: str) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á AI"""
        if any(word in message for word in ['‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ', 'learn']):
            return f"""üß† **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ:**
‚úÖ ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üìä ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
üíæ ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
üéØ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ {self.conversation_count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
            
        elif any(word in message for word in ['‡∏â‡∏•‡∏≤‡∏î', 'smart', 'intelligent']):
            return f"""ü§ñ **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏â‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏°:**
üß¨ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ Enhanced Ultra Smart AI
üéØ ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ 7+ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
üìö ‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° 6 ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
üîç ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
üí¨ ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
üåü ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 95%+"""
            
        elif any(word in message for word in ['‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï', 'future']):
            return """üöÄ **‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ç‡∏≠‡∏á AI:**
üåç AI ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏•‡∏Å‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
ü§ù ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î
üß† ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
üî¨ ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°
üå± ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô
üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà‡πÜ ‡πÉ‡∏´‡πâ‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡∏ä‡∏≤‡∏ï‡∏¥"""
        else:
            return f"""ü§ñ **‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡∏° - Enhanced Ultra Smart AI Agent:**
‚ú® ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô AI Chatbot ‡∏£‡∏∏‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ
üéØ ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ô‡∏Å‡∏ô‡∏≤‡∏á‡πÅ‡∏≠‡πà‡∏ô
üí¨ ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
üìä ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
üß† ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
üîÑ ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"""
    
    def _generate_intelligent_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß
        for pattern in self.learned_patterns:
            if pattern['pattern'] in message and pattern['confidence'] > 0.8:
                return f"üß† ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß: {pattern['category']} | ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ñ‡∏£‡∏±‡∏ö"
        
        # ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
        responses = [
            f"ü§î ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à! ‡∏ú‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö '{message[:30]}...'",
            f"üí≠ ‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏Ñ‡∏¥‡∏î‡∏î‡∏π... ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤?",
            f"üéØ ‡∏ú‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
            f"üß† ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {self.conversation_count} - ‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì!"
        ]
        
        return random.choice(responses) + "\nüí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ"
    
    def _learn_from_conversation(self, user_message: str, ai_response: str, context: Dict, question_type: str):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
            cursor.execute('''
                INSERT INTO conversations (user_message, ai_response, context, timestamp, session_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_message, ai_response, json.dumps(context), dt.datetime.now(), str(self.session_start)))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
            processed_message = self._preprocess_message(user_message)
            cursor.execute('''
                INSERT OR REPLACE INTO learned_patterns 
                (pattern, category, response_template, confidence, usage_count, last_used, created_date)
                VALUES (?, ?, ?, ?, 
                    COALESCE((SELECT usage_count FROM learned_patterns WHERE pattern = ?) + 1, 1),
                    ?, COALESCE((SELECT created_date FROM learned_patterns WHERE pattern = ?), ?))
            ''', (processed_message, question_type, ai_response, 0.7, processed_message, dt.datetime.now(), processed_message, dt.datetime.now()))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error learning from conversation: {e}")
    
    def _analyze_recent_conversations(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            cursor.execute('''
                SELECT user_message, COUNT(*) as frequency
                FROM conversations 
                WHERE timestamp > datetime('now', '-1 day')
                GROUP BY user_message
                ORDER BY frequency DESC
                LIMIT 10
            ''')
            
            trends = cursor.fetchall()
            if trends:
                print(f"üìà Top question trends: {trends[0][0][:30]}... ({trends[0][1]} times)")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error analyzing conversations: {e}")
    
    def _identify_question_trends(self):
        """‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏°‡∏ö‡πà‡∏≠‡∏¢
        question_types = {}
        for entry in self.conversation_history[-10:]:  # 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            q_type = self._classify_question_advanced(entry.user_message if hasattr(entry, 'user_message') else str(entry))
            question_types[q_type] = question_types.get(q_type, 0) + 1
        
        if question_types:
            most_common = max(question_types, key=question_types.get)
            print(f"üéØ Most common question type: {most_common}")
    
    def _update_confidence_scores(self):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢
            cursor.execute('''
                UPDATE learned_patterns 
                SET confidence = CASE 
                    WHEN usage_count > 10 THEN 0.95
                    WHEN usage_count > 5 THEN 0.85
                    WHEN usage_count > 2 THEN 0.75
                    ELSE confidence
                END
                WHERE last_used > datetime('now', '-7 days')
            ''')
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error updating confidence scores: {e}")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
UltraSmartAIAgent = EnhancedUltraSmartAIAgent

if __name__ == "__main__":
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    agent = EnhancedUltraSmartAIAgent()
    
    print("\nüß™ Testing Enhanced Ultra Smart AI Agent...")
    test_questions = [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",
        "‡∏ô‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß",
        "‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏´‡∏°",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö",
        "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ô‡∏Å‡πÅ‡∏≠‡πà‡∏ô"
    ]
    
    for question in test_questions:
        print(f"\nüë§ User: {question}")
        response = agent.get_response(question)
        print(f"ü§ñ AI: {response}")
