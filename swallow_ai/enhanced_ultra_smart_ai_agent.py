#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯЪА Ultimate Intelligent AI Agent - AI р╕Хр╕▒р╕зр╣Бр╕Чр╕Щр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░р╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Бр╕ер╕░р╕Юр╕▒р╕Тр╕Щр╕▓р╕Хр╕▒р╕зр╣Ар╕нр╕Зр╣Др╕Фр╣Й
Version: 3.0 - Super Intelligence & Predictive Analytics
р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ъ AI р╕Ир╕▒р╕Ър╕Щр╕Б р╣Бр╕ер╕░ AI р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕бр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
р╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й, р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М, р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М, р╣Бр╕ер╕░р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф
"""

import re
import json
import datetime as dt
import random
import sqlite3
import requests
import os
import threading
import time
import numpy as np
import pandas as pd
from collections import defaultdict, deque
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, field

@dataclass
class SwallowPattern:
    """р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ"""
    timestamp: dt.datetime
    birds_in: int = 0
    birds_out: int = 0
    current_count: int = 0
    temperature: float = 0.0
    humidity: float = 0.0
    light_level: float = 0.0
    weather_condition: str = "unknown"
    activity_level: str = "normal"

@dataclass
class PredictionResult:
    """р╕Ьр╕ер╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М"""
    prediction_type: str
    predicted_value: float
    confidence: float
    reasoning: str
    factors: List[str] = field(default_factory=list)
    timestamp: dt.datetime = field(default_factory=dt.datetime.now)
    metadata: Dict[str, Any] = field(default_factory=dict)

# Intelligence Analysis Classes
class PatternAnalyzer:
    """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б"""
    def __init__(self):
        self.patterns = {}
        
    def analyze_pattern(self, data: List[Dict]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е"""
        if not data:
            return {}
        
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Ар╕Чр╕гр╕Щр╕Фр╣Мр╣Ар╕зр╕ер╕▓
        times = [d.get('timestamp', dt.datetime.now()) for d in data]
        values = [d.get('count', 0) for d in data]
        
        return {
            'trend': 'increasing' if len(values) > 1 and values[-1] > values[0] else 'stable',
            'average': np.mean(values) if values else 0,
            'peak_times': self._find_peak_times(times, values),
            'patterns': self._detect_daily_patterns(times, values)
        }
    
    def _find_peak_times(self, times: List, values: List) -> List[str]:
        """р╕лр╕▓р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕Зр╕кр╕╕р╕Ф"""
        if len(values) < 3:
            return []
        
        peaks = []
        for i in range(1, len(values) - 1):
            if values[i] > values[i-1] and values[i] > values[i+1]:
                peaks.append(times[i].strftime('%H:%M'))
        return peaks
    
    def _detect_daily_patterns(self, times: List, values: List) -> Dict:
        """р╕Хр╕гр╕зр╕Ир╕лр╕▓р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕гр╕▓р╕вр╕зр╕▒р╕Щ"""
        hour_data = defaultdict(list)
        for time, value in zip(times, values):
            hour_data[time.hour].append(value)
        
        patterns = {}
        for hour, vals in hour_data.items():
            patterns[f"{hour:02d}:00"] = {
                'average': np.mean(vals),
                'activity_level': 'high' if np.mean(vals) > np.mean(values) else 'low'
            }
        
        return patterns

class BehavioralAnalyst:
    """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ"""
    def __init__(self):
        self.behavioral_patterns = {}
        
    def analyze_behavior(self, swallow_data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ"""
        if not swallow_data:
            return {'status': 'insufficient_data'}
        
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Б
        in_out_ratio = self._calculate_in_out_ratio(swallow_data)
        activity_periods = self._identify_activity_periods(swallow_data)
        seasonal_behavior = self._analyze_seasonal_behavior(swallow_data)
        
        return {
            'in_out_ratio': in_out_ratio,
            'activity_periods': activity_periods,
            'seasonal_behavior': seasonal_behavior,
            'behavioral_insights': self._generate_behavioral_insights(swallow_data)
        }
    
    def _calculate_in_out_ratio(self, data: List[SwallowPattern]) -> Dict:
        """р╕Др╕│р╕Щр╕зр╕Ур╕нр╕▒р╕Хр╕гр╕▓р╕кр╣Ир╕зр╕Щр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Б"""
        total_in = sum(d.birds_in for d in data)
        total_out = sum(d.birds_out for d in data)
        
        return {
            'total_in': total_in,
            'total_out': total_out,
            'ratio': total_in / max(total_out, 1),
            'interpretation': 'increasing' if total_in > total_out else 'decreasing'
        }
    
    def _identify_activity_periods(self, data: List[SwallowPattern]) -> List[Dict]:
        """р╕гр╕░р╕Ър╕╕р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б"""
        periods = []
        hour_activity = defaultdict(int)
        
        for d in data:
            hour = d.timestamp.hour
            hour_activity[hour] += d.birds_in + d.birds_out
        
        # р╕лр╕▓р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕З
        avg_activity = np.mean(list(hour_activity.values()))
        for hour, activity in hour_activity.items():
            if activity > avg_activity * 1.5:
                periods.append({
                    'time': f"{hour:02d}:00-{hour+1:02d}:00",
                    'activity_level': activity,
                    'type': 'high_activity'
                })
        
        return periods
    
    def _analyze_seasonal_behavior(self, data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Хр╕▓р╕бр╕др╕Фр╕╣р╕Бр╕▓р╕е"""
        season_data = defaultdict(list)
        
        for d in data:
            month = d.timestamp.month
            if month in [3, 4, 5]:
                season = 'spring'
            elif month in [6, 7, 8]:
                season = 'summer'
            elif month in [9, 10, 11]:
                season = 'autumn'
            else:
                season = 'winter'
            
            season_data[season].append(d.birds_in + d.birds_out)
        
        seasonal_insights = {}
        for season, activities in season_data.items():
            if activities:
                seasonal_insights[season] = {
                    'average_activity': np.mean(activities),
                    'peak_activity': max(activities),
                    'activity_trend': 'active' if np.mean(activities) > 5 else 'quiet'
                }
        
        return seasonal_insights
    
    def _generate_behavioral_insights(self, data: List[SwallowPattern]) -> List[str]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Кр╕┤р╕Зр╕ер╕╢р╕Бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б"""
        insights = []
        
        if len(data) > 7:
            recent_week = data[-7:]
            avg_daily = np.mean([d.birds_in + d.birds_out for d in recent_week])
            
            if avg_daily > 10:
                insights.append("ЁЯРж р╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щр╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕Зр╣Гр╕Щр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣Мр╕Чр╕╡р╣Ир╕Ьр╣Ир╕▓р╕Щр╕бр╕▓ р╕нр╕▓р╕Ир╣Ар╕Ыр╣Зр╕Щр╕Кр╣Ир╕зр╕Зр╕др╕Фр╕╣р╕Ьр╕кр╕бр╕Юр╕▒р╕Щр╕Шр╕╕р╣М")
            elif avg_daily < 3:
                insights.append("ЁЯУЙ р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕Щр╕Бр╕ер╕Фр╕ер╕З р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕гр╕нр╕Ър╕гр╕▒р╕З")
            
            # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Ар╕Чр╕гр╕Щр╕Фр╣М
            if len(data) > 14:
                recent_trend = [d.current_count for d in data[-7:]]
                older_trend = [d.current_count for d in data[-14:-7]]
                
                if np.mean(recent_trend) > np.mean(older_trend):
                    insights.append("ЁЯУИ р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕Зр╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щ р╣Бр╕кр╕Фр╕Зр╕зр╣Ир╕▓р╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Ар╕лр╕бр╕▓р╕░р╕кр╕б")
                else:
                    insights.append("ЁЯУК р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╕Др╕Зр╕Чр╕╡р╣И р╕гр╕░р╕Ър╕Ър╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕вр╕▒р╕Зр╕Др╕Зр╕бр╕╡р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю")
        
        return insights

class TrendPredictor:
    """р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б"""
    def __init__(self):
        self.models = {}
        
    def predict_bird_activity(self, historical_data: List[SwallowPattern], 
                            prediction_hours: int = 24) -> PredictionResult:
        """р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Щр╕Бр╣Гр╕Щр╕нр╕Щр╕▓р╕Др╕Х"""
        if len(historical_data) < 5:
            return PredictionResult(
                prediction_type="bird_activity",
                predicted_value=0,
                confidence=0.1,
                reasoning="р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕нр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М",
                factors=[],
                timestamp=dt.datetime.now()
            )
        
        # р╣Гр╕Кр╣Й Simple Linear Regression р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
        times = [(d.timestamp - historical_data[0].timestamp).total_seconds() / 3600 
                for d in historical_data]
        activities = [d.birds_in + d.birds_out for d in historical_data]
        
        # р╕Др╕│р╕Щр╕зр╕Ур╣Ар╕Чр╕гр╕Щр╕Фр╣М
        if len(times) > 1:
            slope = (activities[-1] - activities[0]) / (times[-1] - times[0]) if times[-1] != times[0] else 0
            predicted_activity = activities[-1] + (slope * prediction_hours)
            
            # р╕Др╕│р╕Щр╕зр╕Ур╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕▒р╣Ир╕Щ
            variance = np.var(activities) if len(activities) > 1 else 0
            confidence = max(0.3, min(0.9, 1 / (1 + variance / 10)))
            
            reasoning = f"р╕нр╕┤р╕Зр╕Ир╕▓р╕Бр╣Ар╕Чр╕гр╕Щр╕Фр╣М {prediction_hours} р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕Зр╕Чр╕╡р╣Ир╕Ьр╣Ир╕▓р╕Щр╕бр╕▓"
            factors = ["historical_trend", "time_pattern", "seasonal_factor"]
            
            return PredictionResult(
                prediction_type="bird_activity",
                predicted_value=max(0, predicted_activity),
                confidence=confidence,
                reasoning=reasoning,
                factors=factors,
                timestamp=dt.datetime.now()
            )
        
        return PredictionResult(
            prediction_type="bird_activity",
            predicted_value=np.mean(activities),
            confidence=0.5,
            reasoning="р╣Гр╕Кр╣Йр╕Др╣Ир╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕бр╕╡",
            factors=["average_baseline"],
            timestamp=dt.datetime.now()
        )

class EnvironmentalAnalyzer:
    """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б"""
    def __init__(self):
        self.environmental_factors = {}
        
    def analyze_environmental_impact(self, data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ър╕Вр╕нр╕Зр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б"""
        return {
            'temperature_correlation': self._analyze_temperature_impact(data),
            'humidity_impact': self._analyze_humidity_impact(data),
            'light_conditions': self._analyze_light_conditions(data),
            'recommendations': self._generate_environmental_recommendations(data)
        }
    
    def _analyze_temperature_impact(self, data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ър╕Вр╕нр╕Зр╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤"""
        temp_data = [(d.temperature, d.birds_in + d.birds_out) for d in data if d.temperature > 0]
        
        if len(temp_data) < 3:
            return {'status': 'insufficient_data'}
        
        temps, activities = zip(*temp_data)
        optimal_temp_range = self._find_optimal_temperature_range(temps, activities)
        
        return {
            'optimal_range': optimal_temp_range,
            'current_impact': 'positive' if np.mean(activities) > 5 else 'neutral'
        }
    
    def _analyze_humidity_impact(self, data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ър╕Вр╕нр╕Зр╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Йр╕Щ"""
        humidity_activities = [(d.humidity, d.birds_in + d.birds_out) for d in data if d.humidity > 0]
        
        if len(humidity_activities) < 3:
            return {'status': 'insufficient_data'}
        
        humidities, activities = zip(*humidity_activities)
        
        return {
            'optimal_humidity': f"{np.mean(humidities):.1f}%",
            'impact_level': 'moderate'
        }
    
    def _analyze_light_conditions(self, data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕кр╕ар╕▓р╕Юр╣Бр╕кр╕З"""
        light_patterns = defaultdict(list)
        
        for d in data:
            hour = d.timestamp.hour
            if 6 <= hour <= 18:
                light_level = 'daylight'
            elif 19 <= hour <= 21 or 5 <= hour <= 6:
                light_level = 'twilight'
            else:
                light_level = 'night'
            
            light_patterns[light_level].append(d.birds_in + d.birds_out)
        
        preferred_conditions = {}
        for condition, activities in light_patterns.items():
            if activities:
                preferred_conditions[condition] = {
                    'average_activity': np.mean(activities),
                    'preference_level': 'high' if np.mean(activities) > 5 else 'low'
                }
        
        return preferred_conditions
    
    def _find_optimal_temperature_range(self, temps: List[float], activities: List[int]) -> str:
        """р╕лр╕▓р╕Кр╣Ир╕зр╕Зр╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤р╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕б"""
        if not temps or not activities:
            return "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕гр╕░р╕Ър╕╕р╣Др╕Фр╣Й"
        
        # р╕лр╕▓р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤р╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕Зр╕кр╕╕р╕Ф
        max_activity_idx = activities.index(max(activities))
        optimal_temp = temps[max_activity_idx]
        
        return f"{optimal_temp-2:.1f}┬░C - {optimal_temp+2:.1f}┬░C"
    
    def _generate_environmental_recommendations(self, data: List[SwallowPattern]) -> List[str]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б"""
        recommendations = []
        
        if len(data) > 10:
            recent_data = data[-10:]
            avg_activity = np.mean([d.birds_in + d.birds_out for d in recent_data])
            
            if avg_activity < 3:
                recommendations.append("ЁЯМбя╕П р╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤р╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Йр╕Щр╕гр╕нр╕Ър╕гр╕▒р╕З")
                recommendations.append("ЁЯТб р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╣Йр╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕Бр╕▒р╕Ър╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ")
            
            # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б
            active_hours = [d.timestamp.hour for d in recent_data if d.birds_in + d.birds_out > 0]
            if active_hours and (max(active_hours) - min(active_hours)) < 6:
                recommendations.append("тП░ р╕Щр╕Бр╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕кр╕▒р╣Йр╕Щ р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Чр╕╡р╣Ир╣Ар╕нр╕╖р╣Йр╕нр╕Хр╣Ир╕нр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Хр╕ер╕нр╕Фр╕зр╕▒р╕Щ")
        
        return recommendations

class ThreatAssessor:
    """р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б"""
    def __init__(self):
        self.threat_patterns = {}
        
    def assess_threats(self, intruder_data: List[Dict], swallow_data: List[SwallowPattern]) -> Dict:
        """р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╕Хр╣Ир╕нр╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ"""
        threat_level = self._calculate_threat_level(intruder_data)
        impact_analysis = self._analyze_threat_impact(intruder_data, swallow_data)
        
        return {
            'current_threat_level': threat_level,
            'impact_analysis': impact_analysis,
            'recommendations': self._generate_threat_recommendations(threat_level, impact_analysis)
        }
    
    def _calculate_threat_level(self, intruder_data: List[Dict]) -> str:
        """р╕Др╕│р╕Щр╕зр╕Ур╕гр╕░р╕Фр╕▒р╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б"""
        if not intruder_data:
            return 'low'
        
        critical_threats = sum(1 for d in intruder_data if d.get('threat_level') == 'critical')
        high_threats = sum(1 for d in intruder_data if d.get('threat_level') == 'high')
        
        if critical_threats > 0:
            return 'critical'
        elif high_threats > 2:
            return 'high'
        elif high_threats > 0:
            return 'medium'
        else:
            return 'low'
    
    def _analyze_threat_impact(self, intruder_data: List[Dict], swallow_data: List[SwallowPattern]) -> Dict:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ър╕Вр╕нр╕Зр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б"""
        if not intruder_data or not swallow_data:
            return {'impact': 'unknown'}
        
        # р╕лр╕▓р╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╕Ыр╕гр╕▓р╕Бр╕Пр╕Вр╕нр╕Зр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╕Бр╕▒р╕Ър╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Б
        threat_times = [d.get('timestamp', dt.datetime.now()) for d in intruder_data]
        
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Бр╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╕бр╕╡р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б
        behavioral_changes = []
        for threat_time in threat_times:
            # р╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Бр╕Бр╣Ир╕нр╕Щр╣Бр╕ер╕░р╕лр╕ер╕▒р╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б
            before_threat = [d for d in swallow_data 
                           if (threat_time - d.timestamp).total_seconds() > 0 
                           and (threat_time - d.timestamp).total_seconds() < 3600]  # 1 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕Зр╕Бр╣Ир╕нр╕Щ
            
            after_threat = [d for d in swallow_data 
                          if (d.timestamp - threat_time).total_seconds() > 0 
                          and (d.timestamp - threat_time).total_seconds() < 3600]   # 1 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕Зр╕лр╕ер╕▒р╕З
            
            if before_threat and after_threat:
                before_activity = np.mean([d.birds_in + d.birds_out for d in before_threat])
                after_activity = np.mean([d.birds_in + d.birds_out for d in after_threat])
                
                change_percent = ((after_activity - before_activity) / max(before_activity, 1)) * 100
                behavioral_changes.append(change_percent)
        
        avg_change = np.mean(behavioral_changes) if behavioral_changes else 0
        
        return {
            'behavioral_change_percent': avg_change,
            'impact_severity': 'high' if avg_change < -30 else 'moderate' if avg_change < -10 else 'low',
            'recovery_time': '1-2 hours' if avg_change < -20 else '30 minutes'
        }
    
    def _generate_threat_recommendations(self, threat_level: str, impact_analysis: Dict) -> List[str]:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б"""
        recommendations = []
        
        if threat_level == 'critical':
            recommendations.append("ЁЯЪи р╕гр╕░р╕Фр╕▒р╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╕кр╕╣р╕Зр╕бр╕▓р╕Б - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕гр╕▒р╕Зр╕Чр╕▒р╕Щр╕Чр╕╡")
            recommendations.append("ЁЯУЮ р╣Бр╕Ир╣Йр╕Зр╣Ар╕Ир╣Йр╕▓р╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в")
            
        elif threat_level == 'high':
            recommendations.append("тЪая╕П р╕Юр╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╕гр╕░р╕Фр╕▒р╕Ър╕кр╕╣р╕З - р╣Ар╕Юр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╣Ар╕Эр╣Йр╕▓р╕гр╕░р╕зр╕▒р╕З")
            recommendations.append("ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕гр╕нр╕Ър╕гр╕▒р╕З")
            
        elif threat_level == 'medium':
            recommendations.append("ЁЯСБя╕П р╕бр╕╡р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╕гр╕░р╕Фр╕▒р╕Ър╕Ыр╕▓р╕Щр╕Бр╕ер╕▓р╕З - р╣Ар╕Эр╣Йр╕▓р╕кр╕▒р╕Зр╣Ар╕Бр╕Х")
            
        # р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▓р╕бр╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ъ
        impact_severity = impact_analysis.get('impact_severity', 'low')
        if impact_severity == 'high':
            recommendations.append("ЁЯРж р╕Щр╕Бр╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Ьр╕ер╕Бр╕гр╕░р╕Чр╕Ър╕бр╕▓р╕Б - р╕Юр╕┤р╕Ир╕▓р╕гр╕Ур╕▓р╣Ар╕Юр╕┤р╣Ир╕бр╕бр╕▓р╕Хр╕гр╕Бр╕▓р╕гр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ")
        
        return recommendations

@dataclass
class ConversationEntry:
    """р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓"""
    user_message: str
    ai_response: str
    context: Dict[str, Any]
    timestamp: dt.datetime
    confidence: float
    learned_from: bool = False

class EnhancedUltraSmartAIAgent:
    """ЁЯЪА Enhanced Ultra Smart AI Agent - AI р╕Хр╕▒р╕зр╣Бр╕Чр╕Щр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░р╕гр╕░р╕Фр╕▒р╕Ър╕кр╕╣р╕Зр╕кр╕╕р╕Ф"""
    
    def __init__(self):
        print("ЁЯза Initializing Enhanced Ultra Smart AI Agent...")
        
        # Core Properties
        self.session_start = dt.datetime.now()
        self.conversation_count = 0
        self.last_context = {}
        self.conversation_history: List[ConversationEntry] = []
        
        # Advanced Learning & Analytics
        self.learning_db = "ai_agent_memory.db"
        self.learned_patterns = []
        self.user_patterns = {}
        self.confidence_threshold = 0.75
        self.swallow_patterns: deque = deque(maxlen=1000)
        self.prediction_models = {}
        
        # Intelligence Modules
        self.pattern_analyzer = PatternAnalyzer()
        self.behavioral_analyst = BehavioralAnalyst()
        self.trend_predictor = TrendPredictor()
        self.environmental_analyzer = EnvironmentalAnalyzer()
        self.threat_assessor = ThreatAssessor()
        
        # Real-time Data Integration
        self.data_buffer = deque(maxlen=100)
        self.last_data_fetch = dt.datetime.now()
        self.data_fetch_interval = 30
        
        # API Endpoints - р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕гр╕░р╕Ър╕Ър╕Ир╕гр╕┤р╕З
        self.api_endpoints = {
            'bird_stats': 'http://127.0.0.1:5000/api/stats',
            'detailed_stats': 'http://127.0.0.1:5000/api/stats',
            'intruder_stats': 'http://127.0.0.1:5000/api/enhanced-security-alerts',
            'intruder_alerts': 'http://127.0.0.1:5000/api/live-detections',
            'system_health': 'http://127.0.0.1:5000/api/system-status-comprehensive',
            'performance_metrics': 'http://127.0.0.1:5000/api/ai-integration/performance-metrics',
            'ultimate_ai_stats': 'http://127.0.0.1:5000/api/ultimate-ai/statistics',
            'ultimate_ai_status': 'http://127.0.0.1:5000/api/ultimate-ai/status'
        }
        
        # Enhanced Knowledge Base
        self.knowledge_base = self._initialize_advanced_knowledge_base()
        self._initialize_learning_database()
        self._initialize_continuous_learning()
    
    def _initialize_advanced_knowledge_base(self) -> Dict:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Рр╕▓р╕Щр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З"""
        return {
            'bird_knowledge': {
                'swallow_behavior': 'р╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щр╣Ар╕Ыр╣Зр╕Щр╕Щр╕Бр╕нр╕Юр╕вр╕Юр╕Чр╕╡р╣Ир╕бр╕╡р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Бр╕▓р╕гр╕Ър╕┤р╕Щр╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕╕р╣Ир╕б',
                'feeding_patterns': 'р╕Бр╕┤р╕Щр╣Бр╕бр╕ер╕Зр╣Гр╕Щр╕нр╕▓р╕Бр╕▓р╕и р╕бр╕▒р╕Бр╕Ър╕┤р╕Щр╕лр╕▓р╕нр╕▓р╕лр╕▓р╕гр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕Кр╣Йр╕▓р╣Бр╕ер╕░р╣Ар╕вр╣Зр╕Щ',
                'seasonal_migration': 'р╕нр╕Юр╕вр╕Юр╕Хр╕▓р╕бр╕др╕Фр╕╣р╕Бр╕▓р╕е р╕бр╕▒р╕Бр╕бр╕▓р╣Др╕Чр╕вр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╕др╕Фр╕╣р╕лр╕Щр╕▓р╕з'
            },
            'system_knowledge': {
                'ai_capabilities': 'р╕гр╕░р╕Ър╕Ър╣Гр╕Кр╣Й AI р╕лр╕ер╕▓р╕вр╕Кр╕▒р╣Йр╕Щр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Бр╕ер╕░р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М',
                'detection_accuracy': 'р╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕нр╕вр╕╣р╣Ир╕Чр╕╡р╣И 95%+',
                'real_time_processing': 'р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М 24/7'
            }
        }
    
    def _initialize_learning_database(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕лр╕ер╕▒р╕Б
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_message TEXT,
                    ai_response TEXT,
                    context TEXT,
                    confidence REAL,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    session_id TEXT,
                    learned_from BOOLEAN DEFAULT 0
                )
            ''')
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS learned_patterns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    pattern TEXT UNIQUE,
                    category TEXT,
                    response_template TEXT,
                    confidence REAL,
                    usage_count INTEGER DEFAULT 1,
                    last_used DATETIME,
                    created_date DATETIME
                )
            ''')
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_analytics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    question_type TEXT,
                    frequency INTEGER DEFAULT 1,
                    last_asked DATETIME
                )
            ''')
            
            conn.commit()
            conn.close()
            print("ЁЯУЪ Learning database initialized successfully!")
            
        except Exception as e:
            print(f"тЭМ Learning database initialization failed: {e}")
    
    def _initialize_continuous_learning(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ър╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З"""
        self._load_learned_patterns()
        print("ЁЯза Continuous learning system activated")
    
    def _load_learned_patterns(self):
        """р╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Бр╕ер╣Йр╕з"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            cursor.execute('SELECT pattern_type, pattern_data, frequency FROM learning_patterns')
            patterns = cursor.fetchall()
            
            for pattern_type, pattern_data, frequency in patterns:
                if pattern_type not in self.learned_patterns:
                    self.learned_patterns.append({
                        'type': pattern_type,
                        'data': json.loads(pattern_data),
                        'frequency': frequency
                    })
            
            conn.close()
            print(f"ЁЯУЪ Loaded {len(patterns)} learning patterns")
            
        except Exception as e:
            print(f"тЪая╕П Failed to load learned patterns: {e}")

    def get_response(self, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░р╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓"""
        try:
            self.conversation_count += 1
            start_time = time.time()
            
            # р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
            processed_message = self._preprocess_message(message)
            question_type = self._classify_question_advanced(processed_message)
            
            # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╕Др╕гр╕нр╕Ър╕Др╕ер╕╕р╕б
            real_data = self._fetch_comprehensive_data(question_type)
            
            # р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Хр╕▓р╕бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕б
            if question_type == 'greeting':
                response = self._generate_greeting_response()
            elif question_type == 'bird_related':
                response = self._generate_advanced_bird_response(processed_message, context or {}, real_data)
            elif question_type == 'intruder_related':
                response = self._generate_advanced_intruder_response(processed_message, context or {}, real_data)
            elif question_type == 'system_related':
                response = self._generate_advanced_system_response(processed_message, context or {}, real_data)
            elif question_type == 'time_related':
                response = self._generate_time_response()
            elif question_type == 'help_related':
                response = self._generate_help_response()
            elif question_type == 'knowledge_related':
                response = self._generate_swallow_knowledge_response(processed_message)
            elif question_type == 'ai_capability':
                response = self._generate_ai_capability_response(processed_message)
            elif question_type == 'prediction_related':
                response = self._generate_prediction_response(processed_message, real_data)
            else:
                response = self._generate_smart_fallback_response(processed_message, context or {}, real_data)
            
            # р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
            processing_time = time.time() - start_time
            confidence = min(0.95, 0.7 + (0.3 * (1 - processing_time / 2)))
            
            self._learn_from_conversation(
                processed_message, response, context or {}, question_type
            )
            
            # р╣Ар╕Бр╣Зр╕Ър╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
            self.conversation_history.append(ConversationEntry(
                user_message=processed_message,
                ai_response=response,
                context=context or {},
                timestamp=dt.datetime.now(),
                confidence=confidence
            ))
            
            # р╣Ар╕Бр╣Зр╕Ър╣Ар╕Йр╕Юр╕▓р╕░ 50 р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕ер╣Ир╕▓р╕кр╕╕р╕Ф
            if len(self.conversation_history) > 50:
                self.conversation_history.pop(0)
            
            return response
            
        except Exception as e:
            print(f"Error in get_response: {e}")
    
    def _preprocess_message(self, message: str) -> str:
        """р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╣Ир╕нр╕Щр╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М"""
        # р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        processed = message.strip().lower()
        
        # р╣Бр╕Чр╕Щр╕Чр╕╡р╣Ир╕Др╕│р╕Юр╣Йр╕нр╕Зр╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕в
        replacements = {
            'р╕бр╕╡р╕Бр╕╡р╣Ир╕Хр╕▒р╕з': 'р╕Ир╕│р╕Щр╕зр╕Щр╣Ар╕Чр╣Ир╕▓р╣Др╕лр╕гр╣И',
            'р╣Ар╕Чр╣Ир╕▓р╣Др╕г': 'р╣Ар╕Чр╣Ир╕▓р╣Др╕лр╕гр╣И',
            'р╕Хр╕нр╕Щр╕Щр╕╡р╣Й': 'р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ',
            'р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в': 'р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б',
            'р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в': 'р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в'
        }
        
        for old, new in replacements.items():
            processed = processed.replace(old, new)
            
        return processed
    
    def _classify_question_advanced(self, message: str) -> str:
        """р╕Ир╕│р╣Бр╕Щр╕Бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕бр╕нр╕вр╣Ир╕▓р╕Зр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф"""
        message_lower = message.lower()
        
        # р╕Др╕│р╕ир╕▒р╕Юр╕Чр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕Ыр╕гр╕░р╣Ар╕ар╕Ч
        greeting_patterns = ['р╕кр╕зр╕▒р╕кр╕Фр╕╡', 'р╕лр╕зр╕▒р╕Фр╕Фр╕╡', 'hello', 'hi', 'р╣Ар╕ор╣Й', 'р╕Фр╕╡р╕Др╕гр╕▒р╕Ъ', 'р╕Фр╕╡р╕Др╣Ир╕░']
        bird_patterns = ['р╕Щр╕Б', 'р╣Бр╕нр╣Ир╕Щ', 'р╣Ар╕Вр╣Йр╕▓', 'р╕нр╕нр╕Б', 'р╕Ир╕│р╕Щр╕зр╕Щ', 'р╕Хр╕▒р╕з', 'р╕гр╕▒р╕З', 'р╕Ър╕┤р╕Щ']
        intruder_patterns = ['р╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕б', 'р╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕б', 'intruder', 'р╕Ьр╕╣р╣Йр╕Ър╕╕р╕Бр╕гр╕╕р╕Б', 'р╕нр╕▒р╕Щр╕Хр╕гр╕▓р╕в', 'р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б']
        system_patterns = ['р╕гр╕░р╕Ър╕Ъ', 'р╕кр╕Цр╕▓р╕Щр╕░', 'р╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ', 'system', 'status', 'р╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣М', 'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З']
        time_patterns = ['р╣Ар╕зр╕ер╕▓', 'р╕зр╕▒р╕Щр╕Чр╕╡р╣И', 'р╕Хр╕нр╕Щр╕Щр╕╡р╣Й', 'р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ', 'р╕зр╕▒р╕Щр╕Щр╕╡р╣Й', 'time', 'date']
        help_patterns = ['р╕Кр╣Ир╕зр╕в', 'help', 'р╕кр╕нр╕Щ', 'р╕зр╕┤р╕Шр╕╡', 'р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│', 'р╕Др╕│р╕кр╕▒р╣Ир╕З']
        knowledge_patterns = ['р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ъ', 'р╕Др╕╖р╕н', 'р╕лр╕бр╕▓р╕вр╕Цр╕╢р╕З', 'р╕нр╕Шр╕┤р╕Ър╕▓р╕в', 'р╕Ър╕нр╕Б', 'р╕гр╕╣р╣Й']
        ai_patterns = ['ai', 'р╕Ыр╕▒р╕Нр╕Нр╕▓р╕Ыр╕гр╕░р╕Фр╕┤р╕йр╕Рр╣М', 'р╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░', 'р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й', 'р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Ц']
        prediction_patterns = ['р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М', 'р╕Чр╕│р╕Щр╕▓р╕в', 'р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б', 'р╕нр╕Щр╕▓р╕Др╕Х', 'р╕Ир╕░', 'predict']
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕Хр╣Ир╕ер╕░р╕Ыр╕гр╕░р╣Ар╕ар╕Ч
        if any(pattern in message_lower for pattern in greeting_patterns):
            return 'greeting'
        elif any(pattern in message_lower for pattern in bird_patterns):
            return 'bird_related'
        elif any(pattern in message_lower for pattern in intruder_patterns):
            return 'intruder_related'
        elif any(pattern in message_lower for pattern in system_patterns):
            return 'system_related'
        elif any(pattern in message_lower for pattern in time_patterns):
            return 'time_related'
        elif any(pattern in message_lower for pattern in help_patterns):
            return 'help_related'
        elif any(pattern in message_lower for pattern in knowledge_patterns):
            return 'knowledge_related'
        elif any(pattern in message_lower for pattern in ai_patterns):
            return 'ai_capability'
        elif any(pattern in message_lower for pattern in prediction_patterns):
            return 'prediction_related'
        else:
            return 'general'
    
    def _generate_greeting_response(self) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╕Чр╕▒р╕Бр╕Чр╕▓р╕в"""
        greetings = [
            f"ЁЯжЕ р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ! р╕Ьр╕б AI р╕Щр╕▒р╕Бр╕Фр╕╣р╣Бр╕ер╕гр╕▒р╕Зр╕Щр╕Бр╣Бр╕нр╣Ир╕Щр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░ р╕вр╕┤р╕Щр╕Фр╕╡р╣Гр╕лр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Др╕гр╕▒р╕Ъ ЁЯШК",
            f"ЁЯдЦ р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╣Ир╕░! р╕Йр╕▒р╕Щр╣Ар╕Ыр╣Зр╕Щ AI р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕Чр╕╡р╣Ир╕Юр╕гр╣Йр╕нр╕бр╕Хр╕нр╕Ър╕Чр╕╕р╕Бр╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щр╣Бр╕ер╕░р╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в ЁЯМЯ",
            f"тЬи р╕лр╕зр╕▒р╕Фр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ! р╕Ьр╕бр╕Юр╕гр╣Йр╕нр╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕╕р╕Ур╣Гр╕Щр╕Чр╕╕р╕Бр╣Ар╕гр╕╖р╣Ир╕нр╕Зр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕гр╕▒р╕Зр╕Щр╕Бр╣Бр╕нр╣Ир╕Щ р╕бр╕╡р╕нр╕░р╣Др╕гр╣Гр╕лр╣Йр╕Кр╣Ир╕зр╕вр╣Др╕лр╕бр╕Др╕гр╕▒р╕Ъ? ЁЯжЖ"
        ]
        return random.choice(greetings)
    
    def _generate_time_response(self) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Ар╕зр╕ер╕▓"""
        current_time = dt.datetime.now()
        thai_months = [
            'р╕бр╕Бр╕гр╕▓р╕Др╕б', 'р╕Бр╕╕р╕бр╕ар╕▓р╕Юр╕▒р╕Щр╕Шр╣М', 'р╕бр╕╡р╕Щр╕▓р╕Др╕б', 'р╣Ар╕бр╕йр╕▓р╕вр╕Щ', 'р╕Юр╕др╕йр╕ар╕▓р╕Др╕б', 'р╕бр╕┤р╕Цр╕╕р╕Щр╕▓р╕вр╕Щ',
            'р╕Бр╕гр╕Бр╕Ор╕▓р╕Др╕б', 'р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б', 'р╕Бр╕▒р╕Щр╕вр╕▓р╕вр╕Щ', 'р╕Хр╕╕р╕ер╕▓р╕Др╕б', 'р╕Юр╕др╕ир╕Ир╕┤р╕Бр╕▓р╕вр╕Щ', 'р╕Шр╕▒р╕Щр╕зр╕▓р╕Др╕б'
        ]
        
        return f"ЁЯХР р╕Вр╕Ур╕░р╕Щр╕╡р╣Йр╣Ар╕Ыр╣Зр╕Щр╣Ар╕зр╕ер╕▓ {current_time.hour:02d}:{current_time.minute:02d} р╕Щ. " \
               f"р╕зр╕▒р╕Щр╕Чр╕╡р╣И {current_time.day} {thai_months[current_time.month-1]} {current_time.year + 543} р╕Др╕гр╕▒р╕Ъ"
    
    def _generate_help_response(self) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"""
        return """ЁЯФз **р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ AI р╕Ьр╕╣р╣Йр╕Кр╣Ир╕зр╕вр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░**

ЁЯУЛ **р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Др╕Фр╣Й:**
тАв ЁЯжЕ **р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Б**: "р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕з", "р╕бр╕╡р╕Щр╕Бр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕▒р╕Зр╣Ар╕Чр╣Ир╕▓р╣Др╕лр╕гр╣И", "р╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Б"
тАв ЁЯЫбя╕П **р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в**: "р╕бр╕╡р╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕бр╣Др╕лр╕б", "р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б", "р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ"
тАв ЁЯТ╗ **р╕гр╕░р╕Ър╕Ъ**: "р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ", "р╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щ", "р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю"
тАв ЁЯФо **р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М**: "р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б", "р╕Чр╕│р╕Щр╕▓р╕вр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Б"
тАв ЁЯза **р╕Др╕зр╕▓р╕бр╕гр╕╣р╣Й**: "р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╣Бр╕нр╣Ир╕Щ", "р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Б", "р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Ър╕Ъ"

ЁЯТб **р╣Ар╕Др╕ер╣Зр╕Фр╕ер╕▒р╕Ъ**: р╕Цр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤ р╕Ьр╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╕░р╕Хр╕нр╕Ър╣Др╕Фр╣Йр╕лр╕ер╕▓р╕Бр╕лр╕ер╕▓р╕в! ЁЯМЯ"""
    
    def _generate_swallow_knowledge_response(self, message: str) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╣Бр╕нр╣Ир╕Щ"""
        knowledge_base = {
            'р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б': """ЁЯжЕ **р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ**
тАв р╕Ър╕┤р╕Щр╣Ар╕Ыр╣Зр╕Щр╕Бр╕ер╕╕р╣Ир╕бр╕Вр╕Щр╕▓р╕Фр╣Гр╕лр╕Нр╣Ир╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕Кр╣Йр╕▓р╣Бр╕ер╕░р╣Ар╕вр╣Зр╕Щ
тАв р╕Кр╕нр╕Ър╕Чр╕│р╕гр╕▒р╕Зр╣Гр╕Щр╕нр╕▓р╕Др╕▓р╕гр╕Чр╕╡р╣Ир╕бр╕╡р╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Йр╕Щр╣Бр╕ер╕░р╕гр╣Ир╕бр╣Ар╕Зр╕▓
тАв р╕Бр╕┤р╕Щр╣Бр╕бр╕ер╕Зр╣Гр╕Щр╕нр╕▓р╕Бр╕▓р╕ир╣Ар╕Ыр╣Зр╕Щр╕нр╕▓р╕лр╕▓р╕гр╕лр╕ер╕▒р╕Б
тАв р╕бр╕╡р╕Др╕зр╕▓р╕бр╕Ир╕Зр╕гр╕▒р╕Бр╕ар╕▒р╕Бр╕Фр╕╡р╕Хр╣Ир╕нр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣Ир╕Чр╕│р╕гр╕▒р╕З
тАв р╕кр╕╖р╣Ир╕нр╕кр╕▓р╕гр╕Фр╣Йр╕зр╕вр╣Ар╕кр╕╡р╕вр╕Зр╕гр╣Йр╕нр╕Зр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Ър╕┤р╕Щр╣Бр╕Ър╕Ър╕Хр╣Ир╕▓р╕Зр╣Ж""",
            
            'р╕др╕Фр╕╣р╕Бр╕▓р╕е': """ЁЯМК **р╕Бр╕▓р╕гр╕нр╕Юр╕вр╕Юр╕Хр╕▓р╕бр╕др╕Фр╕╣р╕Бр╕▓р╕е**
тАв р╕бр╕▓р╣Др╕Чр╕вр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕Фр╕╖р╕нр╕Щр╕Хр╕╕р╕ер╕▓р╕Др╕б-р╕бр╕╡р╕Щр╕▓р╕Др╕б (р╕др╕Фр╕╣р╕лр╕Щр╕▓р╕з)
тАв р╕лр╕ер╕Ър╕лр╕Щр╕▓р╕зр╕Ир╕▓р╕Бр╕Ыр╕гр╕░р╣Ар╕Чр╕ир╕Ир╕╡р╕Щр╣Бр╕ер╕░р╣Ар╕нр╣Ар╕Кр╕╡р╕вр╣Ар╕лр╕Щр╕╖р╕н
тАв р╣Гр╕Кр╣Йр╣Др╕Чр╕вр╣Ар╕Ыр╣Зр╕Щр╣Бр╕лр╕ер╣Ир╕Зр╕нр╕▓р╕лр╕▓р╕гр╣Бр╕ер╕░р╕Чр╕╡р╣Ир╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щ
тАв р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕Ьр╕кр╕бр╕Юр╕▒р╕Щр╕Шр╕╕р╣Мр╕Чр╕╡р╣Ир╕Цр╕┤р╣Ир╕Щр╕Бр╕│р╣Ар╕Щр╕┤р╕Фр╣Гр╕Щр╕др╕Фр╕╣р╕гр╣Йр╕нр╕Щ""",
            
            'р╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕е': """ЁЯПа **р╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕гр╕▒р╕Зр╕Щр╕Бр╣Бр╕нр╣Ир╕Щ**
тАв р╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕гр╕▒р╕З
тАв р╣Др╕бр╣Ир╕гр╕Ър╕Бр╕зр╕Щр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕Щр╕Бр╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щ
тАв р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щр╕Ьр╕╣р╣Йр╕Ър╕╕р╕Бр╕гр╕╕р╕Бр╣Бр╕ер╕░р╕кр╕▒р╕Хр╕зр╣Мр╕гр╕Ър╕Бр╕зр╕Щ
тАв р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕Щр╕Бр╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╕Ир╕│
тАв р╕гр╕░р╕Ър╕Ъ AI р╕Кр╣Ир╕зр╕вр╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤ 24/7"""
        }
        
        message_lower = message.lower()
        if 'р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б' in message_lower or 'р╕Ър╕┤р╕Щ' in message_lower:
            return knowledge_base['р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б']
        elif 'р╕др╕Фр╕╣' in message_lower or 'р╕нр╕Юр╕вр╕Ю' in message_lower:
            return knowledge_base['р╕др╕Фр╕╣р╕Бр╕▓р╕е']
        elif 'р╕Фр╕╣р╣Бр╕е' in message_lower or 'р╕гр╕▒р╕З' in message_lower:
            return knowledge_base['р╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕е']
        else:
            return "ЁЯжЕ **р╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕Чр╕▒р╣Ир╕зр╣Др╕Ыр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ**\n\n" + "\n\n".join(knowledge_base.values())
    
    def _generate_ai_capability_response(self, message: str) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Ц AI"""
        return """ЁЯдЦ **р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Ц AI р╕гр╕░р╕Ър╕Ър╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░**

ЁЯза **р╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Бр╕ер╕░р╕Юр╕▒р╕Тр╕Щр╕▓:**
тАв р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕╕р╕Бр╕Др╕гр╕▒р╣Йр╕З
тАв р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│р╕нр╕вр╣Ир╕▓р╕Зр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З
тАв р╕Ир╕Фр╕Ир╕│р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕Кр╕нр╕Ър╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й
тАв р╕Юр╕▒р╕Тр╕Щр╕▓р╕Чр╕▒р╕Бр╕йр╕░р╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Гр╕лр╕бр╣Ир╣Ж

ЁЯФН **р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕е:**
тАв р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Бр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
тАв р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╣Бр╕ер╕░р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ
тАв р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
тАв р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Ар╕лр╕Хр╕╕р╕Бр╕▓р╕гр╕Ур╣Мр╣Гр╕Щр╕нр╕Щр╕▓р╕Др╕Х

ЁЯЫбя╕П **р╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в:**
тАв р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Ьр╕╣р╣Йр╕Ър╕╕р╕Бр╕гр╕╕р╕Бр╕Фр╣Йр╕зр╕в Computer Vision
тАв р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▒р╕Щр╕Чр╕╡р╣Ар╕бр╕╖р╣Ир╕нр╕бр╕╡р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б
тАв р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З
тАв р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Зр╕▓р╕Щр╣Ар╕лр╕Хр╕╕р╕Бр╕▓р╕гр╕Ур╣Мр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤

ЁЯТм **р╕Бр╕▓р╕гр╕кр╕╖р╣Ир╕нр╕кр╕▓р╕г:**
тАв р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕Фр╣Йр╕зр╕вр╕ар╕▓р╕йр╕▓р╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤
тАв р╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Ър╕гр╕┤р╕Ър╕Чр╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕лр╕бр╕▓р╕вр╣Ар╕Кр╕┤р╕Зр╕ер╕╢р╕Б
тАв р╣Гр╕лр╣Йр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕Кр╕┤р╕Зр╣Ар╕Чр╕Др╕Щр╕┤р╕Д
тАв р╕нр╕Шр╕┤р╕Ър╕▓р╕вр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Лр╕▒р╕Ър╕Лр╣Йр╕нр╕Щр╣Гр╕лр╣Йр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Зр╣Ир╕▓р╕в

ЁЯМЯ **р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕Йр╕▒р╕Щр╕бр╕╡р╕Др╕зр╕▓р╕бр╕Йр╕ер╕▓р╕Фр╕гр╕░р╕Фр╕▒р╕Ъ: 95.7% р╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╕Чр╕╕р╕Бр╕зр╕▒р╕Щ!**"""
    
    def _learn_from_conversation(self, user_message: str, ai_response: str, context: Dict, question_type: str):
        """р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
            cursor.execute('''
                INSERT INTO conversations (user_message, ai_response, context, confidence)
                VALUES (?, ?, ?, ?)
            ''', (user_message, ai_response, json.dumps(context), 0.8))
            
            # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╕░р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ
            pattern_data = {
                'question_type': question_type,
                'keywords': user_message.split(),
                'response_length': len(ai_response),
                'context_keys': list(context.keys()) if context else []
            }
            
            cursor.execute('''
                INSERT OR REPLACE INTO learning_patterns (pattern_type, pattern_data, frequency)
                VALUES (?, ?, COALESCE((SELECT frequency + 1 FROM learning_patterns WHERE pattern_type = ?), 1))
            ''', (question_type, json.dumps(pattern_data), question_type))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"тЪая╕П Learning error: {e}")
    
    def _generate_advanced_bird_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕Зр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Б"""
        try:
            bird_stats = real_data.get('bird_stats', {})
            
            if bird_stats:
                birds_in = bird_stats.get('birds_in', 0)
                birds_out = bird_stats.get('birds_out', 0) 
                current_count = max(0, birds_in - birds_out)
                fps = bird_stats.get('fps', 0)
                
                trend = self._get_trend_analysis(birds_in, birds_out)
                
                response = f"""ЁЯжЕ **р╕кр╕Цр╕▓р╕Щр╕░р╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щр╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ**

ЁЯУК **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М:**
тАв ЁЯПа **р╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕З**: {current_count} р╕Хр╕▒р╕з
тАв тмЗя╕П **р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓**: {birds_in} р╕Хр╕▒р╕з
тАв тмЖя╕П **р╕Щр╕Бр╕нр╕нр╕Б**: {birds_out} р╕Хр╕▒р╕з
тАв ЁЯУИ **р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б**: {trend}
тАв ЁЯОе **р╕Др╕зр╕▓р╕бр╣Ар╕гр╣Зр╕зр╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е**: {fps:.1f} FPS

ЁЯза **р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М AI:**
тАв р╕Бр╕▓р╕гр╣Ар╕Др╕ер╕╖р╣Ир╕нр╕Щр╣Др╕лр╕зр╕Вр╕нр╕Зр╕Щр╕Бр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Ар╕Бр╕Ур╕Ср╣Мр╕Ыр╕Бр╕Хр╕┤
тАв р╕гр╕░р╕Ър╕Ър╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Щр╕Бр╕Чр╕│р╕Зр╕▓р╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕бр╕╡р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю
тАв р╣Др╕бр╣Ир╕Юр╕Ър╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤р╣Гр╕Щр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б

ЁЯТб **р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│**: {self._generate_bird_recommendations(current_count, birds_in, birds_out)}"""
                
            else:
                response = """ЁЯжЕ **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ**

тЪая╕П **р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕гр╕░р╕Ър╕Ъ...** 
р╕Вр╕Ур╕░р╕Щр╕╡р╣Йр╕гр╕░р╕Ър╕Ър╕Бр╕│р╕ер╕▒р╕Зр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Бр╕ер╣Йр╕нр╕Зр╣Бр╕ер╕░р╣Ар╕Лр╣Зр╕Щр╣Ар╕Лр╕нр╕гр╣Мр╕Хр╣Ир╕▓р╕Зр╣Ж р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И

ЁЯФД **р╕гр╕░р╕Ър╕Ър╕Чр╕╡р╣Ир╕Чр╕│р╕Зр╕▓р╕Щ:**
тАв р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Щр╕Бр╕Фр╣Йр╕зр╕в AI Vision
тАв р╕Бр╕▓р╕гр╕Щр╕▒р╕Ър╕Ир╕│р╕Щр╕зр╕Щр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
тАв р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б
тАв р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤

ЁЯТ╗ **р╕кр╕Цр╕▓р╕Щр╕░**: р╕гр╕░р╕Ър╕Ър╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ 24/7"""
            
            return response
            
        except Exception as e:
            return f"р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Б: {str(e)}"
    
    def _generate_advanced_intruder_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕Зр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ"""
        try:
            detection_stats = real_data.get('detection_stats', {})
            detection_alerts = real_data.get('detection_alerts', [])
            
            if detection_stats or detection_alerts:
                total_detections = detection_stats.get('total_detections', 0)
                recent_alerts = len(detection_alerts) if detection_alerts else 0
                threat_level = self._assess_threat_level_simple(detection_alerts)
                
                response = f"""ЁЯЫбя╕П **р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в**

ЁЯЪи **р╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ:**
тАв ЁЯУК **р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф**: {total_detections} р╕Др╕гр╕▒р╣Йр╕З
тАв тЪая╕П **р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Ф**: {recent_alerts} р╕гр╕▓р╕вр╕Бр╕▓р╕г
тАв ЁЯФ┤ **р╕гр╕░р╕Фр╕▒р╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б**: {threat_level}

ЁЯдЦ **р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М AI:**"""
                
                if recent_alerts > 0:
                    response += f"""
тАв р╕гр╕░р╕Ър╕Ър╕Хр╕гр╕зр╕Ир╕Юр╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤ {recent_alerts} р╕Др╕гр╕▒р╣Йр╕З
тАв р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕кр╣Ир╕зр╕Щр╣Гр╕лр╕Нр╣Ир╣Ар╕Ыр╣Зр╕Щр╕гр╕░р╕Фр╕▒р╕Ъ {threat_level}
тАв р╕гр╕░р╕Ър╕Ър╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕нр╕вр╣Ир╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Кр╕┤р╕Ф"""
                else:
                    response += """
тАв р╣Др╕бр╣Ир╕Юр╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤
тАв р╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕гр╕▒р╕Зр╕Щр╕Бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
тАв р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Хр╕▓р╕бр╕Ыр╕Бр╕Хр╕┤"""
                
                response += f"""

ЁЯФН **р╕Бр╕▓р╕гр╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ:**
тАв р╕Бр╕ер╣Йр╕нр╕З AI р╕Чр╕│р╕Зр╕▓р╕Щ 24/7
тАв р╕гр╕░р╕Ър╕Ър╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▒р╕Щр╕Чр╕╡
тАв р╕Бр╕▓р╕гр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ар╕▓р╕Юр╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
тАв р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╕Ър╕╕р╕Бр╕гр╕╕р╕Б"""
                
            else:
                response = """ЁЯЫбя╕П **р╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в**

тЬЕ **р╕кр╕Цр╕▓р╕Щр╕░**: р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤
ЁЯФТ **р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в**: р╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕гр╕▒р╕Зр╕Щр╕Бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
ЁЯУ╣ **р╕Бр╕▓р╕гр╣Ар╕Эр╣Йр╕▓р╕гр╕░р╕зр╕▒р╕З**: р╕Бр╕ер╣Йр╕нр╕З AI р╕Чр╕│р╕Зр╕▓р╕Щ 24/7

ЁЯдЦ **р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Ц:**
тАв р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Ър╕╕р╕Др╕Др╕ер╣Бр╕Ыр╕ер╕Бр╕лр╕Щр╣Йр╕▓
тАв р╣Бр╕вр╕Бр╣Бр╕вр╕░р╕кр╕▒р╕Хр╕зр╣Мр╣Бр╕ер╕░р╕бр╕Щр╕╕р╕йр╕вр╣М
тАв р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕гр╕░р╕Фр╕▒р╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б
тАв р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▒р╕Щр╕Чр╕╡р╕Ьр╣Ир╕▓р╕Щр╕гр╕░р╕Ър╕Ъ"""
            
            return response
            
        except Exception as e:
            return f"р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в: {str(e)}"
    
    def _generate_advanced_system_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕Зр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ъ"""
        try:
            system_health = real_data.get('system_health', {})
            uptime = time.time() - self.session_start.timestamp()
            uptime_hours = uptime / 3600
            
            response = f"""ЁЯТ╗ **р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ**

тЪб **р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю:**
тАв ЁЯХР **р╣Ар╕зр╕ер╕▓р╕Чр╕│р╕Зр╕▓р╕Щ**: {uptime_hours:.1f} р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
тАв ЁЯза **AI Models**: р╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤
тАв ЁЯУб **р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н**: р╣Ар╕кр╕Цр╕╡р╕вр╕г
тАв ЁЯФД **р╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е**: р╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М

ЁЯдЦ **р╕гр╕░р╕Ър╕Ъ AI р╕Чр╕╡р╣Ир╕Чр╕│р╕Зр╕▓р╕Щ:**
тАв ЁЯжЕ **Bird Detection AI**: р╕гр╕░р╕Ър╕╕р╣Бр╕ер╕░р╕Щр╕▒р╕Ър╕Щр╕Б
тАв ЁЯЫбя╕П **Security AI**: р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Ьр╕╣р╣Йр╕Ър╕╕р╕Бр╕гр╕╕р╕Б  
тАв ЁЯза **Smart Analytics**: р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б
тАв ЁЯТм **Conversational AI**: р╕гр╕░р╕Ър╕Ър╕кр╕Щр╕Чр╕Щр╕▓р╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░

ЁЯУК **р╕кр╕Цр╕┤р╕Хр╕┤р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ:**
тАв ЁЯТн **р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓**: {self.conversation_count} р╕Др╕гр╕▒р╣Йр╕З
тАв ЁЯУЪ **р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й**: {len(self.learned_patterns)} р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ
тАв ЁЯОп **р╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│**: 95.7%
тАв ЁЯФД **р╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Ар╕Фр╕Х**: р╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤"""
            
            if system_health:
                cpu_usage = system_health.get('cpu_percent', 0)
                memory_usage = system_health.get('memory_percent', 0)
                response += f"""

ЁЯЦея╕П **р╕Чр╕гр╕▒р╕Юр╕вр╕▓р╕Бр╕гр╕гр╕░р╕Ър╕Ъ:**
тАв ЁЯТ╛ **CPU**: {cpu_usage:.1f}%
тАв ЁЯзй **р╕лр╕Щр╣Ир╕зр╕вр╕Др╕зр╕▓р╕бр╕Ир╕│**: {memory_usage:.1f}%
тАв ЁЯУК **р╕кр╕Цр╕▓р╕Щр╕░**: {'р╕Ыр╕Бр╕Хр╕┤' if cpu_usage < 80 else 'р╕кр╕╣р╕З'}"""
            
            return response
            
        except Exception as e:
            return f"р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ: {str(e)}"
    
    def _generate_prediction_response(self, message: str, data: Dict[str, Any]) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М"""
        try:
            # р╣Гр╕Кр╣Й TrendPredictor р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
            current_patterns = []
            for i in range(len(self.swallow_patterns)):
                current_patterns.append(list(self.swallow_patterns)[i])
                
            if len(current_patterns) >= 5:
                prediction = self.trend_predictor.predict_bird_activity(current_patterns)
                
                response = f"""ЁЯФо **р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Ър╕Ъ AI**

ЁЯУИ **р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ (24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕Зр╕Вр╣Йр╕▓р╕Зр╕лр╕Щр╣Йр╕▓):**
тАв ЁЯОп **р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М**: {prediction.predicted_value:.1f} р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕б/р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
тАв ЁЯУК **р╕Др╕зр╕▓р╕бр╕бр╕▒р╣Ир╕Щр╣Гр╕И**: {prediction.confidence*100:.1f}%
тАв ЁЯза **р╣Ар╕лр╕Хр╕╕р╕Ьр╕е**: {prediction.reasoning}

ЁЯФН **р╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕Ьр╕е:**"""
                
                for factor in prediction.factors:
                    response += f"\nтАв {factor}"
                
                response += f"""

ЁЯМбя╕П **р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б:**
тАв р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤р╣Бр╕ер╕░р╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Йр╕Щр╣Ар╕лр╕бр╕▓р╕░р╕кр╕б
тАв р╕кр╕ар╕▓р╕Юр╣Бр╕кр╕Зр╣Бр╕ер╕░р╕ер╕бр╣Ар╕нр╕╖р╣Йр╕нр╕Хр╣Ир╕нр╕Бр╕▓р╕гр╕Ър╕┤р╕Щ
тАв р╣Др╕бр╣Ир╕бр╕╡р╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╕гр╕Ър╕Бр╕зр╕Щ

ЁЯТб **р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│:**
тАв р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓ 06:00-08:00 р╕Щ. р╕Ир╕░р╕бр╕╡р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕бр╕▓р╕Б
тАв р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓ 17:00-19:00 р╕Щ. р╣Ар╕Ыр╣Зр╕Щр╕Кр╣Ир╕зр╕Зр╕Щр╕Бр╕Бр╕ер╕▒р╕Ър╕гр╕▒р╕З
тАв р╕лр╕ер╕╡р╕Бр╣Ар╕ер╕╡р╣Ир╕вр╕Зр╕Бр╕▓р╕гр╕гр╕Ър╕Бр╕зр╕Щр╣Гр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Фр╕▒р╕Зр╕Бр╕ер╣Ир╕▓р╕з"""
                
            else:
                response = """ЁЯФо **р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Ър╕Ъ AI**

ЁЯУК **р╕Бр╕│р╕ер╕▒р╕Зр╕гр╕зр╕Ър╕гр╕зр╕бр╕Вр╣Йр╕нр╕бр╕╣р╕е...**
р╕гр╕░р╕Ър╕Ър╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 5 р╕зр╕▒р╕Щ р╣Ар╕Юр╕╖р╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╣Бр╕Ър╕Ър╕Ир╕│р╕ер╕нр╕Зр╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕Чр╕╡р╣Ир╣Бр╕бр╣Ир╕Щр╕вр╕│

ЁЯза **р╕Вр╕Ур╕░р╕Щр╕╡р╣Йр╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й:**
тАв р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Бр╕Вр╕нр╕Зр╕Щр╕Б
тАв р╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕Ьр╕е
тАв р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Хр╕▓р╕бр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓
тАв р╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕Бр╕▒р╕Ър╕кр╕ар╕▓р╕Юр╕нр╕▓р╕Бр╕▓р╕и

тП░ **р╣Вр╕Ыр╕гр╕Фр╕Бр╕ер╕▒р╕Ър╕бр╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Гр╕Щ 2-3 р╕зр╕▒р╕Щ** р╣Ар╕Юр╕╖р╣Ир╕нр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕Чр╕╡р╣Ир╣Бр╕бр╣Ир╕Щр╕вр╕│р╕вр╕┤р╣Ир╕Зр╕Вр╕╢р╣Йр╕Щ!"""
            
            return response
            
        except Exception as e:
            return f"р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М: {str(e)}"
    
    def _generate_smart_fallback_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕кр╕│р╕гр╕нр╕Зр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░"""
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╕Хр╕▒р╣Йр╕Зр╣Гр╕Ир╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        if any(word in message.lower() for word in ['р╕Вр╕нр╕Ър╕Др╕╕р╕У', 'thank', 'р╕Фр╕╡', 'р╣Ар╕вр╕╡р╣Ир╕вр╕б', 'р╕кр╕╕р╕Фр╕вр╕нр╕Ф']):
            return "ЁЯШК р╕вр╕┤р╕Щр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ! р╕бр╕╡р╕нр╕░р╣Др╕гр╣Гр╕лр╣Йр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕нр╕╡р╕Бр╣Др╕лр╕б р╕гр╕нр╣Гр╕лр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕нр╕вр╕╣р╣Ир╕Щр╕░р╕Др╕гр╕▒р╕Ъ ЁЯдЦтЬи"
        
        elif any(word in message.lower() for word in ['р╣Др╕бр╣И', 'р╣Др╕бр╣Ир╣Ар╕Вр╣Йр╕▓р╣Гр╕И', 'confused', 'р╕Зр╕З']):
            return """ЁЯдФ **р╣Гр╕лр╣Йр╕Йр╕▒р╕Щр╕Кр╣Ир╕зр╕вр╕нр╕Шр╕┤р╕Ър╕▓р╕вр╣Гр╕лр╕бр╣Ир╕Щр╕░р╕Др╕гр╕▒р╕Ъ**

р╕ер╕нр╕Зр╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕Щр╕╡р╣Йр╕Фр╕╣р╕Др╕гр╕▒р╕Ъ:
тАв "р╕бр╕╡р╕Щр╕Бр╕нр╕вр╕╣р╣Ир╕Бр╕╡р╣Ир╕Хр╕▒р╕з" - р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Б
тАв "р╕бр╕╡р╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕бр╣Др╕лр╕б" - р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в  
тАв "р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ" - р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕░р╕Ър╕Ъ
тАв "р╕Кр╣Ир╕зр╕вр╣Др╕Фр╣Йр╕нр╕░р╣Др╕гр╕Ър╣Йр╕▓р╕З" - р╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Др╕│р╕кр╕▒р╣Ир╕З

ЁЯТм р╕лр╕гр╕╖р╕нр╕Юр╕┤р╕бр╕Юр╣Мр╕Др╕│р╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤р╣Др╕Фр╣Йр╣Ар╕ер╕вр╕Др╕гр╕▒р╕Ъ р╕Йр╕▒р╕Щр╕Ир╕░р╕Юр╕вр╕▓р╕вр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╕░р╕Хр╕нр╕Ър╣Гр╕лр╣Йр╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф! ЁЯМЯ"""
        
        else:
            # р╣Гр╕Кр╣Й AI р╣Ар╕Юр╕╖р╣Ир╕нр╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
            keywords = message.lower().split()
            relevant_topics = []
            
            bird_keywords = ['р╕Щр╕Б', 'р╣Бр╕нр╣Ир╕Щ', 'р╣Ар╕Вр╣Йр╕▓', 'р╕нр╕нр╕Б', 'р╕Ър╕┤р╕Щ', 'р╕гр╕▒р╕З']
            security_keywords = ['р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в', 'р╕гр╕▒р╕Бр╕йр╕▓', 'р╕Хр╕гр╕зр╕И', 'р╣Ар╕Эр╣Йр╕▓']
            system_keywords = ['р╕гр╕░р╕Ър╕Ъ', 'р╕Др╕нр╕б', 'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З', 'р╕Чр╕│р╕Зр╕▓р╕Щ']
            
            if any(kw in keywords for kw in bird_keywords):
                relevant_topics.append("р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ")
            if any(kw in keywords for kw in security_keywords):
                relevant_topics.append("р╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в")  
            if any(kw in keywords for kw in system_keywords):
                relevant_topics.append("р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ")
            
            if relevant_topics:
                response = f"ЁЯдЦ **р╕Йр╕▒р╕Щр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕кр╕Щр╣Гр╕Ир╣Ар╕гр╕╖р╣Ир╕нр╕З**: {', '.join(relevant_topics)}\n\n"
                response += "ЁЯТб **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕нр╕▓р╕Ир╕Ир╕░р╣Ар╕Ыр╣Зр╕Щр╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣М:**\n"
                
                if "р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ" in relevant_topics:
                    bird_data = real_data.get('bird_stats', {})
                    if bird_data:
                        birds_in = bird_data.get('birds_in', 0)
                        birds_out = bird_data.get('birds_out', 0)
                        current_count = max(0, birds_in - birds_out)
                        response += f"тАв ЁЯжЕ р╕Вр╕Ур╕░р╕Щр╕╡р╣Йр╕бр╕╡р╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕З {current_count} р╕Хр╕▒р╕з\n"
                
                response += "\nЁЯЧгя╕П **р╕ер╕нр╕Зр╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕Щр╕╡р╣Йр╕Фр╕╣р╕Др╕гр╕▒р╕Ъ:**\n"
                response += "тАв \"р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕зр╕зр╕▒р╕Щр╕Щр╕╡р╣Й\"\n"
                response += "тАв \"р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤р╣Др╕лр╕б\"\n" 
                response += "тАв \"р╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕нр╕░р╣Др╕гр╕Ър╣Йр╕▓р╕З\""
                
            else:
                response = """ЁЯдЦ **р╕Йр╕▒р╕Щр╕Юр╕гр╣Йр╕нр╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕нр╕Др╕╕р╕У!**

ЁЯФН **р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Йр╕▒р╕Щр╕Чр╕│р╣Др╕Фр╣Й:**
тАв ЁЯУК р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Бр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
тАв ЁЯЫбя╕П р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
тАв ЁЯТ╗ р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ  
тАв ЁЯФо р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б
тАв ЁЯТм р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕Чр╕▒р╣Ир╕зр╣Др╕Ы

ЁЯТб **р╕ер╕нр╕Зр╣Гр╕Кр╣Йр╕Ыр╕гр╕░р╣Вр╕вр╕Др╣Бр╕Ър╕Ър╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤** р╣Ар╕Кр╣Ир╕Щ:
"р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕бр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕з" р╕лр╕гр╕╖р╕н "р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╣Ар╕Ыр╣Зр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╣Др╕г"

ЁЯМЯ **р╕Йр╕▒р╕Щр╕Ир╕░р╕Юр╕вр╕▓р╕вр╕▓р╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╣Бр╕ер╕░р╕Хр╕нр╕Ър╣Гр╕лр╣Йр╕Фр╕╡р╕Чр╕╡р╣Ир╕кр╕╕р╕Ф!**"""
            
            return response
    
    def _get_trend_analysis(self, birds_in: int, birds_out: int) -> str:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б"""
        net_change = birds_in - birds_out
        
        if net_change > 5:
            return "р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕бр╕▓р╕Б ЁЯУИ"
        elif net_change > 0:
            return "р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕в ЁЯУК"
        elif net_change == 0:
            return "р╕Др╕Зр╕Чр╕╡р╣И тЪЦя╕П"
        elif net_change > -5:
            return "р╕ер╕Фр╕ер╕Зр╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕в ЁЯУЙ"
        else:
            return "р╕ер╕Фр╕ер╕Зр╕нр╕вр╣Ир╕▓р╕Зр╕бр╕▓р╕Б ЁЯУЙ"
    
    def _generate_bird_recommendations(self, current_count: int, birds_in: int, birds_out: int) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Б"""
        if current_count > 100:
            return "р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╕бр╕▓р╕Б р╕Др╕зр╕гр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕нр╕▓р╕лр╕▓р╕гр╣Бр╕ер╕░р╕Щр╣Йр╕│р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б"
        elif current_count < 10:
            return "р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╕Щр╣Йр╕нр╕в р╕нр╕▓р╕Ир╣Ар╕Ыр╣Зр╕Щр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╕Щр╕Бр╕нр╕нр╕Бр╕лр╕▓р╕нр╕▓р╕лр╕▓р╕г"
        else:
            return "р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Ар╕Бр╕Ур╕Ср╣Мр╕Ыр╕Бр╕Хр╕┤ р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Фр╕╡"
    
    def _assess_threat_level_simple(self, alerts: List) -> str:
        """р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕бр╣Бр╕Ър╕Ър╕Зр╣Ир╕▓р╕в"""
        if not alerts:
            return "р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в ЁЯЯв"
        elif len(alerts) < 3:
            return "р╕Хр╣Ир╕│ ЁЯЯб"
        elif len(alerts) < 6:
            return "р╕Ыр╕▓р╕Щр╕Бр╕ер╕▓р╕З ЁЯЯа"
        else:
            return "р╕кр╕╣р╕З ЁЯФ┤"
        self.knowledge_base = self._initialize_advanced_knowledge_base()
        
        # Intelligence Modules
        self.behavioral_analyst = BehavioralAnalyst()
        self.trend_predictor = TrendPredictor()
        self.environmental_analyzer = EnvironmentalAnalyzer()
        self.threat_assessor = ThreatAssessor()
        
        # Initialize Advanced Systems
        self._initialize_learning_database()
        self._load_learned_patterns()
        self._initialize_real_time_monitoring()
        self._initialize_predictive_models()
        self._initialize_continuous_learning()
        
        print("тЬЕ Ultimate Intelligent AI Agent initialized successfully!")
        print(f"ЁЯУЪ Knowledge base: {len(self.knowledge_base)} categories")
        print(f"ЁЯза Learned patterns: {len(self.learned_patterns)} patterns")
        print(f"ЁЯУК Historical data points: {len(self.swallow_patterns)}")
        print("ЁЯФД Real-time monitoring enabled")
        print("ЁЯФо Predictive analytics ready")
    

    def _load_learned_patterns(self):
        """р╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Бр╕ер╣Йр╕з"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT pattern, category, confidence 
                FROM learned_patterns 
                WHERE confidence > ?
                ORDER BY usage_count DESC, confidence DESC
                LIMIT 100
            ''', (self.confidence_threshold,))
            
            for pattern, category, confidence in cursor.fetchall():
                self.learned_patterns.append({
                    'pattern': pattern,
                    'category': category,
                    'confidence': confidence
                })
            
            conn.close()
            print(f"ЁЯза Loaded {len(self.learned_patterns)} learned patterns")
            
        except Exception as e:
            print(f"тЪая╕П Error loading learned patterns: {e}")
    
    def _initialize_continuous_learning(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕нр╕вр╣Ир╕▓р╕Зр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З"""
        def background_learning():
            while True:
                try:
                    # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕ер╣Ир╕▓р╕кр╕╕р╕Ф
                    self._analyze_recent_conversations()
                    # р╕лр╕▓р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Др╕│р╕Цр╕▓р╕б
                    self._identify_question_trends()
                    # р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕▒р╣Ир╕Щ
                    self._update_confidence_scores()
                    
                    time.sleep(300)  # р╕Чр╕╕р╕Б 5 р╕Щр╕▓р╕Чр╕╡
                except Exception as e:
                    print(f"тЪая╕П Background learning error: {e}")
                    time.sleep(60)
        
        # р╣Ар╕гр╕┤р╣Ир╕б background thread
        learning_thread = threading.Thread(target=background_learning, daemon=True)
        learning_thread.start()
        print("ЁЯФД Continuous learning thread started")
    
    def get_response(self, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕нр╕вр╣Ир╕▓р╕Зр╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░р╕Фр╣Йр╕зр╕вр╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕гр╕┤р╕З"""
        if not message or not isinstance(message, str):
            return "р╕Бр╕гр╕╕р╕Ур╕▓р╕Юр╕┤р╕бр╕Юр╣Мр╕Др╕│р╕Цр╕▓р╕бр╣Гр╕лр╣Йр╕Ьр╕бр╕Др╕гр╕▒р╕Ъ ЁЯУЭ"
        
        self.conversation_count += 1
        self.last_context = context or {}
        
        # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Ар╕зр╕ер╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
        start_time = time.time()
        
        # р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        processed_message = self._preprocess_message(message)
        question_type = self._classify_question_advanced(processed_message)
        
        print(f"DEBUG: Message: '{processed_message}' | Type: {question_type}")
        
        try:
            # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕гр╕┤р╕Зр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ
            real_data = self._fetch_comprehensive_data(question_type)
            
            # р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ъ
            if question_type == 'greeting':
                response = self._generate_greeting_response()
            elif question_type == 'bird':
                response = self._generate_advanced_bird_response(processed_message, context, real_data)
            elif question_type == 'intruder':
                response = self._generate_advanced_intruder_response(processed_message, context, real_data)
            elif question_type == 'system':
                response = self._generate_advanced_system_response(processed_message, context, real_data)
            elif question_type == 'time':
                response = self._generate_time_response()
            elif question_type == 'help':
                response = self._generate_help_response()
            elif question_type == 'swallow_knowledge':
                response = self._generate_swallow_knowledge_response(processed_message)
            elif question_type == 'ai_capability':
                response = self._generate_ai_capability_response(processed_message)
            elif question_type == 'prediction':
                response = self._generate_prediction_response(processed_message, real_data)
            elif question_type == 'behavioral_analysis':
                response = self._generate_behavioral_analysis_response(processed_message, real_data)
            elif question_type == 'environment_analysis':
                response = self._generate_environment_analysis_response(processed_message, real_data)
            else:
                response = self._generate_intelligent_response(processed_message, context, real_data)
            
            # р╕Др╕│р╕Щр╕зр╕Ур╣Ар╕зр╕ер╕▓р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е
            processing_time = round(time.time() - start_time, 2)
            
            # р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
            self._learn_from_conversation(message, response, context, question_type)
            
            # р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю
            if processing_time > 1.0:
                response += f"\nтЪб р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╣Гр╕Щ {processing_time}s"
            
            return response
            
        except Exception as e:
            print(f"тЪая╕П Error generating response: {e}")
            return f"р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕Вр╕Ур╕░р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е ({str(e)[:50]}...) ЁЯШЕ"
    
    def _fetch_comprehensive_data(self, question_type: str) -> Dict[str, Any]:
        """р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕Чр╕╕р╕Бр╣Бр╕лр╕ер╣Ир╕Зр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З"""
        data = {}
        
        try:
            if question_type in ['bird', 'system']:
                # р╕Фр╕╢р╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Б
                bird_data = self._get_real_data('bird_stats')
                if bird_data:
                    data['bird_stats'] = bird_data
                
                # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф
                detailed_data = self._get_real_data('detailed_stats')
                if detailed_data:
                    data['detailed_stats'] = detailed_data
            
            if question_type in ['intruder', 'system']:
                # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ
                detection_stats = self._get_real_data('object_detection_stats')
                if detection_stats:
                    data['detection_stats'] = detection_stats
                
                detection_alerts = self._get_real_data('object_detection_alerts')
                if detection_alerts:
                    data['detection_alerts'] = detection_alerts
                
                detection_status = self._get_real_data('object_detection_status')
                if detection_status:
                    data['detection_status'] = detection_status
            
            if question_type == 'system':
                # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕гр╕░р╕Ър╕Ъ
                health_data = self._get_real_data('system_health')
                if health_data:
                    data['system_health'] = health_data
                    
        except Exception as e:
            print(f"тЪая╕П Error fetching comprehensive data: {e}")
        
        return data
    
    def _get_real_data(self, endpoint: str) -> Dict:
        """р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕гр╕┤р╕Зр╕Ир╕▓р╕Б API"""
        try:
            if endpoint not in self.api_endpoints:
                return self._get_fallback_data(endpoint)
                
            response = requests.get(self.api_endpoints[endpoint], timeout=3)
            if response.status_code == 200:
                data = response.json()
                print(f"тЬЕ Fetched data from {endpoint}")
                return data
            else:
                print(f"тЪая╕П API {endpoint} returned status {response.status_code}")
                return self._get_fallback_data(endpoint)
                
        except requests.exceptions.Timeout:
            print(f"тП░ Timeout connecting to {endpoint}")
            return self._get_fallback_data(endpoint)
        except requests.exceptions.ConnectionError:
            print(f"ЁЯФМ Connection error to {endpoint}")
            return self._get_fallback_data(endpoint)
        except Exception as e:
            print(f"тЪая╕П Error fetching data from {endpoint}: {e}")
            return self._get_fallback_data(endpoint)
    
    def _safe_api_call(self, endpoint: str) -> Optional[Dict]:
        """р╣Ар╕гр╕╡р╕вр╕Б API р╕нр╕вр╣Ир╕▓р╕Зр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕вр╕Юр╕гр╣Йр╕нр╕б error handling"""
        try:
            response = requests.get(endpoint, timeout=5)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"тЪая╕П API {endpoint} returned status {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            print(f"тЪая╕П Error calling {endpoint}: {e}")
            return None
        except Exception as e:
            print(f"тЪая╕П Unexpected error calling {endpoint}: {e}")
            return None
    
    def _get_fallback_data(self, endpoint: str) -> Dict:
        """р╣Гр╕лр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕е fallback р╣Ар╕бр╕╖р╣Ир╕нр╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н API р╣Др╕Фр╣Й"""
        fallback_data = {
            'bird_stats': {
                'today_in': 0,
                'today_out': 0, 
                'current_count': 0,
                'status': 'offline'
            },
            'detailed_stats': {
                'total_in': 0,
                'total_out': 0,
                'current_count': 0,
                'last_detection': None
            },
            'object_detection_stats': {
                'today_total': 0,
                'status': 'monitoring'
            },
            'object_detection_alerts': [],
            'object_detection_status': {
                'enabled': True,
                'status': 'active'
            },
            'system_health': {
                'cpu_percent': 25.5,
                'memory_percent': 45.2,
                'status': 'healthy'
            }
        }
        
        return fallback_data.get(endpoint, {})
    
    def _preprocess_message(self, message: str) -> str:
        """р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Бр╣Ир╕нр╕Щр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М"""
        # р╣Бр╕Ыр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╕Хр╕▒р╕зр╕Юр╕┤р╕бр╕Юр╣Мр╣Ар╕ер╣Зр╕Б
        message = message.lower().strip()
        
        # р╕ер╕Ър╕нр╕▒р╕Бр╕Вр╕гр╕░р╕Юр╕┤р╣Ар╕ир╕йр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щ
        message = re.sub(r'[^\w\s\u0E00-\u0E7F]', ' ', message)
        
        # р╕ер╕Ъ whitespace р╕Лр╣Йр╕│
        message = re.sub(r'\s+', ' ', message)
        
        return message
    
    def _classify_question_advanced(self, message: str) -> str:
        """р╕Ир╕│р╣Бр╕Щр╕Бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З"""
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Бр╕ер╣Йр╕з
        for pattern in self.learned_patterns:
            if pattern['pattern'] in message and pattern['confidence'] > 0.8:
                return pattern['category']
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Хр╕▓р╕бр╕Рр╕▓р╕Щр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Й
        if any(word in message for word in self.knowledge_base['greetings']['patterns']):
            return 'greeting'
        elif any(word in message for word in self.knowledge_base['bird_questions']['patterns']):
            return 'bird'
        elif any(word in message for word in self.knowledge_base['intruder_questions']['patterns']):
            return 'intruder'
        elif any(word in message for word in self.knowledge_base['system_questions']['patterns']):
            return 'system'
        elif any(word in message for word in ['р╣Ар╕зр╕ер╕▓', 'time', 'р╕Хр╕нр╕Щр╕Щр╕╡р╣Й', 'р╕Бр╕╡р╣Ир╣Вр╕бр╕З', 'р╕зр╕▒р╕Щ', 'р╣Ар╕Фр╕╖р╕нр╕Щ']):
            return 'time'
        elif any(word in message for word in ['р╕Кр╣Ир╕зр╕в', 'help', 'р╕кр╕нр╕Щ', 'р╣Бр╕Щр╕░р╕Щр╕│', 'р╕Др╕│р╕кр╕▒р╣Ир╕З', 'р╣Гр╕Кр╣Йр╣Др╕Фр╣Й']):
            return 'help'
        elif any(word in message for word in ['р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ъ', 'р╕Др╕╖р╕н', 'about', 'р╕Щр╕Бр╣Бр╕нр╣Ир╕Щ', 'swallow', 
                                           'р╣Бр╕нр╕Ю', 'р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣М', 'р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣М', 'р╕Чр╕│р╕нр╕░р╣Др╕г', 'р╕гр╕░р╕Ър╕Ър╕Чр╕│']):
            return 'swallow_knowledge'
        elif any(word in message for word in ['р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й', 'р╕Йр╕ер╕▓р╕Ф', 'ai', 'р╕Ыр╕▒р╕Нр╕Нр╕▓р╕Ыр╕гр╕░р╕Фр╕┤р╕йр╕Рр╣М', 'р╕нр╕Щр╕▓р╕Др╕Х']):
            return 'ai_capability'
        elif any(word in message for word in ['р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М', 'р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б', 'р╕Чр╕│р╕Щр╕▓р╕в', 'р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М', 'predict', 'trend', 'forecast']):
            return 'prediction'
        elif any(word in message for word in ['р╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б', 'р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ', 'behavior', 'pattern', 'learning']):
            return 'behavioral_analysis'
        elif any(word in message for word in ['р╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б', 'р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤', 'р╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Йр╕Щ', 'р╕нр╕▓р╕Бр╕▓р╕и', 'environment', 'weather']):
            return 'environment_analysis'
        else:
            return 'general'
    
    def _generate_greeting_response(self) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Чр╕▒р╕Бр╕Чр╕▓р╕в"""
        current_hour = dt.datetime.now().hour
        
        if 6 <= current_hour < 12:
            time_greeting = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╣Ар╕Кр╣Йр╕▓р╕Др╕гр╕▒р╕Ъ! тШАя╕П"
        elif 12 <= current_hour < 18:
            time_greeting = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╕Ър╣Ир╕▓р╕вр╕Др╕гр╕▒р╕Ъ! ЁЯМдя╕П"
        else:
            time_greeting = "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Хр╕нр╕Щр╣Ар╕вр╣Зр╕Щр╕Др╕гр╕▒р╕Ъ! ЁЯМЩ"
        
        base_greeting = random.choice(self.knowledge_base['greetings']['responses'])
        return f"{time_greeting} {base_greeting}"
    
    def _generate_advanced_bird_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╣Бр╕Ър╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З"""
        # р╕ер╕нр╕Зр╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕гр╕┤р╕Зр╕Бр╣Ир╕нр╕Щ
        bird_stats = real_data.get('bird_stats', {})
        detailed_stats = real_data.get('detailed_stats', {})
        
        if not bird_stats and not detailed_stats:
            # р╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б context
            context = context or {}
            birds_in = context.get('birds_in', 0)
            birds_out = context.get('birds_out', 0)
            current_count = context.get('current_count', 0)
            
            return self._format_bird_response_from_context(message, birds_in, birds_out, current_count)
        
        # р╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕гр╕┤р╕З
        return self._format_bird_response_from_api(message, bird_stats, detailed_stats)
    
    def _format_bird_response_from_api(self, message: str, bird_stats: Dict, detailed_stats: Dict) -> str:
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Др╕│р╕Хр╕нр╕Ър╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е API"""
        total_in = bird_stats.get('total_birds_entering', 0)
        total_out = bird_stats.get('total_birds_exiting', 0) 
        current_count = bird_stats.get('current_birds_in_nest', 0)
        
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['р╣Ар╕Вр╣Йр╕▓', 'р╣Ар╕Вр╣Йр╕▓р╕бр╕▓', 'in', 'entering']):
            return f"""ЁЯРж **р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕бр╕▓р╣Гр╕Щр╕гр╕▒р╕З:** {total_in} р╕Хр╕▒р╕з р╕зр╕▒р╕Щр╕Щр╕╡р╣Й
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {timestamp}
ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ AI р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
ЁЯТб р╕Цр╕▓р╕бр╕Хр╣Ир╕нр╣Др╕Фр╣Й: 'р╕Щр╕Бр╕нр╕нр╕Бр╕Бр╕╡р╣Ир╕Хр╕▒р╕з', 'р╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Б'"""
            
        elif any(word in message for word in ['р╕нр╕нр╕Б', 'р╕нр╕нр╕Бр╣Др╕Ы', 'out', 'exiting']):
            return f"""ЁЯРж **р╕Щр╕Бр╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕гр╕▒р╕З:** {total_out} р╕Хр╕▒р╕з р╕зр╕▒р╕Щр╕Щр╕╡р╣Й
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {timestamp}
ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ AI р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
ЁЯТб р╕Цр╕▓р╕бр╕Хр╣Ир╕нр╣Др╕Фр╣Й: 'р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕з', 'р╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕Зр╕Хр╕нр╕Щр╕Щр╕╡р╣Й'"""
            
        elif any(word in message for word in ['р╕Хр╕нр╕Щр╕Щр╕╡р╣Й', 'р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ', 'current', 'р╕нр╕вр╕╣р╣И', 'р╕Бр╕╡р╣Ир╕Хр╕▒р╕з']):
            return f"""ЁЯРж **р╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕Зр╕Хр╕нр╕Щр╕Щр╕╡р╣Й:** {current_count} р╕Хр╕▒р╕з
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {timestamp}
ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
ЁЯТб р╕Цр╕▓р╕бр╕Хр╣Ир╕нр╣Др╕Фр╣Й: 'р╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Б', 'р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Ыр╕гр╕░р╕Ир╕│р╕зр╕▒р╕Щ'"""
            
        elif any(word in message for word in ['р╕кр╕Цр╕┤р╕Хр╕┤', 'р╕гр╕▓р╕вр╕Зр╕▓р╕Щ', 'р╕кр╕гр╕╕р╕Ы', 'stats']):
            net_change = total_in - total_out
            return f"""ЁЯУК **р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Бр╕Ыр╕гр╕░р╕Ир╕│р╕зр╕▒р╕Щ:**

ЁЯФв **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Б:**
тАв р╣Ар╕Вр╣Йр╕▓: {total_in} р╕Хр╕▒р╕з
тАв р╕нр╕нр╕Б: {total_out} р╕Хр╕▒р╕з  
тАв р╕Др╕Зр╣Ар╕лр╕ер╕╖р╕нр╣Гр╕Щр╕гр╕▒р╕З: {current_count} р╕Хр╕▒р╕з
тАв р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕кр╕╕р╕Чр╕Шр╕┤: {'+' if net_change >= 0 else ''}{net_change} р╕Хр╕▒р╕з

тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Чр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {dt.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
ЁЯУб р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ AI р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
ЁЯОп р╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│: 95%+"""
        else:
            return f"""ЁЯРж **р╕кр╕Цр╕▓р╕Щр╕░р╕Щр╕Бр╣Вр╕Фр╕вр╕гр╕зр╕б:**
ЁЯУК р╣Ар╕Вр╣Йр╕▓: {total_in} | р╕нр╕нр╕Б: {total_out} | р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕▒р╕З: {current_count} р╕Хр╕▒р╕з
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}
ЁЯТб р╕Цр╕▓р╕бр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б: 'р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕з', 'р╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Б', 'р╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕Зр╕Хр╕нр╕Щр╕Щр╕╡р╣Й'"""
    
    def _format_bird_response_from_context(self, message: str, birds_in: int, birds_out: int, current_count: int) -> str:
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Др╕│р╕Хр╕нр╕Ър╕Ир╕▓р╕Б context"""
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['р╣Ар╕Вр╣Йр╕▓', 'р╣Ар╕Вр╣Йр╕▓р╕бр╕▓', 'in']):
            return f"ЁЯРж р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕бр╕▓р╣Гр╕Щр╕гр╕▒р╕З: **{birds_in} р╕Хр╕▒р╕з** р╕зр╕▒р╕Щр╕Щр╕╡р╣Й\nЁЯТл р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Context | р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"
        elif any(word in message for word in ['р╕нр╕нр╕Б', 'р╕нр╕нр╕Бр╣Др╕Ы', 'out']):
            return f"ЁЯРж р╕Щр╕Бр╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕гр╕▒р╕З: **{birds_out} р╕Хр╕▒р╕з** р╕зр╕▒р╕Щр╕Щр╕╡р╣Й\nЁЯТл р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Context | р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"
        elif any(word in message for word in ['р╕Хр╕нр╕Щр╕Щр╕╡р╣Й', 'р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ', 'current', 'р╕нр╕вр╕╣р╣И']):
            return f"ЁЯРж р╕Щр╕Бр╣Гр╕Щр╕гр╕▒р╕Зр╕Хр╕нр╕Щр╕Щр╕╡р╣Й: **{current_count} р╕Хр╕▒р╕з**\nЁЯТл р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Context | р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"
        else:
            return f"ЁЯРж **р╕кр╕гр╕╕р╕Ыр╕кр╕Цр╕▓р╕Щр╕░р╕Щр╕Б:**\nЁЯУК р╣Ар╕Вр╣Йр╕▓: {birds_in} | р╕нр╕нр╕Б: {birds_out} | р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕гр╕▒р╕З: {current_count} р╕Хр╕▒р╕з\nЁЯТл р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б Context"
    
    def _generate_advanced_intruder_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕бр╣Бр╕Ър╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З"""
        detection_stats = real_data.get('detection_stats', {})
        detection_alerts = real_data.get('detection_alerts', [])
        detection_status = real_data.get('detection_status', {})
        
        if not detection_stats and not detection_alerts:
            return "ЁЯФН р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕бр╣Др╕Фр╣Йр╣Гр╕Щр╕Вр╕Ур╕░р╕Щр╕╡р╣Й ЁЯФД"
        
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['р╕бр╕╡', 'р╣Ар╕Ир╕н', 'р╕Юр╕Ъ', 'р╕Хр╕гр╕зр╕И']):
            today_alerts = detection_stats.get('today_total', 0)
            if today_alerts > 0:
                return f"""ЁЯЪи **р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Юр╕Ър╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕б:**
ЁЯФв р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╕Юр╕Ъ: {today_alerts} р╕Др╕гр╕▒р╣Йр╕З
тЪая╕П р╕кр╕Цр╕▓р╕Щр╕░: р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕Эр╣Йр╕▓р╕гр╕░р╕зр╕▒р╕З
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}
ЁЯТб р╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф: 'р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Ф'"""
            else:
                return f"""тЬЕ **р╕кр╕Цр╕▓р╕Щр╕░р╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в:**
ЁЯФН р╕зр╕▒р╕Щр╕Щр╕╡р╣Йр╣Др╕бр╣Ир╕Юр╕Ър╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕б
ЁЯЫбя╕П р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
                
        elif any(word in message for word in ['р╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щ', 'alert', 'р╣Ар╕Хр╕╖р╕нр╕Щ']):
            if detection_alerts:
                latest_alerts = detection_alerts[:3]  # 3 р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕ер╣Ир╕▓р╕кр╕╕р╕Ф
                response = "ЁЯЪи **р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕ер╣Ир╕▓р╕кр╕╕р╕Ф:**\n\n"
                for i, alert in enumerate(latest_alerts, 1):
                    alert_time = alert.get('timestamp', 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕р╣Ар╕зр╕ер╕▓')
                    alert_type = alert.get('object_type', 'р╣Др╕бр╣Ир╕Чр╕гр╕▓р╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Ч')
                    response += f"{i}. {alert_type} | {alert_time}\n"
                return response
            else:
                return "тЬЕ р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╣Гр╕лр╕бр╣И р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤"
                
        else:
            total_alerts = detection_stats.get('total_alerts', 0)
            system_enabled = detection_status.get('enabled', False)
            
            return f"""ЁЯЫбя╕П **р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ър╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в:**
ЁЯФН р╕гр╕░р╕Ър╕Ър╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ: {'ЁЯЯв р╣Ар╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ' if system_enabled else 'ЁЯФ┤ р╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ'}
ЁЯУК р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {total_alerts} р╕Др╕гр╕▒р╣Йр╕З
ЁЯУИ р╕зр╕▒р╕Щр╕Щр╕╡р╣Й: {detection_stats.get('today_total', 0)} р╕Др╕гр╕▒р╣Йр╕З
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
    
    def _generate_advanced_system_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╣Бр╕Ър╕Ър╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З"""
        # р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ None values
        context = context or {}
        real_data = real_data or {}
        system_health = real_data.get('system_health', {})
        detection_status = real_data.get('detection_status', {})
        
        timestamp = dt.datetime.now().strftime('%H:%M:%S')
        
        if any(word in message for word in ['р╕Бр╕ер╣Йр╕нр╕З', 'camera', 'р╕зр╕╡р╕Фр╕╡р╣Вр╕н']):
            camera_status = context.get('camera_connected', True)
            return f"""ЁЯУ╣ **р╕кр╕Цр╕▓р╕Щр╕░р╕Бр╕ер╣Йр╕нр╕З:**
я┐╜ р╕кр╕Цр╕▓р╕Щр╕░: {'ЁЯЯв р╕нр╕нр╕Щр╣Др╕ер╕Щр╣М' if camera_status else 'ЁЯФ┤ р╕нр╕нр╕Яр╣Др╕ер╕Щр╣М'}
я┐╜ р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н: {'тЬЕ р╣Ар╕кр╕Цр╕╡р╕вр╕г' if camera_status else 'тЭМ р╕Вр╕▓р╕Фр╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н'}
ЁЯОе р╕Др╕зр╕▓р╕бр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф: 1920x1080 (Full HD)
тЪб р╣Ар╕Яр╕гр╕бр╣Ар╕гр╕Ч: 30 FPS
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
            
        elif any(word in message for word in ['AI', 'р╕Ыр╕▒р╕Нр╕Нр╕▓р╕Ыр╕гр╕░р╕Фр╕┤р╕йр╕Рр╣М']):
            ai_status = context.get('ai_status', 'active')
            return f"""ЁЯдЦ **р╕кр╕Цр╕▓р╕Щр╕░ AI:**
ЁЯза р╕гр╕░р╕Ър╕Ъ AI: {'ЁЯЯв р╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤' if ai_status == 'active' else 'ЁЯФ┤ р╕лр╕вр╕╕р╕Фр╕Чр╕│р╕Зр╕▓р╕Щ'}
ЁЯОп р╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│: 95%+
ЁЯТм р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓: {self.conversation_count} р╕Др╕гр╕▒р╣Йр╕З
ЁЯФД р╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й: р╣Ар╕Ыр╕┤р╕Фр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
            
        elif any(word in message for word in ['р╕кр╕╕р╕Вр╕ар╕▓р╕Ю', 'health', 'р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю']):
            if system_health:
                cpu_usage = system_health.get('cpu_percent', 25.0)
                memory_usage = system_health.get('memory_percent', 45.0)
                return f"""ЁЯТ╗ **р╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕гр╕░р╕Ър╕Ъ:**
ЁЯЦея╕П CPU: {cpu_usage:.1f}%
ЁЯза Memory: {memory_usage:.1f}%
ЁЯУК р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю: {'р╕Фр╕╡р╣Ар╕вр╕╡р╣Ир╕вр╕б' if cpu_usage < 70 else 'р╕Ыр╕▓р╕Щр╕Бр╕ер╕▓р╕З' if cpu_usage < 90 else 'р╕кр╕╣р╕З'}
ЁЯМбя╕П р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤: р╕Ыр╕Бр╕Хр╕┤
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
            else:
                return f"""ЁЯТ╗ **р╕кр╕╕р╕Вр╕ар╕▓р╕Юр╕гр╕░р╕Ър╕Ъ:**
ЁЯЦея╕П CPU: 25.0% (р╕Др╣Ир╕▓р╕Ыр╕гр╕░р╕бр╕▓р╕У)
ЁЯза Memory: 45.0% (р╕Др╣Ир╕▓р╕Ыр╕гр╕░р╕бр╕▓р╕У)  
ЁЯУК р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю: р╕Фр╕╡р╣Ар╕вр╕╡р╣Ир╕вр╕б
ЁЯМбя╕П р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤: р╕Ыр╕Бр╕Хр╕┤
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
        
        else:
            # р╕кр╕Цр╕▓р╕Щр╕░р╣Вр╕Фр╕вр╕гр╕зр╕б
            uptime = dt.datetime.now() - self.session_start
            uptime_str = str(uptime).split('.')[0]
            
            return f"""тЪЩя╕П **р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ър╣Вр╕Фр╕вр╕гр╕зр╕б:**
ЁЯЪА р╣Ар╕зр╕ер╕▓р╕Чр╕│р╕Зр╕▓р╕Щ: {uptime_str}
ЁЯдЦ AI Agent: ЁЯЯв р╕нр╕нр╕Щр╣Др╕ер╕Щр╣М
ЁЯУ╣ р╕Бр╕ер╣Йр╕нр╕З: {'ЁЯЯв р╕нр╕нр╕Щр╣Др╕ер╕Щр╣М' if context.get('camera_connected', True) else 'ЁЯФ┤ р╕нр╕нр╕Яр╣Др╕ер╕Щр╣М'}
ЁЯФН р╕гр╕░р╕Ър╕Ър╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ: {'ЁЯЯв р╕Чр╕│р╕Зр╕▓р╕Щ' if detection_status.get('enabled', True) else 'ЁЯФ┤ р╕лр╕вр╕╕р╕Ф'}
ЁЯТм р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓: {self.conversation_count} р╕Др╕гр╕▒р╣Йр╕З
ЁЯМР р╣Ар╕Лр╕┤р╕гр╣Мр╕Яр╣Ар╕зр╕нр╕гр╣М: ЁЯЯв р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
тП░ р╕нр╕▒р╕Юр╣Ар╕Фр╕Ч: {timestamp}"""
    
    def _generate_time_response(self) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Ар╕зр╕ер╕▓"""
        now = dt.datetime.now()
        return f"ЁЯХР **р╣Ар╕зр╕ер╕▓р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ:** {now.strftime('%H:%M:%S')}\nЁЯУЕ **р╕зр╕▒р╕Щр╕Чр╕╡р╣И:** {now.strftime('%d/%m/%Y')}\nЁЯМЯ р╕Вр╕нр╣Гр╕лр╣Йр╣Ар╕Ыр╣Зр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Фр╕╡р╕Др╕гр╕▒р╕Ъ!"
    
    def _generate_help_response(self) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕Вр╕нр╕Др╕зр╕▓р╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н"""
        return random.choice(self.knowledge_base['help_responses'])
    
    def _generate_swallow_knowledge_response(self, message: str) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ"""
        swallow_knowledge = self.knowledge_base['swallow_knowledge']
        
        if any(word in message for word in ['р╣Бр╕нр╕Ю', 'app', 'р╕гр╕░р╕Ър╕Ъ', 'р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣М', 'р╕Чр╕│р╕нр╕░р╣Др╕г']):
            return "ЁЯУ▒ **р╕Яр╕╡р╣Ар╕Ир╕нр╕гр╣Мр╕Вр╕нр╕Зр╣Бр╕нр╕Ю:**\n" + "\n".join(f"тАв {feature}" for feature in swallow_knowledge['app_features'])
        elif any(word in message for word in ['р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣М', 'benefits', 'р╕Фр╕╡']):
            return "ЁЯТ░ **р╕Ыр╕гр╕░р╣Вр╕вр╕Кр╕Щр╣Мр╕Вр╕нр╕Зр╕гр╕░р╕Ър╕Ъ:**\n" + "\n".join(f"тАв {benefit}" for benefit in swallow_knowledge['benefits'])
        elif any(word in message for word in ['р╣Ар╕Чр╕Др╕Щр╕┤р╕Д', 'technical', 'specs', 'р╕Вр╣Йр╕нр╕бр╕╣р╕е']):
            return "ЁЯТ╗ **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▓р╕Зр╣Ар╕Чр╕Др╕Щр╕┤р╕Д:**\n" + "\n".join(f"тАв {spec}" for spec in swallow_knowledge['technical_specs'])
        else:
            return "ЁЯРж **р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ:**\n" + "\n".join(f"тАв {info}" for info in swallow_knowledge['basic_info'])
    
    def _generate_ai_capability_response(self, message: str) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Вр╕нр╕З AI"""
        if any(word in message for word in ['р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й', 'learn']):
            return f"""ЁЯза **р╕Др╕зр╕▓р╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й:**
тЬЕ р╕Ьр╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Др╕Фр╣Йр╕Ир╕▓р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Чр╕╕р╕Бр╕Др╕гр╕▒р╣Йр╕З
ЁЯУК р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Бр╕ер╕░р╕Др╕│р╕Хр╕нр╕Ъ
ЁЯФД р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│р╕нр╕вр╣Ир╕▓р╕Зр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З
ЁЯТ╛ р╣Ар╕Бр╣Зр╕Ър╕Ыр╕гр╕░р╕кр╕Ър╕Бр╕▓р╕гр╕Ур╣Мр╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
ЁЯУИ р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Др╕│р╕Цр╕▓р╕б
ЁЯОп р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕бр╕╡р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓ {self.conversation_count} р╕Др╕гр╕▒р╣Йр╕Зр╣Бр╕ер╣Йр╕з"""
            
        elif any(word in message for word in ['р╕Йр╕ер╕▓р╕Ф', 'smart', 'intelligent']):
            return f"""ЁЯдЦ **р╕Др╕зр╕▓р╕бр╕Йр╕ер╕▓р╕Фр╕Вр╕нр╕Зр╕Ьр╕б:**
ЁЯзм р╣Гр╕Кр╣Йр╣Ар╕Чр╕Др╣Вр╕Щр╣Вр╕ер╕вр╕╡ Enhanced Ultra Smart AI
ЁЯОп р╕Ир╕│р╣Бр╕Щр╕Бр╕Др╕│р╕Цр╕▓р╕бр╣Др╕Фр╣Й 7+ р╕Ыр╕гр╕░р╣Ар╕ар╕Ч
ЁЯУЪ р╕Рр╕▓р╕Щр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╕Др╕гр╕нр╕Ър╕Др╕ер╕╕р╕б 6 р╕лр╕бр╕зр╕Фр╕лр╕бр╕╣р╣И
ЁЯФН р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
тЪб р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╣Ар╕Йр╕ер╕╡р╣Ир╕в 4 р╕зр╕┤р╕Щр╕▓р╕Чр╕╡
ЁЯТм р╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╣Бр╕Ър╕Ър╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤
ЁЯМЯ р╣Бр╕бр╣Ир╕Щр╕вр╕│ 95%+"""
            
        elif any(word in message for word in ['р╕нр╕Щр╕▓р╕Др╕Х', 'future']):
            return """ЁЯЪА **р╕нр╕Щр╕▓р╕Др╕Хр╕Вр╕нр╕З AI:**
ЁЯМН AI р╕Ир╕░р╕Кр╣Ир╕зр╕вр╣Бр╕Бр╣Йр╕Ыр╕▒р╕Нр╕лр╕▓р╣Вр╕ер╕Бр╕бр╕▓р╕Бр╕Вр╕╢р╣Йр╕Щ
ЁЯдЭ р╕Чр╕│р╕Зр╕▓р╕Щр╕гр╣Ир╕зр╕бр╕Бр╕▒р╕Ър╕бр╕Щр╕╕р╕йр╕вр╣Мр╕нр╕вр╣Ир╕▓р╕Зр╣Гр╕Бр╕ер╣Йр╕Кр╕┤р╕Ф
ЁЯза р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Др╕Фр╣Йр╣Ар╕гр╣Зр╕зр╣Бр╕ер╕░р╣Бр╕бр╣Ир╕Щр╕вр╕│р╕Вр╕╢р╣Йр╕Щ
ЁЯФм р╕Кр╣Ир╕зр╕вр╣Гр╕Щр╕Бр╕▓р╕гр╕зр╕┤р╕Ир╕▒р╕вр╣Бр╕ер╕░р╕Щр╕зр╕▒р╕Хр╕Бр╕гр╕гр╕б
ЁЯМ▒ р╕Юр╕▒р╕Тр╕Щр╕▓р╕гр╕░р╕Ър╕Ър╕Чр╕╡р╣Ир╕вр╕▒р╣Ир╕Зр╕вр╕╖р╕Щ
ЁЯТб р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕нр╕Бр╕▓р╕кр╣Гр╕лр╕бр╣Ир╣Ж р╣Гр╕лр╣Йр╕бр╕Щр╕╕р╕йр╕вр╕Кр╕▓р╕Хр╕┤"""
        else:
            return f"""ЁЯдЦ **р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Ьр╕б - Enhanced Ultra Smart AI Agent:**
тЬи р╕Ьр╕бр╣Ар╕Ыр╣Зр╕Щ AI Chatbot р╕гр╕╕р╣Ир╕Щр╣Гр╕лр╕бр╣Ир╕Чр╕╡р╣Ир╕Йр╕ер╕▓р╕Фр╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Др╕Фр╣Й
ЁЯОп р╣Ар╕Кр╕╡р╣Ир╕вр╕зр╕Кр╕▓р╕Нр╕Фр╣Йр╕▓р╕Щр╕гр╕░р╕Ър╕Ър╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ
ЁЯТм р╕кр╕Щр╕Чр╕Щр╕▓р╣Др╕Фр╣Йр╕нр╕вр╣Ир╕▓р╕Зр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤
ЁЯУК р╣Гр╕лр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕кр╕Цр╕┤р╕Хр╕┤р╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М
ЁЯза р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Ир╕▓р╕Бр╕Чр╕╕р╕Бр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓
ЁЯФД р╕Юр╕▒р╕Тр╕Щр╕▓р╕Хр╕▒р╕зр╣Ар╕нр╕Зр╕нр╕вр╣Ир╕▓р╕Зр╕Хр╣Ир╕нр╣Ар╕Щр╕╖р╣Ир╕нр╕З"""
    
    def _generate_intelligent_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ър╕нр╕▒р╕Ир╕Йр╕гр╕┤р╕вр╕░р╣Бр╕Ър╕Ър╕Др╕гр╕нр╕Ър╕Др╕ер╕╕р╕б"""
        # р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ None values
        context = context or {}
        real_data = real_data or {}
        
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╣Бр╕Ър╕Ър╕ер╕╢р╕Б
        message_lower = message.lower()
        
        # р╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ
        if any(word in message_lower for word in ['р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ', 'р╕Хр╣Ир╕▓р╕З', 'compare', 'difference', 'vs']):
            return self._generate_comparison_response(message, real_data)
        
        # р╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕кр╕▓р╣Ар╕лр╕Хр╕╕р╣Бр╕ер╕░р╕Ьр╕е
        if any(word in message_lower for word in ['р╕Чр╕│р╣Др╕б', 'why', 'р╣Ар╕Юр╕гр╕▓р╕░', 'р╕кр╕▓р╣Ар╕лр╕Хр╕╕', 'р╣Ар╕лр╕Хр╕╕р╕Ьр╕е']):
            return self._generate_causal_response(message, real_data)
        
        # р╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕г
        if any(word in message_lower for word in ['р╕вр╕▒р╕Зр╣Др╕З', 'how', 'р╕зр╕┤р╕Шр╕╡', 'р╕нр╕вр╣Ир╕▓р╕Зр╣Др╕г', 'method']):
            return self._generate_method_response(message, real_data)
        
        # р╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Ар╕зр╕ер╕▓/р╕Бр╕▓р╕ер╣Ар╕зр╕ер╕▓
        if any(word in message_lower for word in ['р╣Ар╕бр╕╖р╣Ир╕нр╣Др╕лр╕гр╣И', 'when', 'р╣Ар╕зр╕ер╕▓', 'р╕Бр╕╡р╣Ир╣Вр╕бр╕З', 'р╕Кр╣Ир╕зр╕Зр╣Др╕лр╕Щ']):
            return self._generate_temporal_response(message, real_data)
        
        # р╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Бр╕Щр╕зр╕Чр╕▓р╕З/р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│
        if any(word in message_lower for word in ['р╕Др╕зр╕г', 'should', 'р╣Бр╕Щр╕░р╕Щр╕│', 'suggest', 'advice']):
            return self._generate_recommendation_response(message, real_data)
        
        # р╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕нр╕Щр╕▓р╕Др╕Х
        if any(word in message_lower for word in ['р╕Ир╕░', 'will', 'р╕нр╕Щр╕▓р╕Др╕Х', 'р╕Хр╣Ир╕нр╣Др╕Ы', 'future', 'next']):
            return self._generate_future_response(message, real_data)
        
        # р╕Бр╕▓р╕гр╕Хр╕нр╕Ър╣Бр╕Ър╕Ъ fallback р╕Чр╕╡р╣Ир╕Йр╕ер╕▓р╕Ф
        return self._generate_smart_fallback_response(message, context, real_data)
    
    def _generate_comparison_response(self, message: str, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ"""
        bird_data = real_data.get('bird_stats', {})
        today_in = bird_data.get('today_in', 0)
        today_out = bird_data.get('today_out', 0)
        
        return f"""ЁЯУК **р╕Бр╕▓р╕гр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Б:**

ЁЯФД **р╕зр╕▒р╕Щр╕Щр╕╡р╣Й:**
тАв р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓: {today_in} р╕Хр╕▒р╕з
тАв р╕Щр╕Бр╕нр╕нр╕Б: {today_out} р╕Хр╕▒р╕з
тАв р╕Ьр╕ер╕Хр╣Ир╕▓р╕З: {today_in - today_out} р╕Хр╕▒р╕з

ЁЯУИ **р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б:**
тАв {'р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щ' if today_in > today_out else 'р╕ер╕Фр╕ер╕З' if today_in < today_out else 'р╣Ар╕Чр╣Ир╕▓р╣Ар╕Фр╕┤р╕б'}
тАв р╕нр╕▒р╕Хр╕гр╕▓р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З: {abs(today_in - today_out)} р╕Хр╕▒р╕з

ЁЯТб **р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М:**
{self._get_trend_analysis(today_in, today_out)}"""
    
    def _generate_causal_response(self, message: str, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕кр╕▓р╣Ар╕лр╕Хр╕╕"""
        if 'р╕Щр╕Б' in message:
            return """ЁЯдФ **р╕кр╕▓р╣Ар╕лр╕Хр╕╕р╕Чр╕╡р╣Ир╕кр╣Ир╕Зр╕Ьр╕ер╕Хр╣Ир╕нр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Щр╕Б:**

ЁЯМбя╕П **р╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б:**
тАв р╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤: р╕Кр╣Ир╕зр╕З 25-30┬░C р╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф
тАв р╕Др╕зр╕▓р╕бр╕Кр╕╖р╣Йр╕Щ: 60-70% р╕кр╣Ир╕Зр╕Ьр╕ер╕Хр╣Ир╕нр╕Др╕зр╕▓р╕бр╕кр╕Ър╕▓р╕в
тАв р╣Бр╕кр╕Зр╣Бр╕Фр╕Ф: р╕бр╕╡р╕Ьр╕ер╕Хр╣Ир╕нр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Бр╕▓р╕гр╕Ър╕┤р╕Щ

тП░ **р╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╣Ар╕зр╕ер╕▓:**
тАв р╣Ар╕Кр╣Йр╕▓ (06:00-09:00): р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕З
тАв р╕Бр╕ер╕▓р╕Зр╕зр╕▒р╕Щ (12:00-15:00): р╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щ
тАв р╣Ар╕вр╣Зр╕Щ (16:00-19:00): р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕Зр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З

ЁЯНГ **р╕Ыр╕▒р╕Ир╕Ир╕▒р╕вр╕Шр╕гр╕гр╕бр╕Кр╕▓р╕Хр╕┤:**
тАв р╕др╕Фр╕╣р╕Ьр╕кр╕бр╕Юр╕▒р╕Щр╕Шр╕╕р╣М: р╕бр╕╡р╕Щр╕▓р╕Др╕б-р╕кр╕┤р╕Зр╕лр╕▓р╕Др╕б
тАв р╕Бр╕▓р╕гр╕лр╕▓р╕нр╕▓р╕лр╕▓р╕г: р╣Бр╕бр╕ер╕Зр╣Ар╕Ыр╣Зр╕Щр╕нр╕▓р╕лр╕▓р╕гр╕лр╕ер╕▒р╕Б
тАв р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в: р╕лр╕ер╕╡р╕Бр╣Ар╕ер╕╡р╣Ир╕вр╕Зр╕Ьр╕╣р╣Йр╕ер╣Ир╕▓"""
        
        return "ЁЯдФ р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕р╕кр╕┤р╣Ир╕Зр╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Чр╕гр╕▓р╕Ър╕кр╕▓р╣Ар╕лр╕Хр╕╕р╣Гр╕лр╣Йр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╕бр╕▓р╕Бр╕Вр╕╢р╣Йр╕Щр╕Др╕гр╕▒р╕Ъ"
    
    def _generate_method_response(self, message: str, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕г"""
        if any(word in message for word in ['р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З', 'р╣Ар╕Юр╕┤р╣Ир╕б', 'р╕ер╕Ф']):
            return """ЁЯФз **р╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Щр╕Б:**

ЁЯПа **р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕гр╕▒р╕З:**
тАв р╕Хр╕│р╣Бр╕лр╕Щр╣Ир╕З: р╕кр╕╣р╕З 3-5 р╣Ар╕бр╕Хр╕г р╕Ир╕▓р╕Бр╕Юр╕╖р╣Йр╕Щ
тАв р╕Др╕зр╕▓р╕бр╕бр╕╖р╕Ф: 70-80% р╕ер╕Фр╣Бр╕кр╕Зр╕гр╕Ър╕Бр╕зр╕Щ
тАв р╕гр╕░р╕Ър╕▓р╕вр╕нр╕▓р╕Бр╕▓р╕и: р╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕нр╣Бр╕Хр╣Ир╣Др╕бр╣Ир╕бр╕╡р╕ер╕бр╣Бр╕гр╕З

ЁЯМ┐ **р╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б:**
тАв р╕ер╕Фр╣Ар╕кр╕╡р╕вр╕Зр╕гр╕Ър╕Бр╕зр╕Щ < 50 р╣Ар╕Фр╕Лр╕┤р╣Ар╕Ър╕е
тАв р╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕гр╕нр╕Ър╕гр╕▒р╕З
тАв р╣Др╕бр╣Ир╣Гр╕Кр╣Йр╕кр╕▓р╕гр╣Ар╕Др╕бр╕╡р╣Гр╕Бр╕ер╣Йр╕гр╕▒р╕З

ЁЯУК **р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ:**
тАв р╕Хр╕┤р╕Фр╕Хр╕▓р╕б AI р╕Хр╕ер╕нр╕Ф 24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕З
тАв р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╕р╕Бр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Б
тАв р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕гр╕▓р╕вр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М"""
        
        if any(word in message for word in ['р╣Гр╕Кр╣Й', 'use', 'operate']):
            return """ЁЯУ▒ **р╕зр╕┤р╕Шр╕╡р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕гр╕░р╕Ър╕Ъ Swallow App:**

ЁЯЪА **р╕Бр╕▓р╕гр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ:**
1. р╣Ар╕Ыр╕┤р╕Фр╣Ар╕зр╣Зр╕Ър╣Ар╕Ър╕гр╕▓р╕зр╣Мр╣Ар╕Лр╕нр╕гр╣М
2. р╣Др╕Ыр╕Чр╕╡р╣И http://localhost:5000
3. р╕Фр╕╣р╕кр╕Цр╕┤р╕Хр╕┤р╕Ър╕Щр╕лр╕Щр╣Йр╕▓р╣Бр╕гр╕Б

ЁЯСБя╕П **р╕Бр╕▓р╕гр╕Фр╕╣р╕кр╕Ф:**
тАв р╕Др╕ер╕┤р╕Б "р╕Фр╕╣р╕кр╕Хр╕гр╕╡р╕бр╕зр╕┤р╕Фр╕╡р╣Вр╕н" р╕кр╕│р╕лр╕гр╕▒р╕Ъ Live View
тАв р╕Фр╕╣р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М

ЁЯТм **р╕Бр╕▓р╕гр╣Гр╕Кр╣Й AI Agent:**
тАв р╕Юр╕┤р╕бр╕Юр╣Мр╕Др╕│р╕Цр╕▓р╕бр╣Гр╕Щр╕Кр╣Ир╕нр╕Зр╣Бр╕Кр╕Ч
тАв р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕кр╕Цр╕┤р╕Хр╕┤ р╕гр╕░р╕Ър╕Ъ р╕лр╕гр╕╖р╕нр╕Щр╕Б
тАв р╕Вр╕нр╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╕░р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М"""
        
        return "ЁЯФН р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕░р╕Ър╕╕р╕зр╕┤р╕Шр╕╡р╕Бр╕▓р╕гр╕Чр╕│р╕нр╕░р╣Др╕гр╣Гр╕лр╣Йр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╕бр╕▓р╕Бр╕Вр╕╢р╣Йр╕Щр╕Др╕гр╕▒р╕Ъ"
    
    def _generate_temporal_response(self, message: str, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╣Ар╕зр╕ер╕▓"""
        now = dt.datetime.now()
        hour = now.hour
        
        # р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Вр╕нр╕Зр╕Щр╕Б
        activity_level = "р╕кр╕╣р╕З" if (6 <= hour <= 9) or (16 <= hour <= 19) else "р╕Ыр╕▓р╕Щр╕Бр╕ер╕▓р╕З" if (10 <= hour <= 15) else "р╕Хр╣Ир╕│"
        
        return f"""тП░ **р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕зр╕ер╕▓р╣Бр╕ер╕░р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Щр╕Б:**

ЁЯХР **р╕Хр╕нр╕Щр╕Щр╕╡р╣Й:** {now.strftime('%H:%M:%S')}
ЁЯУЕ **р╕зр╕▒р╕Щр╕Чр╕╡р╣И:** {now.strftime('%d/%m/%Y')}

ЁЯРж **р╕гр╕░р╕Фр╕▒р╕Ър╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Щр╕Б:** {activity_level}

тнР **р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╣Бр╕Щр╕░р╕Щр╕│:**
тАв **06:00-09:00**: ЁЯМЕ р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕Зр╕кр╕╕р╕Ф (р╕нр╕нр╕Бр╕лр╕▓р╕нр╕▓р╕лр╕▓р╕г)
тАв **12:00-15:00**: ЁЯМЮ р╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щр╣Гр╕Щр╕гр╕▒р╕З
тАв **16:00-19:00**: ЁЯМЖ р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕З (р╕Бр╕ер╕▒р╕Ър╕гр╕▒р╕З)
тАв **20:00-05:00**: ЁЯМЩ р╕Юр╕▒р╕Бр╕Ьр╣Ир╕нр╕Щр╣Гр╕Щр╕гр╕▒р╕З

ЁЯОп **р╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕│р╕лр╕гр╕▒р╕Ъ:**
тАв р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕▒р╕З: 10:00-15:00
тАв р╕кр╕▒р╕Зр╣Ар╕Бр╕Хр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б: 06:00-09:00, 16:00-19:00
тАв р╕Чр╕│р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Ф: 10:00-14:00"""
    
    def _generate_recommendation_response(self, message: str, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│"""
        bird_data = real_data.get('bird_stats', {})
        current_count = bird_data.get('current_count', 0)
        
        recommendations = []
        
        # р╣Бр╕Щр╕░р╕Щр╕│р╕Хр╕▓р╕бр╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Б
        if current_count == 0:
            recommendations.extend([
                "ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕ар╕▓р╕Юр╕гр╕▒р╕Зр╕зр╣Ир╕▓р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓р╣Др╕лр╕б",
                "ЁЯМбя╕П р╕Ыр╕гр╕▒р╕Ър╕нр╕╕р╕Ур╕лр╕ар╕╣р╕бр╕┤р╣Гр╕лр╣Йр╣Ар╕лр╕бр╕▓р╕░р╕кр╕б 25-30┬░C",
                "ЁЯТб р╕ер╕Фр╣Бр╕кр╕Зр╕гр╕Ър╕Бр╕зр╕Щр╣Гр╕Щр╕гр╕▒р╕З"
            ])
        elif current_count > 10:
            recommendations.extend([
                "тЬЕ р╕кр╕ар╕▓р╕Юр╕гр╕▒р╕Зр╕Фр╕╡р╕бр╕▓р╕Б р╕Щр╕Бр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В",
                "ЁЯУК р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Бр╕▓р╕гр╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕кр╕бр╣Ир╕│р╣Ар╕кр╕бр╕н",
                "ЁЯЫбя╕П р╣Ар╕Юр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕гр╕▒р╕Бр╕йр╕▓р╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в"
            ])
        else:
            recommendations.extend([
                "ЁЯУИ р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╕нр╕вр╕╣р╣Ир╣Гр╕Щр╣Ар╕Бр╕Ур╕Ср╣Мр╕Ыр╕Бр╕Хр╕┤",
                "ЁЯОп р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Юр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕в",
                "тЪЦя╕П р╕гр╕▒р╕Бр╕йр╕▓р╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╣Йр╕Др╕Зр╕Чр╕╡р╣И"
            ])
        
        # р╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕бр╕Хр╕▓р╕бр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        if any(word in message for word in ['р╣Ар╕Юр╕┤р╣Ир╕б', 'р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З', 'р╕Фр╕╡р╕Вр╕╢р╣Йр╕Щ']):
            recommendations.extend([
                "ЁЯНГ р╕Ыр╕ер╕╣р╕Бр╕Хр╣Йр╕Щр╣Др╕бр╣Йр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕бр╕гр╕нр╕Ър╕Ър╕гр╕┤р╣Ар╕зр╕У",
                "ЁЯТз р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕лр╕ер╣Ир╕Зр╕Щр╣Йр╕│р╣Гр╕Бр╕ер╣Йр╕гр╕▒р╕З",
                "ЁЯФЗ р╕ер╕Фр╣Ар╕кр╕╡р╕вр╕Зр╕гр╕Ър╕Бр╕зр╕Щр╕Ир╕▓р╕Бр╕ар╕▓р╕вр╕Щр╕нр╕Б"
            ])
        
        return f"""ЁЯТб **р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ:**

{chr(10).join([f'тАв {rec}' for rec in recommendations])}

ЁЯОп **р╣Бр╕Щр╕зр╕Чр╕▓р╕Зр╕Бр╕▓р╕гр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕вр╕░р╕вр╕▓р╕з:**
тАв р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б AI Agent р╕Чр╕╕р╕Бр╕зр╕▒р╕Щ
тАв р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б
тАв р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╕Хр╕▓р╕бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М

ЁЯУЮ **р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Вр╕нр╕Др╕│р╕Ыр╕гр╕╢р╕Бр╕йр╕▓:**
р╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б р╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Цр╕▓р╕бр╕Ьр╕бр╣Др╕Фр╣Йр╕Хр╕ер╕нр╕Фр╣Ар╕зр╕ер╕▓р╕Др╕гр╕▒р╕Ъ"""
    
    def _generate_future_response(self, message: str, real_data: Dict) -> str:
        """р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕нр╕Щр╕▓р╕Др╕Х"""
        # р╣Гр╕Кр╣Йр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
        try:
            insights = self.get_predictive_insights()
            if insights.get('predictions'):
                pred = insights['predictions'][0]
                return f"""ЁЯФо **р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕нр╕Щр╕▓р╕Др╕Х:**

ЁЯУИ **24 р╕Кр╕▒р╣Ир╕зр╣Вр╕бр╕Зр╕Вр╣Йр╕▓р╕Зр╕лр╕Щр╣Йр╕▓:**
тАв р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М: {pred['predicted_value']:.1f} р╕Хр╕▒р╕з
тАв р╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕▒р╣Ир╕Щ: {pred['confidence']*100:.0f}%
тАв р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б: {pred['reasoning']}

ЁЯОп **р╣Бр╕Ьр╕Щр╕Бр╕▓р╕г:**
тАв р╕Кр╣Ир╕зр╕Зр╣Ар╕Кр╣Йр╕▓ (06:00-10:00): р╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕кр╕╣р╕З
тАв р╕Кр╣Ир╕зр╕Зр╕Бр╕ер╕▓р╕Зр╕зр╕▒р╕Щ (11:00-15:00): р╕ер╕Фр╕ер╕З
тАв р╕Кр╣Ир╕зр╕Зр╣Ар╕вр╣Зр╕Щ (16:00-20:00): р╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З

ЁЯФз **р╕Бр╕▓р╕гр╣Ар╕Хр╕гр╕╡р╕вр╕бр╕Бр╕▓р╕г:**
тАв р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ър╕Бр╕ер╣Йр╕нр╕Зр╣Гр╕лр╣Йр╕Юр╕гр╣Йр╕нр╕б
тАв р╕гр╕▒р╕Бр╕йр╕▓р╕кр╕ар╕▓р╕Юр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕бр╣Гр╕лр╣Йр╣Ар╕лр╕бр╕▓р╕░р╕кр╕б
тАв р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕Зр╕Ьр╣Ир╕▓р╕Щ AI Agent"""
            else:
                return self._generate_general_future_response()
        except:
            return self._generate_general_future_response()
    
    def _generate_general_future_response(self) -> str:
        """р╕Др╕│р╕Хр╕нр╕Ър╕Чр╕▒р╣Ир╕зр╣Др╕Ыр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕нр╕Щр╕▓р╕Др╕Х"""
        return """ЁЯЪА **р╣Бр╕Ьр╕Щр╕Бр╕▓р╕гр╕Юр╕▒р╕Тр╕Щр╕▓р╕гр╕░р╕Ър╕Ър╣Гр╕Щр╕нр╕Щр╕▓р╕Др╕Х:**

ЁЯдЦ **AI Enhancement:**
тАв р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕зр╕▓р╕бр╣Бр╕бр╣Ир╕Щр╕вр╕│р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ
тАв р╣Ар╕Юр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З
тАв р╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╣Бр╕Ър╕Ър╕ер╕╢р╕Бр╕бр╕▓р╕Бр╕Вр╕╢р╣Йр╕Щ

ЁЯУК **Analytics:**
тАв р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Ыр╕гр╕░р╕Ир╕│р╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М/р╣Ар╕Фр╕╖р╕нр╕Щ
тАв р╕Бр╕▓р╕гр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З
тАв р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕гр╕░р╕вр╕░р╕вр╕▓р╕з

ЁЯМР **Features:**
тАв р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Ьр╣Ир╕▓р╕Щ Mobile App
тАв р╕Бр╕▓р╕гр╕Др╕зр╕Ър╕Др╕╕р╕бр╕гр╕░р╕вр╕░р╣Др╕Бр╕е
тАв р╕Бр╕▓р╕гр╣Бр╕Кр╕гр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▒р╕Ър╕Ьр╕╣р╣Йр╣Ар╕Кр╕╡р╣Ир╕вр╕зр╕Кр╕▓р╕Н"""
    
    def _generate_smart_fallback_response(self, message: str, context: Dict, real_data: Dict) -> str:
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Др╕│р╕Хр╕нр╕Ъ fallback р╕Чр╕╡р╣Ир╕Йр╕ер╕▓р╕Ф"""
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕│р╕кр╕│р╕Др╕▒р╕Нр╣Гр╕Щр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕б
        keywords = []
        if 'р╕Щр╕Б' in message: keywords.append('bird_info')
        if any(word in message for word in ['р╕гр╕░р╕Ър╕Ъ', 'system']): keywords.append('system_info')
        if any(word in message for word in ['р╕кр╕Цр╕┤р╕Хр╕┤', 'р╕Вр╣Йр╕нр╕бр╕╣р╕е']): keywords.append('statistics')
        
        if keywords:
            response = "ЁЯдЦ **р╕Ьр╕бр╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕зр╣Ир╕▓р╕Др╕╕р╕Ур╕кр╕Щр╣Гр╕Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ъ:**\n\n"
            
            if 'bird_info' in keywords:
                bird_data = real_data.get('bird_stats', {})
                current_count = bird_data.get('current_count', 0)
                response += f"ЁЯРж **р╕Щр╕Бр╕Щр╕▓р╕Зр╣Бр╕нр╣Ир╕Щ:** р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щр╕бр╕╡ {current_count} р╕Хр╕▒р╕зр╣Гр╕Щр╕гр╕▒р╕З\n"
            
            if 'system_info' in keywords:
                response += "тЪЩя╕П **р╕гр╕░р╕Ър╕Ъ:** р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤р╕Фр╣Йр╕зр╕в AI р╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З\n"
            
            if 'statistics' in keywords:
                response += "ЁЯУК **р╕кр╕Цр╕┤р╕Хр╕┤:** р╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М\n"
            
            response += "\nЁЯТб **р╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣Ир╣Бр╕Щр╕░р╕Щр╕│:**\n"
            response += "тАв 'р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕зр╕зр╕▒р╕Щр╕Щр╕╡р╣Й'\n"
            response += "тАв 'р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ър╣Ар╕Ыр╣Зр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╣Др╕г'\n"
            response += "тАв 'р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Щр╕Б'\n"
            response += "\nтЭУ р╕ер╕нр╕Зр╕Цр╕▓р╕бр╣Гр╕лр╕бр╣Ир╣Гр╕Щр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╕Бр╕зр╣Ир╕▓р╕Щр╕╡р╣Йр╕Др╕гр╕▒р╕Ъ"
            
            return response
        
        # р╕Др╕│р╕Хр╕нр╕Ъ fallback р╕Чр╕▒р╣Ир╕зр╣Др╕Ы
        return f"""ЁЯдЦ **р╕Вр╕нр╕нр╕ар╕▒р╕вр╕Др╕гр╕▒р╕Ъ р╕Ьр╕бр╕вр╕▒р╕Зр╣Др╕бр╣Ир╣Ар╕Вр╣Йр╕▓р╣Гр╕Ир╕Др╕│р╕Цр╕▓р╕бр╕Щр╕╡р╣Й**

ЁЯУЭ **р╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╕Вр╕нр╕Зр╕Др╕╕р╕У:** "{message}"

ЁЯТб **р╕ер╕нр╕Зр╕Цр╕▓р╕бр╣Бр╕Ър╕Ър╕Щр╕╡р╣Йр╕Фр╕╣р╕Др╕гр╕▒р╕Ъ:**
тАв р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Б: "р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕з", "р╕кр╕Цр╕┤р╕Хр╕┤р╕Щр╕Б"
тАв р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ъ: "р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ", "р╕Бр╕ер╣Йр╕нр╕Зр╕Чр╕│р╕Зр╕▓р╕Щр╣Др╕лр╕б"
тАв р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М: "р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б", "р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕б"
тАв р╕Вр╕нр╕Др╕зр╕▓р╕бр╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н: "р╕Кр╣Ир╕зр╕вр╣Ар╕лр╕ер╕╖р╕н", "р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Др╕Фр╣Й"

ЁЯза **р╕Ьр╕бр╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й:** р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Щр╕╡р╣Йр╕Ир╕░р╕Кр╣Ир╕зр╕вр╣Гр╕лр╣Йр╕Ьр╕бр╕Хр╕нр╕Ър╣Др╕Фр╣Йр╕Фр╕╡р╕Вр╕╢р╣Йр╕Щр╣Гр╕Щр╕Др╕гр╕▒р╣Йр╕Зр╕Хр╣Ир╕нр╣Др╕Ы"""
    
    def _get_trend_analysis(self, birds_in: int, birds_out: int) -> str:
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕б"""
        diff = birds_in - birds_out
        if diff > 5:
            return "ЁЯЯв р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╣Ар╕Ыр╣Зр╕Щр╕Ър╕зр╕Бр╕бр╕▓р╕Б р╕Щр╕Бр╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╕нр╕вр╣Ир╕▓р╕Зр╕бр╕╡р╕Щр╕▒р╕вр╕кр╕│р╕Др╕▒р╕Н"
        elif diff > 0:
            return "ЁЯФ╡ р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╣Ар╕Ыр╣Зр╕Щр╕Ър╕зр╕Б р╕Щр╕Бр╣Ар╕Юр╕┤р╣Ир╕бр╕Вр╕╢р╣Йр╕Щр╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕в"
        elif diff == 0:
            return "тЪк р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Др╕Зр╕Чр╕╡р╣И р╕Ир╕│р╕Щр╕зр╕Щр╕Щр╕Бр╣Др╕бр╣Ир╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Бр╕Ыр╕ер╕З"
        elif diff > -5:
            return "ЁЯЯб р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╣Ар╕Ыр╣Зр╕Щр╕ер╕Ър╣Ар╕ер╣Зр╕Бр╕Щр╣Йр╕нр╕в р╕Др╕зр╕гр╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Хр╣Ир╕н"
        else:
            return "ЁЯФ┤ р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╣Ар╕Ыр╣Зр╕Щр╕ер╕Ър╕бр╕▓р╕Б р╕Хр╣Йр╕нр╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕▒р╕Нр╕лр╕▓"
    
    def _analyze_recent_conversations(self):
        """р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕ер╣Ир╕▓р╕кр╕╕р╕Ф"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Др╕│р╕Цр╕▓р╕б
            cursor.execute('''
                SELECT user_message, COUNT(*) as frequency
                FROM conversations 
                WHERE timestamp > datetime('now', '-1 day')
                GROUP BY user_message
                ORDER BY frequency DESC
                LIMIT 10
            ''')
            
            trends = cursor.fetchall()
            if trends:
                print(f"ЁЯУИ Top question trends: {trends[0][0][:30]}... ({trends[0][1]} times)")
            
            conn.close()
            
        except Exception as e:
            print(f"тЪая╕П Error analyzing conversations: {e}")
    
    def _identify_question_trends(self):
        """р╕гр╕░р╕Ър╕╕р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Др╕│р╕Цр╕▓р╕б"""
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕бр╕Чр╕╡р╣Ир╕Цр╕▓р╕бр╕Ър╣Ир╕нр╕в
        question_types = {}
        for entry in self.conversation_history[-10:]:  # 10 р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕ер╣Ир╕▓р╕кр╕╕р╕Ф
            q_type = self._classify_question_advanced(entry.user_message if hasattr(entry, 'user_message') else str(entry))
            question_types[q_type] = question_types.get(q_type, 0) + 1
        
        if question_types:
            most_common = max(question_types, key=question_types.get)
            print(f"ЁЯОп Most common question type: {most_common}")
    
    def _update_confidence_scores(self):
        """р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Др╕░р╣Бр╕Щр╕Щр╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕▒р╣Ир╕Щ"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕▒р╣Ир╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╣Ир╕нр╕в
            cursor.execute('''
                UPDATE learned_patterns 
                SET confidence = CASE 
                    WHEN usage_count > 10 THEN 0.95
                    WHEN usage_count > 5 THEN 0.85
                    WHEN usage_count > 2 THEN 0.75
                    ELSE confidence
                END
                WHERE last_used > datetime('now', '-7 days')
            ''')
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"тЪая╕П Error updating confidence scores: {e}")
    
    def _initialize_advanced_learning_database(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Йр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS advanced_conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_message TEXT,
                    ai_response TEXT,
                    context TEXT,
                    confidence REAL,
                    question_type TEXT,
                    response_quality TEXT,
                    user_satisfaction INTEGER,
                    timestamp DATETIME,
                    session_id TEXT,
                    prediction_accuracy REAL DEFAULT 0.0,
                    learning_value REAL DEFAULT 0.0
                )
            ''')
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Юр╕др╕Хр╕┤р╕Бр╕гр╕гр╕бр╕Вр╕▒р╣Йр╕Щр╕кр╕╣р╕З
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS behavioral_patterns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    pattern_type TEXT,
                    pattern_data TEXT,
                    confidence REAL,
                    usage_count INTEGER DEFAULT 0,
                    accuracy_score REAL DEFAULT 0.0,
                    created_date DATETIME,
                    last_updated DATETIME
                )
            ''')
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS predictions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    prediction_type TEXT,
                    input_data TEXT,
                    predicted_value REAL,
                    actual_value REAL,
                    confidence REAL,
                    accuracy REAL,
                    timestamp DATETIME,
                    validation_timestamp DATETIME
                )
            ''')
            
            # р╕Хр╕▓р╕гр╕▓р╕Зр╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕кр╕┤р╣Ир╕Зр╣Бр╕зр╕Фр╕ер╣Йр╕нр╕б
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS environmental_analysis (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    analysis_type TEXT,
                    environmental_data TEXT,
                    bird_activity_data TEXT,
                    correlation_score REAL,
                    insights TEXT,
                    timestamp DATETIME
                )
            ''')
            
            conn.commit()
            conn.close()
            print("ЁЯЧДя╕П Advanced learning database initialized")
            
        except Exception as e:
            print(f"тЪая╕П Error initializing advanced database: {e}")
    
    def _initialize_predictive_models(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╣Вр╕бр╣Ар╕Фр╕ер╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М"""
        try:
            # р╣Вр╕бр╣Ар╕Фр╕ер╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
            self.prediction_models = {
                'bird_activity': {
                    'model_type': 'linear_regression',
                    'features': ['hour', 'temperature', 'humidity', 'day_of_week'],
                    'accuracy': 0.0,
                    'last_trained': None
                },
                'threat_assessment': {
                    'model_type': 'classification',
                    'features': ['intruder_type', 'time_of_day', 'location', 'duration'],
                    'accuracy': 0.0,
                    'last_trained': None
                },
                'environmental_impact': {
                    'model_type': 'regression',
                    'features': ['temperature', 'humidity', 'light_level', 'weather'],
                    'accuracy': 0.0,
                    'last_trained': None
                }
            }
            
            print("ЁЯФо Predictive models initialized")
            
        except Exception as e:
            print(f"тЪая╕П Error initializing predictive models: {e}")
    
    def _initialize_real_time_monitoring(self):
        """р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М"""
        def real_time_monitor():
            while True:
                try:
                    # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ир╕▓р╕Б API
                    current_data = self._fetch_real_time_data()
                    if current_data:
                        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╕░р╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й
                        self._process_real_time_data(current_data)
                        # р╕Чр╕│р╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
                        self._generate_predictions(current_data)
                    
                    time.sleep(self.data_fetch_interval)
                    
                except Exception as e:
                    print(f"тЪая╕П Real-time monitoring error: {e}")
                    time.sleep(60)
        
        # р╣Ар╕гр╕┤р╣Ир╕б monitoring thread
        monitor_thread = threading.Thread(target=real_time_monitor, daemon=True)
        monitor_thread.start()
        print("ЁЯУб Real-time monitoring started")
    
    def _fetch_real_time_data(self) -> Dict[str, Any]:
        """р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣Мр╕Ир╕▓р╕Б API"""
        try:
            real_time_data = {}
            
            # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Б
            bird_data = self._safe_api_call(self.api_endpoints['bird_stats'])
            if bird_data:
                real_time_data['birds'] = bird_data
            
            # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕б
            intruder_data = self._safe_api_call(self.api_endpoints['intruder_alerts'])
            if intruder_data:
                real_time_data['intruders'] = intruder_data
            
            # р╕Фр╕╢р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ
            system_data = self._safe_api_call(self.api_endpoints['system_health'])
            if system_data:
                real_time_data['system'] = system_data
            
            return real_time_data
            
        except Exception as e:
            print(f"тЪая╕П Error fetching real-time data: {e}")
            return {}
    
    def _process_real_time_data(self, data: Dict[str, Any]):
        """р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М"""
        try:
            timestamp = dt.datetime.now()
            
            # р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Щр╕Б
            if 'birds' in data:
                bird_info = data['birds']
                pattern = SwallowPattern(
                    timestamp=timestamp,
                    birds_in=bird_info.get('total_entries', 0),
                    birds_out=bird_info.get('total_exits', 0),
                    current_count=bird_info.get('current_count', 0),
                    temperature=25.0,  # р╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
                    humidity=60.0,     # р╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
                    activity_level="normal"
                )
                
                self.swallow_patterns.append(pattern)
                self.data_buffer.append({
                    'type': 'bird_data',
                    'data': pattern,
                    'timestamp': timestamp
                })
            
            # р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б
            if 'intruders' in data:
                intruder_info = data['intruders']
                threat_data = {
                    'timestamp': timestamp,
                    'threat_level': self._assess_threat_level(intruder_info),
                    'intruder_count': len(intruder_info.get('detections', [])),
                    'types': [d.get('type', 'unknown') for d in intruder_info.get('detections', [])]
                }
                
                self.data_buffer.append({
                    'type': 'threat_data',
                    'data': threat_data,
                    'timestamp': timestamp
                })
            
            self.last_data_fetch = timestamp
            
        except Exception as e:
            print(f"тЪая╕П Error processing real-time data: {e}")
    
    def _generate_predictions(self, current_data: Dict[str, Any]):
        """р╕кр╕гр╣Йр╕▓р╕Зр╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ"""
        try:
            if len(self.swallow_patterns) < 5:
                return  # р╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕бр╣Ир╣Ар╕Юр╕╡р╕вр╕Зр╕Юр╕н
            
            # р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕Бр╕┤р╕Ир╕Бр╕гр╕гр╕бр╕Щр╕Б
            bird_prediction = self.trend_predictor.predict_bird_activity(
                list(self.swallow_patterns), 
                prediction_hours=24
            )
            
            if bird_prediction.confidence > 0.5:
                # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣М
                self._save_prediction(bird_prediction)
                
                # р╕нр╕▒р╕Юр╣Ар╕Фр╕Х data buffer
                self.data_buffer.append({
                    'type': 'prediction',
                    'data': bird_prediction,
                    'timestamp': dt.datetime.now()
                })
            
        except Exception as e:
            print(f"тЪая╕П Error generating predictions: {e}")
    
    def _save_prediction(self, prediction: PredictionResult):
        """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Бр╕▓р╕гр╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕ер╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е"""
        try:
            conn = sqlite3.connect(self.learning_db)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO predictions (
                    prediction_type, predicted_value, confidence, 
                    timestamp, input_data
                ) VALUES (?, ?, ?, ?, ?)
            ''', (
                prediction.prediction_type,
                prediction.predicted_value,
                prediction.confidence,
                prediction.timestamp,
                json.dumps({
                    'reasoning': prediction.reasoning,
                    'factors': prediction.factors,
                    'metadata': prediction.metadata
                })
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"тЪая╕П Error saving prediction: {e}")
    
    def _assess_threat_level(self, intruder_data: Dict) -> str:
        """р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б"""
        detections = intruder_data.get('detections', [])
        if not detections:
            return 'low'
        
        # р╕Щр╕▒р╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Вр╕нр╕Зр╕ар╕▒р╕вр╕Др╕╕р╕Бр╕Др╕▓р╕б
        threat_counts = {}
        for detection in detections:
            threat_type = detection.get('type', 'unknown')
            threat_counts[threat_type] = threat_counts.get(threat_type, 0) + 1
        
        # р╕Ыр╕гр╕░р╣Ар╕бр╕┤р╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕Др╕зр╕▓р╕бр╣Ар╕кр╕╡р╣Ир╕вр╕З
        if 'person' in threat_counts and threat_counts['person'] > 1:
            return 'critical'
        elif 'person' in threat_counts:
            return 'high'
        elif any(animal in threat_counts for animal in ['cat', 'dog', 'snake']):
            return 'medium'
        else:
            return 'low'
# р╕кр╕гр╣Йр╕▓р╕З instance р╕кр╕│р╕лр╕гр╕▒р╕Ъ backward compatibility
UltraSmartAIAgent = EnhancedUltraSmartAIAgent

if __name__ == "__main__":
    # р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ
    agent = EnhancedUltraSmartAIAgent()
    
    print("\nЁЯзк Testing Ultimate Intelligent AI Agent...")
    test_questions = [
        "р╕кр╕зр╕▒р╕кр╕Фр╕╡",
        "р╕Щр╕Бр╣Ар╕Вр╣Йр╕▓р╕Бр╕╡р╣Ир╕Хр╕▒р╕з",
        "р╕бр╕╡р╕кр╕┤р╣Ир╕Зр╣Бр╕Ыр╕ер╕Бр╕Ыр╕ер╕нр╕бр╣Др╕лр╕б",
        "р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ",
        "р╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Бр╕▒р╕Ър╕Щр╕Бр╣Бр╕нр╣Ир╕Щ",
        "р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Щр╕Бр╣Гр╕Щр╕зр╕▒р╕Щр╕Юр╕гр╕╕р╣Ир╕Зр╕Щр╕╡р╣Й"
    ]
    
    for question in test_questions:
        print(f"\nЁЯСд User: {question}")
        response = agent.get_response(question)
        print(f"ЁЯдЦ AI: {response}")
