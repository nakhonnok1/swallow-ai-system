#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯОп ULTIMATE AI DEMO - р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ AI System р╕Чр╕╡р╣Ир╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
р╣Бр╕кр╕Фр╕Зр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╕гр╕░р╕Ър╕Ъ AI р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕гр╣Ир╕зр╕бр╕Бр╕▒р╕Щ
Version: 1.0 - COMPREHENSIVE AI DEMONSTRATION

ЁЯЪА р╕гр╕░р╕Ър╕Ър╕Чр╕╡р╣Ир╕гр╕зр╕бр╕нр╕вр╕╣р╣И:
- Ultimate AI Vision System (OpenCV YOLO Detector)
- AI Helper System (Smart Monitoring & Optimization)
- AI Performance Booster (Performance Enhancement)
- Enhanced Ultra Smart AI Agent (Chatbot)
- Real-time Statistics & Analytics
"""

import cv2
import numpy as np
import time
import threading
from pathlib import Path
import json

def main_ai_demo():
    """р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Хр╕гр╕░р╕Ър╕Ъ AI р╕лр╕ер╕▒р╕Б"""
    print("ЁЯОп ULTIMATE AI SYSTEM DEMONSTRATION")
    print("="*80)
    
    # р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ъ AI р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
    print("ЁЯЪА р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕гр╕░р╕Ър╕Ъ AI р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...")
    
    # 1. р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ AI Vision System
    print("\n1я╕ПтГг р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Ultimate AI Vision System...")
    try:
        from opencv_yolo_detector import OpenCVYOLODetector
        ai_detector = OpenCVYOLODetector()
        
        if ai_detector.available:
            print("тЬЕ AI Vision System р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        else:
            print("тЭМ AI Vision System р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
            return
            
    except Exception as e:
        print(f"тЭМ Error loading AI Vision: {e}")
        return
    
    # 2. р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ AI Helper System
    print("\n2я╕ПтГг р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ AI Helper System...")
    try:
        from ai_helper_system import get_ai_helper
        ai_helper = get_ai_helper()
        ai_helper.register_ai_system("main_detector", ai_detector)
        print("тЬЕ AI Helper System р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Бр╕ер╣Йр╕з")
    except Exception as e:
        print(f"тЪая╕П AI Helper System р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕б: {e}")
        ai_helper = None
    
    # 3. р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Performance Booster
    print("\n3я╕ПтГг р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ AI Performance Booster...")
    try:
        from ai_performance_booster import get_performance_booster
        performance_booster = get_performance_booster()
        performance_booster.optimize_ai_system(ai_detector)
        print("тЬЕ Performance Booster р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╣Бр╕ер╣Йр╕з")
    except Exception as e:
        print(f"тЪая╕П Performance Booster р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕б: {e}")
        performance_booster = None
    
    # 4. р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ AI Chatbot
    print("\n4я╕ПтГг р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ Enhanced Ultra Smart AI Agent...")
    try:
        from enhanced_ultra_smart_ai_agent import EnhancedUltraSmartAIAgent
        ai_chatbot = EnhancedUltraSmartAIAgent()
        print("тЬЕ AI Chatbot р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
    except Exception as e:
        print(f"тЪая╕П AI Chatbot р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕б: {e}")
        ai_chatbot = None
    
    print("\n" + "="*80)
    print("ЁЯОп р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х AI System...")
    
    # р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Хр╣Бр╕Ър╕Ъ Interactive
    while True:
        print("\nЁЯФз р╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х:")
        print("1. ЁЯОе р╕Чр╕Фр╕кр╕нр╕Ъ AI Vision Detection")
        print("2. ЁЯдЦ р╕Чр╕Фр╕кр╕нр╕Ъ AI Chatbot")
        print("3. ЁЯУК р╣Бр╕кр╕Фр╕З Dashboard & Statistics")
        print("4. тЪб р╕Чр╕Фр╕кр╕нр╕Ъ Performance")
        print("5. ЁЯФД р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤")
        print("6. ЁЯТ╛ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕нр╕нр╕Б")
        
        choice = input("\nЁЯСЙ р╣Ар╕ер╕╖р╕нр╕Бр╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Б (1-6): ").strip()
        
        if choice == "1":
            demo_ai_vision(ai_detector, ai_helper)
        elif choice == "2":
            demo_ai_chatbot(ai_chatbot)
        elif choice == "3":
            show_comprehensive_dashboard(ai_helper, performance_booster, ai_detector)
        elif choice == "4":
            demo_performance_test(ai_detector, performance_booster)
        elif choice == "5":
            auto_optimize_systems(ai_helper, performance_booster)
        elif choice == "6":
            save_and_exit(ai_helper, ai_detector)
            break
        else:
            print("тЭМ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З")

def demo_ai_vision(ai_detector, ai_helper):
    """р╕кр╕▓р╕Шр╕┤р╕Х AI Vision Detection"""
    print("\nЁЯОе р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х AI Vision Detection")
    print("-" * 50)
    
    # р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕лр╕ер╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е
    print("р╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕лр╕ер╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е:")
    print("1. р╕Бр╕ер╣Йр╕нр╕З RTSP")
    print("2. р╕Бр╕ер╣Йр╕нр╕З USB/Webcam")
    print("3. р╣Др╕Яр╕ер╣Мр╕зр╕┤р╕Фр╕╡р╣Вр╕н")
    print("4. р╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕Ър╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤")
    
    source_choice = input("ЁЯСЙ р╣Ар╕ер╕╖р╕нр╕Б (1-4): ").strip()
    
    cap = None
    
    if source_choice == "1":
        rtsp_url = input("ЁЯФЧ р╣Гр╕кр╣И RTSP URL (р╕лр╕гр╕╖р╕нр╕Бр╕Ф Enter р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ): ").strip()
        if not rtsp_url:
            rtsp_url = "rtsp://ainok1:ainok123@192.168.1.100:554/stream1"
        cap = cv2.VideoCapture(rtsp_url)
        
    elif source_choice == "2":
        cap = cv2.VideoCapture(0)
        
    elif source_choice == "3":
        video_path = input("ЁЯУ╣ р╣Гр╕кр╣И path р╕Вр╕нр╕Зр╣Др╕Яр╕ер╣Мр╕зр╕┤р╕Фр╕╡р╣Вр╕н: ").strip()
        if Path(video_path).exists():
            cap = cv2.VideoCapture(video_path)
        else:
            print("тЭМ р╣Др╕Яр╕ер╣Мр╣Др╕бр╣Ир╕Юр╕Ъ")
            return
            
    elif source_choice == "4":
        # р╕Чр╕Фр╕кр╕нр╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤
        test_auto_detection(ai_detector)
        return
    
    if not cap or not cap.isOpened():
        print("тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Бр╕лр╕ер╣Ир╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Др╕Фр╣Й")
        return
    
    print("тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕кр╕│р╣Ар╕гр╣Зр╕И!")
    print("ЁЯУЭ р╕Бр╕Ф 'q' р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕нр╕Б, 's' р╣Ар╕Юр╕╖р╣Ир╕нр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ар╕▓р╕Ю, 'p' р╣Ар╕Юр╕╖р╣Ир╕нр╕Юр╕▒р╕Бр╕Кр╕▒р╣Ир╕зр╕Др╕гр╕▓р╕з")
    
    frame_count = 0
    detection_count = 0
    start_time = time.time()
    paused = False
    
    while True:
        if not paused:
            ret, frame = cap.read()
            if not ret:
                break
            
            frame_count += 1
            
            # р╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕Фр╣Йр╕зр╕в AI
            detections = ai_detector.detect_objects(frame, conf_threshold=0.4)
            
            if len(detections) > 0:
                detection_count += 1
                
                # р╕зр╕▓р╕Фр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М
                result_frame = ai_detector.draw_detections(frame, detections)
                
                # р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ър╕Щр╕лр╕Щр╣Йр╕▓р╕Ир╕н
                elapsed = time.time() - start_time
                fps = frame_count / elapsed if elapsed > 0 else 0
                
                info_text = f"Frame: {frame_count} | Detections: {len(detections)} | FPS: {fps:.1f}"
                cv2.putText(result_frame, info_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)
                
                # р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕г objects
                y_offset = 60
                for i, det in enumerate(detections):
                    det_text = f"{det['class']}: {det['confidence']:.2f}"
                    cv2.putText(result_frame, det_text, (10, y_offset + i*25), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
                
                cv2.imshow('AI Vision Detection', result_frame)
                
                # р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Гр╕Щ console
                if frame_count % 30 == 0:  # р╕Чр╕╕р╕Б 30 р╣Ар╕Яр╕гр╕б
                    print(f"ЁЯУК Frame {frame_count}: {len(detections)} objects, FPS: {fps:.1f}")
                    for det in detections:
                        print(f"   ЁЯОп {det['class']}: {det['confidence']:.2f}")
            else:
                cv2.imshow('AI Vision Detection', frame)
        
        # р╕Ир╕▒р╕Фр╕Бр╕▓р╕г keyboard input
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break
        elif key == ord('s'):
            # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ар╕▓р╕Ю
            timestamp = int(time.time())
            filename = f"ai_detection_{timestamp}.jpg"
            if len(detections) > 0:
                cv2.imwrite(filename, result_frame)
            else:
                cv2.imwrite(filename, frame)
            print(f"ЁЯТ╛ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕ар╕▓р╕Ю: {filename}")
        elif key == ord('p'):
            paused = not paused
            print(f"тП╕я╕П {'р╕Юр╕▒р╕Б' if paused else 'р╣Ар╕ер╣Ир╕Щ'}р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х")
    
    cap.release()
    cv2.destroyAllWindows()
    
    # р╕кр╕гр╕╕р╕Ыр╕Ьр╕е
    total_time = time.time() - start_time
    avg_fps = frame_count / total_time if total_time > 0 else 0
    detection_rate = (detection_count / frame_count) * 100 if frame_count > 0 else 0
    
    print(f"\nЁЯУИ р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х AI Vision:")
    print(f"   ЁЯОм р╣Ар╕Яр╕гр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {frame_count}")
    print(f"   ЁЯОп р╣Ар╕Яр╕гр╕бр╕Чр╕╡р╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ: {detection_count}")
    print(f"   ЁЯУК р╕нр╕▒р╕Хр╕гр╕▓р╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ъ: {detection_rate:.1f}%")
    print(f"   тЪб FPS р╣Ар╕Йр╕ер╕╡р╣Ир╕в: {avg_fps:.1f}")
    print(f"   тП▒я╕П р╣Ар╕зр╕ер╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: {total_time:.1f} р╕зр╕┤р╕Щр╕▓р╕Чр╕╡")

def demo_ai_chatbot(ai_chatbot):
    """р╕кр╕▓р╕Шр╕┤р╕Х AI Chatbot"""
    if not ai_chatbot:
        print("тЭМ AI Chatbot р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        return
    
    print("\nЁЯдЦ р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х AI Chatbot")
    print("-" * 50)
    print("ЁЯТм р╕Юр╕┤р╕бр╕Юр╣Мр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕Юр╕╖р╣Ир╕нр╕кр╕Щр╕Чр╕Щр╕▓р╕Бр╕▒р╕Ъ AI")
    print("ЁЯУЭ р╕Юр╕┤р╕бр╕Юр╣М 'exit' р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕нр╕Б")
    print("ЁЯУЭ р╕Юр╕┤р╕бр╕Юр╣М 'help' р╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Юр╕┤р╣Ар╕ир╕й")
    
    while True:
        user_input = input("\nЁЯСд р╕Др╕╕р╕У: ").strip()
        
        if user_input.lower() == 'exit':
            break
        elif user_input.lower() == 'help':
            print("ЁЯФз р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕Юр╕┤р╣Ар╕ир╕й:")
            print("   'status' - р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ")
            print("   'stats' - р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤")
            print("   'analyze' - р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕е")
            print("   'clear' - р╕ер╣Йр╕▓р╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓")
            continue
        elif user_input.lower() == 'status':
            print("ЁЯФН р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ...")
            # р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ
            continue
        elif user_input.lower() == 'stats':
            print("ЁЯУК р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤р╕гр╕░р╕Ър╕Ъ...")
            # р╣Бр╕кр╕Фр╕Зр╕кр╕Цр╕┤р╕Хр╕┤
            continue
        elif user_input.lower() == 'clear':
            ai_chatbot.conversation_history.clear()
            print("ЁЯз╣ р╕ер╣Йр╕▓р╕Зр╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╣Бр╕ер╣Йр╕з")
            continue
        
        if not user_input:
            continue
        
        try:
            # р╕кр╣Ир╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Др╕Ыр╕вр╕▒р╕З AI
            print("ЁЯдФ AI р╕Бр╕│р╕ер╕▒р╕Зр╕Др╕┤р╕Ф...")
            response = ai_chatbot.generate_response(user_input)
            print(f"ЁЯдЦ AI: {response}")
            
        except Exception as e:
            print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {e}")

def show_comprehensive_dashboard(ai_helper, performance_booster, ai_detector):
    """р╣Бр╕кр╕Фр╕З Dashboard р╣Бр╕Ър╕Ър╕Др╕гр╕Ър╕Цр╣Йр╕зр╕Щ"""
    print("\nЁЯУК COMPREHENSIVE AI DASHBOARD")
    print("="*80)
    
    # 1. System Overview
    print("ЁЯЦея╕П SYSTEM OVERVIEW")
    print("-"*40)
    
    if ai_detector:
        model_info = ai_detector.get_model_info()
        print(f"ЁЯдЦ AI Model: {model_info['version']}")
        print(f"тЪЩя╕П Backend: {model_info['backend']}")
        print(f"ЁЯОп Target: {model_info['target']}")
        print(f"ЁЯУП Input Size: {model_info['input_size']}")
        print(f"ЁЯУЪ Classes: {model_info['classes_count']}")
    
    # 2. Detection Statistics
    if ai_detector:
        print(f"\nЁЯОп DETECTION STATISTICS")
        print("-"*40)
        stats = ai_detector.get_detection_stats()
        print(f"ЁЯФН Total Detections: {stats['total_detections']}")
        print(f"ЁЯРж Birds: {stats['birds_detected']}")
        print(f"ЁЯСд Persons: {stats['persons_detected']}")
        print(f"ЁЯР╛ Animals: {stats['animals_detected']}")
        print(f"ЁЯЪЧ Vehicles: {stats['vehicles_detected']}")
        print(f"тЪб Current FPS: {stats['fps']:.1f}")
        print(f"тП▒я╕П Processing Time: {stats['processing_time']*1000:.1f}ms")
    
    # 3. AI Helper Dashboard
    if ai_helper:
        print(f"\nЁЯдЦ AI HELPER DASHBOARD")
        print("-"*40)
        dashboard = ai_helper.get_system_dashboard()
        
        overview = dashboard['overview']
        print(f"ЁЯОЫя╕П Active Systems: {overview['active_systems']}")
        print(f"тП░ Uptime: {overview['total_uptime']/3600:.1f} hours")
        print(f"ЁЯУК Status: {overview['status']}")
        
        for system_id, data in dashboard['systems'].items():
            print(f"\n   ЁЯФз {system_id}:")
            print(f"      Status: {data['status']}")
            print(f"      FPS: {data['fps']:.1f}")
            print(f"      Accuracy: {data['accuracy']:.2f}")
            print(f"      CPU: {data['cpu_usage']:.1f}%")
            print(f"      Memory: {data['memory_usage']:.1f}%")
    
    # 4. Performance Report
    if performance_booster:
        print(f"\nтЪб PERFORMANCE REPORT")
        print("-"*40)
        report = performance_booster.get_performance_report()
        
        profile = report['system_profile']
        print(f"ЁЯТ╗ CPU Cores: {profile['cpu_cores']}")
        print(f"ЁЯза Memory: {profile['memory_gb']:.1f} GB")
        print(f"ЁЯЪА GPU: {'Available' if profile['gpu_available'] else 'Not Available'}")
        print(f"тЪЩя╕П Processing Mode: {profile['processing_mode']}")
        
        metrics = report['performance_metrics']
        print(f"\nЁЯУИ Performance Improvements:")
        print(f"   FPS: +{metrics['fps_improvement']:.1f}%")
        print(f"   Memory: +{metrics['memory_saved']:.1f}%")
        print(f"   CPU: +{metrics['cpu_optimization']:.1f}%")
        print(f"   Cache Hit Rate: {metrics['cache_hit_rate']:.1f}%")
        print(f"   Total Speedup: +{metrics['total_speedup']:.1f}%")
    
    # 5. Recommendations
    if ai_helper:
        print(f"\nЁЯТб RECOMMENDATIONS")
        print("-"*40)
        dashboard = ai_helper.get_system_dashboard()
        
        for system_id, recommendations in dashboard['recommendations'].items():
            if recommendations:
                print(f"ЁЯУЭ {system_id}:")
                for rec in recommendations[:3]:  # р╣Бр╕кр╕Фр╕З 3 р╕Вр╣Йр╕нр╣Бр╕гр╕Б
                    priority_emoji = "ЁЯФ┤" if rec['priority'] >= 4 else "ЁЯЯб" if rec['priority'] >= 3 else "ЁЯЯв"
                    print(f"   {priority_emoji} {rec['description']}")
                    print(f"      Expected Improvement: +{rec['improvement']:.1f}%")
    
    print("\n" + "="*80)

def demo_performance_test(ai_detector, performance_booster):
    """р╕кр╕▓р╕Шр╕┤р╕Хр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю"""
    print("\nтЪб р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю AI")
    print("-" * 50)
    
    if not ai_detector or not ai_detector.available:
        print("тЭМ AI Detector р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ")
        return
    
    print("ЁЯзк р╣Ар╕гр╕┤р╣Ир╕бр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю...")
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Чр╕Фр╕кр╕нр╕Ъ
    test_frames = []
    for i in range(10):
        # р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕кр╕╕р╣Ир╕б
        frame = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        test_frames.append(frame)
    
    print(f"ЁЯУ╕ р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Чр╕Фр╕кр╕нр╕Ъ {len(test_frames)} р╕ар╕▓р╕Ю")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╣Ир╕нр╕Щр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З
    print("\n1я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╣Ир╕нр╕Щр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З...")
    times_before = []
    for i, frame in enumerate(test_frames):
        start_time = time.time()
        detections = ai_detector.detect_objects(frame)
        end_time = time.time()
        processing_time = end_time - start_time
        times_before.append(processing_time)
        print(f"   р╣Ар╕Яр╕гр╕б {i+1}: {processing_time*1000:.1f}ms ({len(detections)} objects)")
    
    avg_time_before = sum(times_before) / len(times_before)
    avg_fps_before = 1.0 / avg_time_before
    
    # р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю
    print("\n2я╕ПтГг р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю...")
    if performance_booster:
        performance_booster.optimize_ai_system(ai_detector)
        print("тЬЕ р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╣Бр╕ер╣Йр╕з")
    
    # р╕Чр╕Фр╕кр╕нр╕Ър╕лр╕ер╕▒р╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З
    print("\n3я╕ПтГг р╕Чр╕Фр╕кр╕нр╕Ър╕лр╕ер╕▒р╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З...")
    times_after = []
    for i, frame in enumerate(test_frames):
        start_time = time.time()
        detections = ai_detector.detect_objects(frame)
        end_time = time.time()
        processing_time = end_time - start_time
        times_after.append(processing_time)
        print(f"   р╣Ар╕Яр╕гр╕б {i+1}: {processing_time*1000:.1f}ms ({len(detections)} objects)")
    
    avg_time_after = sum(times_after) / len(times_after)
    avg_fps_after = 1.0 / avg_time_after
    
    # р╕кр╕гр╕╕р╕Ыр╕Ьр╕е
    improvement = ((avg_time_before - avg_time_after) / avg_time_before) * 100
    fps_improvement = ((avg_fps_after - avg_fps_before) / avg_fps_before) * 100
    
    print(f"\nЁЯУК р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю:")
    print(f"   тП▒я╕П р╣Ар╕зр╕ер╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕Бр╣Ир╕нр╕Щр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З: {avg_time_before*1000:.1f}ms")
    print(f"   тП▒я╕П р╣Ар╕зр╕ер╕▓р╣Ар╕Йр╕ер╕╡р╣Ир╕вр╕лр╕ер╕▒р╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З: {avg_time_after*1000:.1f}ms")
    print(f"   ЁЯУИ р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Ар╕зр╕ер╕▓: {improvement:.1f}%")
    print(f"   тЪб FPS р╕Бр╣Ир╕нр╕Щр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З: {avg_fps_before:.1f}")
    print(f"   тЪб FPS р╕лр╕ер╕▒р╕Зр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З: {avg_fps_after:.1f}")
    print(f"   ЁЯУИ р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З FPS: {fps_improvement:.1f}%")
    
    if improvement > 0:
        print("тЬЕ р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕Фр╕╡р╕Вр╕╢р╣Йр╕Щ!")
    else:
        print("тЪая╕П р╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю")

def auto_optimize_systems(ai_helper, performance_booster):
    """р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤"""
    print("\nЁЯФД р╕Бр╕▓р╕гр╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤")
    print("-" * 50)
    
    optimizations_count = 0
    
    if ai_helper:
        print("ЁЯдЦ р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╕Фр╣Йр╕зр╕в AI Helper...")
        for system_id in ai_helper.active_ai_systems:
            if ai_helper.optimize_system(system_id, auto_apply=True):
                optimizations_count += 1
                print(f"тЬЕ р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕З {system_id} р╕кр╕│р╣Ар╕гр╣Зр╕И")
    
    if performance_booster:
        print("тЪб р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю...")
        # р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Чр╕╡р╣Ир╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щ
        if ai_helper:
            for system_id, system_data in ai_helper.active_ai_systems.items():
                ai_system = system_data['instance']
                if performance_booster.optimize_ai_system(ai_system):
                    optimizations_count += 1
                    print(f"тЬЕ р╣Ар╕Юр╕┤р╣Ир╕бр╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Ю {system_id} р╕кр╕│р╣Ар╕гр╣Зр╕И")
    
    print(f"\nЁЯОп р╕кр╕гр╕╕р╕Ы: р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ъ {optimizations_count} р╕гр╕░р╕Ър╕Ъ")

def test_auto_detection(ai_detector):
    """р╕Чр╕Фр╕кр╕нр╕Ър╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕Ир╕▒р╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤"""
    print("ЁЯдЦ р╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤")
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╕ар╕▓р╕Юр╕Чр╕Фр╕кр╕нр╕Ъ
    test_images = []
    
    # р╕ар╕▓р╕Юр╕Юр╕╖р╣Йр╕Щр╕лр╕ер╕▒р╕З
    background = np.zeros((480, 640, 3), dtype=np.uint8)
    test_images.append(("Background", background))
    
    # р╕ар╕▓р╕Юр╕кр╕╕р╣Ир╕б
    random_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
    test_images.append(("Random", random_image))
    
    # р╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕бр╕╡р╕гр╕╣р╕Ыр╕гр╣Ир╕▓р╕З
    shape_image = np.zeros((480, 640, 3), dtype=np.uint8)
    cv2.rectangle(shape_image, (100, 100), (200, 200), (0, 255, 0), -1)
    cv2.circle(shape_image, (400, 300), 50, (255, 0, 0), -1)
    test_images.append(("Shapes", shape_image))
    
    total_detections = 0
    
    for name, image in test_images:
        print(f"\nЁЯФН р╕Чр╕Фр╕кр╕нр╕Ър╕ар╕▓р╕Ю: {name}")
        
        detections = ai_detector.detect_objects(image, conf_threshold=0.3)
        total_detections += len(detections)
        
        print(f"   р╕Юр╕Ъ {len(detections)} objects")
        for det in detections:
            print(f"   - {det['class']}: {det['confidence']:.2f}")
        
        # р╣Бр╕кр╕Фр╕Зр╕ар╕▓р╕Ю (optional)
        if len(detections) > 0:
            result_image = ai_detector.draw_detections(image, detections)
            cv2.imshow(f'Test: {name}', result_image)
            cv2.waitKey(1000)  # р╣Бр╕кр╕Фр╕З 1 р╕зр╕┤р╕Щр╕▓р╕Чр╕╡
    
    cv2.destroyAllWindows()
    print(f"\nЁЯУК р╕кр╕гр╕╕р╕Ы: р╕Юр╕Ъ objects р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф {total_detections} р╕гр╕▓р╕вр╕Бр╕▓р╕г")

def save_and_exit(ai_helper, ai_detector):
    """р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕нр╕нр╕Б"""
    print("\nЁЯТ╛ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕ер╕░р╕нр╕нр╕Бр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ъ")
    print("-" * 50)
    
    # р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣Мр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ър╕▒р╕Щр╕Чр╕╢р╕Б
    save_dir = Path("ai_demo_results")
    save_dir.mkdir(exist_ok=True)
    
    timestamp = int(time.time())
    
    # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕кр╕Цр╕┤р╕Хр╕┤ AI Detector
    if ai_detector:
        stats = ai_detector.get_detection_stats()
        model_info = ai_detector.get_model_info()
        
        ai_data = {
            'timestamp': timestamp,
            'statistics': stats,
            'model_info': model_info,
            'demo_completed': True
        }
        
        with open(save_dir / f"ai_detector_stats_{timestamp}.json", 'w', encoding='utf-8') as f:
            json.dump(ai_data, f, indent=2, ensure_ascii=False)
        
        print(f"тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е AI Detector р╣Бр╕ер╣Йр╕з")
    
    # р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е AI Helper
    if ai_helper:
        dashboard = ai_helper.get_system_dashboard()
        
        with open(save_dir / f"ai_helper_dashboard_{timestamp}.json", 'w', encoding='utf-8') as f:
            json.dump(dashboard, f, indent=2, ensure_ascii=False)
        
        print(f"тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е AI Helper р╣Бр╕ер╣Йр╕з")
        
        # р╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╕ер╕Зр╕Чр╕░р╣Ар╕Ър╕╡р╕вр╕Щ
        ai_helper.unregister_ai_system("main_detector")
    
    print(f"ЁЯУБ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Цр╕╣р╕Бр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Гр╕Щ: {save_dir}")
    print("ЁЯОп р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Х Ultimate AI System р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!")
    print("р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Ultimate AI System! ЁЯЪА")

if __name__ == "__main__":
    try:
        main_ai_demo()
    except KeyboardInterrupt:
        print("\nтП╣я╕П р╕Бр╕▓р╕гр╕кр╕▓р╕Шр╕┤р╕Хр╕Цр╕╣р╕Бр╕лр╕вр╕╕р╕Фр╣Вр╕Фр╕вр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й")
    except Exception as e:
        print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {e}")
    finally:
        print("ЁЯСЛ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ Ultimate AI Demo!")
