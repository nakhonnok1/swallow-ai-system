#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç ULTIMATE SYSTEM DIAGNOSIS & CAMERA CHECKER
‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
===============================================================================
"""

import cv2
import requests
import json
import time
import sys
import os
from datetime import datetime

class SystemDiagnostics:
    def __init__(self):
        self.base_url = "http://localhost:5000"
        self.rtsp_url = "rtsp://ainok1:ainok123@192.168.1.100:554/stream1"
        
    def check_flask_server(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Flask Server"""
        print("üåê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Flask Server...")
        try:
            response = requests.get(f"{self.base_url}/", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Flask Server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
                return True
            else:
                print(f"‚ö†Ô∏è Flask Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™: {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Flask Server")
            return False
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Flask Server: {e}")
            return False
    
    def check_video_feed(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Video Feed API"""
        print("üìπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Video Feed...")
        try:
            response = requests.get(f"{self.base_url}/video_feed", timeout=15, stream=True)
            if response.status_code == 200:
                # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                chunk = next(response.iter_content(1024))
                if b'Content-Type: image/jpeg' in chunk:
                    print("‚úÖ Video Feed ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
                    return True
                else:
                    print("‚ö†Ô∏è Video Feed ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                    return False
            else:
                print(f"‚ùå Video Feed ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Video Feed: {e}")
            return False
    
    def check_api_endpoints(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Endpoints"""
        print("üîå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Endpoints...")
        endpoints = [
            "/api/stats",
            "/api/statistics", 
            "/api/notifications",
            "/api/database-stats",
            "/api/anomaly-images"
        ]
        
        results = {}
        for endpoint in endpoints:
            try:
                response = requests.get(f"{self.base_url}{endpoint}", timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ {endpoint} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
                    results[endpoint] = True
                else:
                    print(f"‚ö†Ô∏è {endpoint} ‡∏£‡∏´‡∏±‡∏™: {response.status_code}")
                    results[endpoint] = False
            except Exception as e:
                print(f"‚ùå {endpoint} ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                results[endpoint] = False
        
        return results
    
    def check_camera_direct(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
        print("üé• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...")
        try:
            cap = cv2.VideoCapture(self.rtsp_url)
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            
            if not cap.isOpened():
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á")
                return False
            
            print("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö
            ret, frame = cap.read()
            if ret and frame is not None:
                h, w, c = frame.shape
                print(f"‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏Ç‡∏ô‡∏≤‡∏î: {w}x{h}, ‡∏ä‡πà‡∏≠‡∏á: {c}")
                
                # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö FPS
                start_time = time.time()
                frame_count = 0
                
                for _ in range(10):
                    ret, frame = cap.read()
                    if ret:
                        frame_count += 1
                
                elapsed = time.time() - start_time
                fps = frame_count / elapsed if elapsed > 0 else 0
                print(f"üìä FPS ‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ: {fps:.2f}")
                
                cap.release()
                return True
            else:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏†‡∏≤‡∏û")
                cap.release()
                return False
                
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á: {e}")
            return False
    
    def check_system_files(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        print("üìÇ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö...")
        
        important_files = [
            "app_working.py",
            "config.py", 
            "ultimate_ai_config.py",
            "yolov4.weights",
            "yolov4.cfg",
            "coco.names",
            "templates/index.html"
        ]
        
        results = {}
        for file_path in important_files:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"‚úÖ {file_path} - ‡∏Ç‡∏ô‡∏≤‡∏î: {size:,} bytes")
                results[file_path] = True
            else:
                print(f"‚ùå {file_path} - ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
                results[file_path] = False
        
        return results
    
    def get_system_info(self):
        """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
        print("üíª ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö...")
        
        info = {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'python_version': sys.version,
            'opencv_version': cv2.__version__,
            'current_directory': os.getcwd(),
            'rtsp_url': self.rtsp_url,
            'flask_url': self.base_url
        }
        
        for key, value in info.items():
            print(f"üìã {key}: {value}")
        
        return info
    
    def run_full_diagnosis(self):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£"""
        print("=" * 70)
        print("üîç ULTIMATE SYSTEM DIAGNOSIS - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
        print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 70)
        
        results = {}
        
        # 1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        results['system_info'] = self.get_system_info()
        print()
        
        # 2. ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö
        results['system_files'] = self.check_system_files()
        print()
        
        # 3. ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á
        results['camera_connection'] = self.check_camera_direct()
        print()
        
        # 4. Flask Server
        results['flask_server'] = self.check_flask_server()
        print()
        
        # 5. Video Feed
        results['video_feed'] = self.check_video_feed()
        print()
        
        # 6. API Endpoints
        results['api_endpoints'] = self.check_api_endpoints()
        print()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        self.print_summary(results)
        
        return results
    
    def print_summary(self, results):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
        print("=" * 70)
        print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
        print("=" * 70)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
        sections = [
            ('üé• ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á', results.get('camera_connection', False)),
            ('üåê Flask Server', results.get('flask_server', False)),
            ('üìπ Video Feed', results.get('video_feed', False))
        ]
        
        for name, status in sections:
            status_text = "‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥" if status else "‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
            print(f"{name}: {status_text}")
        
        # API Endpoints
        api_results = results.get('api_endpoints', {})
        working_apis = sum(1 for v in api_results.values() if v)
        total_apis = len(api_results)
        print(f"üîå API Endpoints: {working_apis}/{total_apis} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
        
        # ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö
        file_results = results.get('system_files', {})
        existing_files = sum(1 for v in file_results.values() if v)
        total_files = len(file_results)
        print(f"üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö: {existing_files}/{total_files} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°
        print("\n" + "=" * 70)
        critical_systems = [
            results.get('camera_connection', False),
            results.get('flask_server', False),
            results.get('video_feed', False)
        ]
        
        if all(critical_systems):
            print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
            print("üåê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://localhost:5000")
        elif any(critical_systems):
            print("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô")
        else:
            print("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        print("=" * 70)

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    diagnostics = SystemDiagnostics()
    
    while True:
        print("\nüîç ULTIMATE SYSTEM DIAGNOSTICS")
        print("1. üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£")
        print("2. üé• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
        print("3. üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Web Server ‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
        print("4. üîå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡πÄ‡∏â‡∏û‡∏≤‡∏∞")
        print("5. üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        
        choice = input("\nüëÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5): ").strip()
        
        if choice == '1':
            diagnostics.run_full_diagnosis()
        elif choice == '2':
            diagnostics.check_camera_direct()
        elif choice == '3':
            diagnostics.check_flask_server()
            diagnostics.check_video_feed()
        elif choice == '4':
            diagnostics.check_api_endpoints()
        elif choice == '5':
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô System Diagnostics!")
            break
        else:
            print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        input("\n‚è≥ ‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")

if __name__ == "__main__":
    main()
