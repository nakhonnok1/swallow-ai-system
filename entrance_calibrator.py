#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ Entrance Calibrator
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Ñ‡∏≤‡∏•‡∏¥‡πÄ‡∏ö‡∏£‡∏ï "‡∏Å‡∏£‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ + ‡πÄ‡∏™‡πâ‡∏ô 4 ‡πÄ‡∏™‡πâ‡∏ô" ‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏ó‡∏£‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
- ‡πÇ‡∏´‡∏•‡∏î/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á entrance_config.json
- ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏•‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏ö + ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÅ‡∏≠‡∏Ñ‡∏ó‡∏µ‡∏ü
"""

import cv2
import json
import os
from datetime import datetime

DEFAULT = {
    'frame_width': 960,
    'frame_height': 540,
    'entrance_zone': {'x': 450, 'y': 200, 'width': 100, 'height': 80, 'center_y': 240},
    'counting_lines': {'gate': 550},
    'line_mode': '1'  # '1' = 1 gate line only
}

BASE_DIR = os.path.dirname(__file__)
CFG_FILE = os.path.join(BASE_DIR, 'entrance_config.json')

class EntranceCalibrator:
    def __init__(self, video_path=None):
        self.video_path = video_path
        self.cfg = self.load_cfg()
        self.dragging = False
        self.drag_offset = (0, 0)
        self.active_line = None
        self.window = 'Entrance Calibrator'

    def load_cfg(self):
        if os.path.exists(CFG_FILE):
            with open(CFG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
                if 'line_mode' not in data:
                    data['line_mode'] = '1'
                if 'counting_lines' not in data:
                    data['counting_lines'] = DEFAULT['counting_lines']
                if 'entrance_zone' not in data:
                    data['entrance_zone'] = DEFAULT['entrance_zone']
                return data
        return DEFAULT.copy()

    def save_cfg(self):
        with open(CFG_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.cfg, f, indent=2, ensure_ascii=False)
        print(f'üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤: {CFG_FILE}')

    def on_mouse(self, event, x, y, flags, param):
        ez = self.cfg['entrance_zone']
        cl = self.cfg['counting_lines']
        mode = self.cfg.get('line_mode', '1')
        if event == cv2.EVENT_LBUTTONDOWN:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤
            if ez['x'] <= x <= ez['x']+ez['width'] and ez['y'] <= y <= ez['y']+ez['height']:
                self.dragging = True
                self.drag_offset = (x - ez['x'], y - ez['y'])
                self.active_line = None
            else:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡πâ‡∏ô (¬±8px)
                if mode == 'rect':
                    visible_lines = []
                elif mode == '1':
                    visible_lines = ['gate']
                elif mode == '2':
                    visible_lines = ['pre_entry', 'main']
                else:
                    visible_lines = ['pre_entry', 'entry', 'main', 'exit']
                for name in visible_lines:
                    lx = cl.get(name)
                    if lx is None:
                        continue
                    if abs(x - lx) <= 8:
                        self.active_line = name
                        break
        elif event == cv2.EVENT_MOUSEMOVE and self.dragging:
            ez['x'] = max(0, x - self.drag_offset[0])
            ez['y'] = max(0, y - self.drag_offset[1])
            ez['center_y'] = ez['y'] + ez['height']//2
        elif event == cv2.EVENT_MOUSEMOVE and self.active_line:
            cl[self.active_line] = max(0, x)
        elif event == cv2.EVENT_LBUTTONUP:
            self.dragging = False
            self.active_line = None

    def draw_overlay(self, frame):
        ez = self.cfg['entrance_zone']
        cl = self.cfg['counting_lines']
        mode = self.cfg.get('line_mode', '1')
        out = frame.copy()
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤
        cv2.rectangle(out, (ez['x'], ez['y']), (ez['x']+ez['width'], ez['y']+ez['height']), (0,255,255), 2)
        cv2.putText(out, 'ENTRANCE', (ez['x'], ez['y']-8), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,255), 2)
        # ‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏±‡∏ö
        colors = {'pre_entry': (255,255,0), 'entry': (0,255,0), 'main': (0,0,255), 'exit': (255,0,255), 'gate': (0,165,255)}
        h = out.shape[0]
        if mode == 'rect':
            visible_lines = []
        elif mode == '1':
            visible_lines = ['gate']
        elif mode == '2':
            visible_lines = ['pre_entry', 'main']
        else:
            visible_lines = ['pre_entry', 'entry', 'main', 'exit']
        for name in visible_lines:
            lx = cl.get(name)
            if lx is None:
                continue
            color = colors.get(name, (200,200,200))
            
            # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Å‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏ï‡∏π
            if name == 'gate':
                ez = self.cfg['entrance_zone']
                y1 = ez['y']
                y2 = ez['y'] + ez['height']
                cv2.line(out, (lx, y1), (lx, y2), color, 3)  # ‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î
                cv2.putText(out, 'GATE', (lx+5, y1-5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
            else:
                # ‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏¢‡∏≤‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
                cv2.line(out, (lx, 0), (lx, h), color, 2)
                cv2.putText(out, name.upper(), (lx+5, 24), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
        # ‡πÅ‡∏ñ‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        source = getattr(self, 'current_source', 'None')
        mode_text = {'rect': 'RECT-ONLY', '1': '1-LINE', '2': '2-LINE', '4': '4-LINE'}.get(mode, mode)
        help1 = f"MODE: {mode_text} (0/1/2/4) | s=Save | o=Open video | q=Quit | Source: {source}"
        help2 = f"Save path: {os.path.abspath(CFG_FILE)}"
        cv2.putText(out, help1, (10, h-24), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255), 1)
        cv2.putText(out, help2, (10, h-8), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (200,200,200), 1)
        return out

    def run(self):
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏° (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≠‡∏î‡∏≥)
        cap = None
        self.current_source = 'None'
        if self.video_path and os.path.exists(self.video_path):
            cap = cv2.VideoCapture(self.video_path)
            if getattr(cap, 'isOpened', lambda: False)():
                self.current_source = os.path.basename(self.video_path)
        if cap is None or not getattr(cap, 'isOpened', lambda: False)():
            try:
                tmp = cv2.VideoCapture(0)
                if getattr(tmp, 'isOpened', lambda: False)():
                    cap = tmp
                    self.current_source = 'Webcam(0)'
                else:
                    tmp.release()
            except Exception:
                cap = None
        cv2.namedWindow(self.window)
        cv2.setMouseCallback(self.window, self.on_mouse)
        print('‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏•‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ | ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≤‡∏Å | 2/4=‡∏™‡∏•‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏™‡πâ‡∏ô | s=‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å | q=‡∏≠‡∏≠‡∏Å')
        frame = None
        import numpy as np
        while True:
            if cap is not None:
                ok, f = cap.read()
                if not ok:
                    cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                    ok, f = cap.read()
                if not ok:
                    f = np.zeros((DEFAULT['frame_height'], DEFAULT['frame_width'], 3), dtype=np.uint8)
                frame = cv2.resize(f, (DEFAULT['frame_width'], DEFAULT['frame_height']))
            else:
                frame = np.zeros((DEFAULT['frame_height'], DEFAULT['frame_width'], 3), dtype=np.uint8)
            view = self.draw_overlay(frame)
            cv2.imshow(self.window, view)
            key = cv2.waitKey(30) & 0xFF
            if key == ord('s'):
                self.save_cfg()
            elif key == ord('1'):
                self.cfg['line_mode'] = '1'
                cl = self.cfg['counting_lines']
                # ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ gate
                gate_x = cl.get('gate', 570)
                self.cfg['counting_lines'] = {'gate': gate_x}
                cl = self.cfg['counting_lines']
                cl.setdefault('gate', 550)
            elif key == ord('o'):
                # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
                try:
                    import tkinter as tk
                    from tkinter import filedialog
                    root = tk.Tk(); root.withdraw()
                    filepath = filedialog.askopenfilename(title='‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠',
                                                          filetypes=[('Video Files','*.mp4;*.avi;*.mov;*.mkv'), ('All Files','*.*')])
                    root.destroy()
                    if filepath and os.path.exists(filepath):
                        if cap is not None:
                            cap.release()
                        cap = cv2.VideoCapture(filepath)
                        if getattr(cap, 'isOpened', lambda: False)():
                            self.video_path = filepath
                            self.current_source = os.path.basename(filepath)
                            print(f"üéûÔ∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠: {filepath}")
                        else:
                            print("‚ö†Ô∏è ‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    else:
                        print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
                except Exception as e:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}")
            elif key == ord('q'):
                break
        cv2.destroyAllWindows()
        if cap is not None:
            cap.release()

if __name__ == '__main__':
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ï‡πâ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå training_videos ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    base = os.path.join(BASE_DIR, 'training_videos')
    video = None
    try:
        if os.path.isdir(base):
            for dirpath, _, filenames in os.walk(base):
                for name in filenames:
                    if name.lower().endswith(('.mp4','.avi','.mov','.mkv')):
                        video = os.path.join(dirpath, name)
                        raise StopIteration
    except StopIteration:
        pass
    EntranceCalibrator(video).run()
